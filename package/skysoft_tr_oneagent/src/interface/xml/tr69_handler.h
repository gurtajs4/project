#ifndef __TR69_HANDLER_H__
#define __TR69_HANDLER_H__

#define _GNU_SOURCE

#include <sys/sysinfo.h>
#include <arpa/inet.h>
#include <netinet/in.h>
#include <stdio.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <unistd.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <errno.h>
#include <sys/timeb.h>
#include <time.h>
#include <sys/time.h>
#ifndef USE_X86
#include <iwinfo.h>
#endif
#include <uci.h>
#include <suci.h>

#include "tr69_handler_ext.h"
#include "tr69_handler_table.h"
#include "tr_uciconfig.h"
#include "log.h"
#include "string.h"
#include "apps.h"
#include "tr.h"
#include "tr_strings.h"
#include "system.h"
#include "session.h"

#include "ssl.h"
#include <sys/stat.h>
#include <openssl/crypto.h>
#include <openssl/ssl.h>
#include <openssl/err.h>
#include <openssl/ssl23.h>
#include <openssl/ssl2.h>
#include <openssl/asn1.h>
#include <openssl/pem.h>
#include <openssl/x509.h>
#include <openssl/x509v3.h>
#include <openssl/rsa.h>
#include <openssl/evp.h>
#include <openssl/objects.h>

extern int lib_dynamic_init_children(node_t node);
extern int lib_init_PortMapping_children(node_t node);

#if 0
//QOS template node , it's a path 
#define  QTMP_C_DestVendorSpecificInfoSubOption   "classification_template.template.DestVendorSpecificInfoSubOption"
#define  QTMP_C_EthernetPriorityMark				 "classification_template.template.EthernetPriorityMark"
#define  QTMP_C_InnerEthernetPriorityCheck            "classification_template.template.InnerEthernetPriorityCheck"




//For commit template
#define  SHAPER_TMP 			  "shaper_template"
#define  QUEUE_TMP   			  "queue_template"
#define  CLASSIFICATION_TMP  	  "classification_template" 
//for commit entry
#define  SHAPER 					  "shaper"
#define  QUEUE 					  "queue"
#define  CLASSIFICATION  		  "classification"

//QoSNumberEntries
#define QOSNUMBERENTRIES  "QoSNumberEntries"

//For set ,get ,rename and so on.    it's a path,
#define QUEUENUMBEROFENTRIES_PATH          "QoSNumberEntries.qosnumber.QueueNumberOfEntries"
#define SHAPERNUMBEROFENTRIES_PATH         "QoSNumberEntries.qosnumber.ShaperNumberOfEntries"
#define CLASSIFICATIONNUMBEROFENTRIES_PATH   "QoSNumberEntries.qosnumber.ClassificationNumberOfEntries"
#define MaxShaperEntries_PATH  				 "QoSNumberEntries.qosnumber.MaxClassificationEntries"
#endif

typedef enum
{	
    QosQueueStatus_Disabled=0,
    QosQueueStatus_Enabled=1,
    QosQueueStatus_Error_Misconfigured=2,
    QosQueueStatus_Error=3
} QosQueueStatus;

typedef enum
{	
    QosShaperStatus_Disabled=0,
    QosShaperStatus_Enabled=1,
    QosShaperStatus_Error_Misconfigured=2,
    QosShaperStatus_Error=3
} QosShaperStatus; 	

typedef enum
{	
    QosClassificationStatus_Disabled=0,
    QosClassificationStatus_Enabled=1,
    QosClassificationStatus_Error_Misconfigured=2,
    QosClassificationStatus_Error=3
} QosClassificationStatus; 	


//extern int uci_caller = UCI_CALLER_TR;
extern int connectionRequestPasswordFlag;
extern int managementServerPasswordFlag;
extern int managementServerSTUNPasswordFlag;
int dealayrebootsens = 0;
long int schedulerebootsens = 0;
int parameternum = 0;
extern a_WifimappingInfo wifi_map[];
extern a_LanmappingInfo lan_map[];

int tr_getvalue_mapfile_byinstance(char* filename,char *value, int inst)
{
    int i = 0;
	int instance;
	char szinstance[16];
	char szvalue[256];
	
	FILE *fp = fopen(filename,"r");
	if (fp)
	{
		while(!feof(fp))
		{
			fscanf(fp,"%s %*s %s",szinstance,szvalue);
			instance	= atoi(szinstance);
			if (instance == inst)
			{
				printf("value = %s \n", szvalue);
				strcpy(value,szvalue);
				fclose(fp);
				return 0;
			}
			i++;
		}
		fclose(fp);
	}
	return -1;
}

static int tr_creat_shaper_rules()
{
	char ShaperNumberOfEntries[32] = {0};
	char ShapingRate[32] = {0};
	char ShapingBurstSize[32] = {0};
	char InterfaceName[256] = {0};
	char TrafficClasses[256] = {0};
	char Interface[256] = {0};
	char Interface2[256] = {0};
	char Weight[256] = {0};
	char Precedence[256] = {0};
	char SchedulerAlgorithm[256] = {0};
	char name[256] = {0};
	char command[256] = {0};
	int i = 0;
	int j = 1;
	int classid = 1;
	int classid1 = 1;
	int wrrflag1 = 0;	
	int wrrflag2 = 0;	
	int wfqflag1 = 0;	
	int wfqflag2 = 0;	
	int setdefault = 0;
	int setdefault1 = 0;
	char value[64] = {0};
	char waninf[32] = {0};
	char shaper_enable[32]={0};

	char shaper_status[32];

	getEthInterfaceName("wan", waninf);
	
	memset(shaper_status, 0, sizeof(shaper_status));	
	memset(ShaperNumberOfEntries, 0, sizeof(ShaperNumberOfEntries));
	do_uci_get(SHAPERNUMBEROFENTRIES_PATH, ShaperNumberOfEntries);
	tr_log(LOG_NOTICE,"ShaperNumberOfEntries S: %s\n", ShaperNumberOfEntries);
	tr_log(LOG_NOTICE,"ShaperNumberOfEntries D: %d\n", atoi(ShaperNumberOfEntries)); 
	while(j < atoi(ShaperNumberOfEntries))
	{
		sprintf(name, "shaper.Device_QoS_Shaper_%d.Status", j);
		do_uci_get(name, shaper_status);
		
		tr_log(LOG_NOTICE,"in while j ====%dth\n",j);        
		sprintf(name, "shaper.Device_QoS_Shaper_%d", j); //j = int [1,7]
		tr_log(LOG_NOTICE,"Device_QoS_Shaper_%d name====%s\n",j,name);		
		do_uci_get(name,value);
		tr_log(LOG_NOTICE,"Device_QoS_Shaper_%d value====%s\n",j,value);
		if(strcmp(value, "shaper") == 0)
		{
			sprintf(name, "shaper.Device_QoS_Shaper_%d.Interface", j);	
			do_uci_get(name, Interface);
			sprintf(name, "shaper.Device_QoS_Shaper_%d.ShapingRate", j);	
			do_uci_get(name, ShapingRate);
			sprintf(name, "shaper.Device_QoS_Shaper_%d.ShapingBurstSize", j);	
			do_uci_get(name, ShapingBurstSize);
			sprintf(name, "shaper.Device_QoS_Shaper_%d.Enable", j);	
			do_uci_get(name, shaper_enable);

			tr_log(LOG_NOTICE,"Interface ====%s\n",Interface);   
			tr_log(LOG_NOTICE,"ShapingRate ====%s\n",ShapingRate);   
			tr_log(LOG_NOTICE,"ShapingBurstSize ====%s\n",ShapingBurstSize);   
			tr_log(LOG_NOTICE,"Interface ====%s\n",Interface);   
			tr_log(LOG_NOTICE,"shaper_enable ====%s\n",shaper_enable);   

			for (i = 0; i <= IP_LAN_INSTANCE_NUM; i ++){
				sprintf(Interface2, "Device.IP.Interface.%d", lan_map[i].num);
				if (strcmp(Interface, Interface2) == 0){
					strcpy(InterfaceName, lan_map[i].laninf);
					break;
				}
			}
			if(strcmp(Interface, IP_WAN_INTERFACE_PATH) == 0)
			{
				strcpy(InterfaceName, waninf);
			}

			if((strcmp(shaper_enable, "1") == 0 )&&(atoi(shaper_status)==QosShaperStatus_Disabled) )//enable=1
			{
				sprintf(command, "tc qdisc add dev %s root handle 1: nsstbl rate %s burst %d", InterfaceName, ShapingRate, atoi(ShapingBurstSize)*8);
				system(command);
				tr_log(LOG_NOTICE,"command: %s\n", command);
			}
			else if(strcmp(shaper_enable, "0") == 0)//disenable=0
			{
				sprintf(command, "tc qdisc del dev %s root handle 1: nsstbl rate %s burst %d", InterfaceName, ShapingRate, atoi(ShapingBurstSize)*8);
				system(command);
				tr_log(LOG_NOTICE,"command: %s\n", command);
			}
			memset(Interface, 0, sizeof(Interface));
			memset(ShapingRate, 0, sizeof(ShapingRate));
			memset(ShapingBurstSize, 0, sizeof(ShapingBurstSize));
			memset(command, 0, sizeof(command));
			memset(value, 0, sizeof(value));
			memset(shaper_enable, 0, sizeof(shaper_enable));
		}
		j++;
	}
}


static int tr_creat_queue_rules()
{
	char ShaperNumberOfEntries[32] = {0};
	char QueueNumberOfEntries[32] = {0};
	char ClassificationNumberOfEntries[32] = {0};
	char ShapingRate[32] = {0};
	char ShapingBurstSize[32] = {0};
	char InterfaceName[256] = {0};
	char TrafficClasses[256] = {0};
	char Interface[256] = {0};
	char Interface2[256] = {0};
	char Weight[256] = {0};
	char Precedence[256] = {0};
	char SchedulerAlgorithm[256] = {0};
	char name[256] = {0};
	char command[256] = {0};
	int i = 0;
	int j = 0;
	int classid = 1;
	int classid1 = 1;
	int wrrflag1 = 0;	
	int wrrflag2 = 0;	
	int wfqflag1 = 0;	
	int wfqflag2 = 0;	
	int setdefault = 0;
	int setdefault1 = 0;
	char value[64] = {0};
	char waninf[32] = {0};
	
	memset(QueueNumberOfEntries, 0, sizeof(QueueNumberOfEntries));
	do_uci_get(QUEUENUMBEROFENTRIES_PATH, QueueNumberOfEntries);
	tr_log(LOG_NOTICE,"QueueNumberOfEntries CCC: %s\n", QueueNumberOfEntries);
	sprintf(QueueNumberOfEntries ,"7");
	tr_log(LOG_NOTICE,"QueueNumberOfEntries=%s\n",QueueNumberOfEntries );
      tr_log(LOG_NOTICE,"atoi(QueueNumberOfEntries)  =%d\n",atoi(QueueNumberOfEntries) );     
	while(j < atoi(QueueNumberOfEntries))
	{
			j++;
			//Device_QoS_Classification_%d
			//Device_QoS_Queue_%d"
			sprintf(name, "queue.Device_QoS_Queue_%d", j);		
			memset(value, 0, sizeof(value));
			do_uci_get(name,value);
			tr_log(LOG_NOTICE,"%d name=%s, value=%s\n",j,name ,value );
			if(strcmp(value, "queue") == 0)
			{
				//i++;
				//Device_QoS_Classification_16
				//qos.cf16.SourceMas
				sprintf(name, "queue.Device_QoS_Queue_%d.TrafficClasses", j);	
				do_uci_get(name, TrafficClasses);
				tr_log(LOG_NOTICE,"name=%s, TrafficClasses=%s\n",name ,TrafficClasses );
				sprintf(name, "queue.Device_QoS_Queue_%d.Interface", j);	
				do_uci_get(name, Interface);
				sprintf(name, "queue.Device_QoS_Queue_%d.Weight", j);	
				do_uci_get(name, Weight);
				sprintf(name, "queue.Device_QoS_Queue_%d.Precedence", j);	
				do_uci_get(name, Precedence);
				sprintf(name, "queue.Device_QoS_Queue_%d.SchedulerAlgorithm", j);	
				do_uci_get(name, SchedulerAlgorithm);

				for (i = 0; i <= IP_LAN_INSTANCE_NUM; i ++){
					sprintf(Interface2, "Device.IP.Interface.%d", lan_map[i].num);
					if (strcmp(Interface, Interface2) == 0){
						strcpy(InterfaceName, lan_map[i].laninf);
						break;
					}
				}
				if(strcmp(Interface, IP_WAN_INTERFACE_PATH) == 0)
				{
					getEthInterfaceName("wan", waninf);
					strcpy(InterfaceName, waninf);
				}

				tr_log(LOG_NOTICE,"SchedulerAlgorithm====%s\n", SchedulerAlgorithm); 
				if(strcasecmp(SchedulerAlgorithm, "SP") == 0)
				{	      
					sprintf(command, "tc qdisc add dev %s parent 1:1 handle 10: nssprio bands 3", InterfaceName);
					system(command);
					tr_log(LOG_NOTICE,"command: %s\n", command);
					sprintf(command, "tc qdisc add dev %s parent 10:1 handle 101: nsspfifo", InterfaceName);
					system(command);
					tr_log(LOG_NOTICE,"command: %s\n", command);
					sprintf(command, "tc qdisc add dev %s parent 10:2 handle 102: nsspfifo", InterfaceName);
					system(command);
					tr_log(LOG_NOTICE,"command: %s\n", command);
					sprintf(command, "tc qdisc add dev %s parent 10:3 handle 103: nsspfifo set_default", InterfaceName);
					system(command);
					tr_log(LOG_NOTICE,"command: %s\n", command);
				}
				else if(strcasecmp(SchedulerAlgorithm, "WRR") == 0)
				{
					if(strcmp(InterfaceName, "br-lan") == 0)
					{
						if(wrrflag1 == 0)
						{
							sprintf(command, "tc qdisc add dev %s parent 1:1 handle 2: nsswrr", InterfaceName);
							system(command);
							tr_log(LOG_NOTICE,"command: %s\n", command);
							wrrflag1 = 1;
						}
						sprintf(command, "tc class add dev %s parent 2: classid 2:%d nsswrr quantum %s", InterfaceName, classid, Weight);
						system(command);
						tr_log(LOG_NOTICE,"command: %s\n", command);
						if(setdefault == 0)
						{
							sprintf(command, "tc qdisc add dev %s parent 2:%d handle %d00: nsspfifo set_default", InterfaceName, classid, classid);
							system(command);
							tr_log(LOG_NOTICE,"command: %s\n", command);
							setdefault = 1;
						}
						else
						{
							sprintf(command, "tc qdisc add dev %s parent 2:%d handle %d00: nsspfifo", InterfaceName, classid, classid);
							system(command);
							tr_log(LOG_NOTICE,"command: %s\n", command);
						}
						classid++;
					}
					else
					{
						if(wrrflag2 == 0)
						{
							sprintf(command, "tc qdisc add dev %s parent 1:1 handle 2: nsswrr", InterfaceName);
							system(command);
							tr_log(LOG_NOTICE,"command: %s\n", command);
							wrrflag2 = 1;
						}
						sprintf(command, "tc class add dev %s parent 2: classid 2:%d nsswrr quantum %s", InterfaceName, classid1, Weight);
						system(command);
						tr_log(LOG_NOTICE,"command: %s\n", command);
						if(setdefault1 == 0)
						{
							sprintf(command, "tc qdisc add dev %s parent 2:%d handle %d00: nsspfifo set_default", InterfaceName, classid1, classid1);
							system(command);
							tr_log(LOG_NOTICE,"command: %s\n", command);
							setdefault1 = 1;
						}
						else
						{
							sprintf(command, "tc qdisc add dev %s parent 2:%d handle %d00: nsspfifo", InterfaceName, classid1, classid1);
							system(command);
							tr_log(LOG_NOTICE,"command: %s\n", command);
						}
						classid1++;
					}		
				}
				else if(strcasecmp(SchedulerAlgorithm, "WFQ") == 0)
				{
					if(strcmp(InterfaceName, "br-lan") == 0)
					{
						if(wfqflag1 == 0)
						{
							sprintf(command, "tc qdisc add dev %s parent 1:1 handle 2: nsswfq", InterfaceName);
							system(command);
							tr_log(LOG_NOTICE,"command: %s\n", command);
							wfqflag1 = 1;
						}
						sprintf(command, "tc class add dev %s parent 2: classid 2:%d nsswfq quantum %s", InterfaceName, classid, Weight);
						system(command);
						tr_log(LOG_NOTICE,"command: %s\n", command);
						if(setdefault == 0)
						{
							sprintf(command, "tc qdisc add dev %s parent 2:%d handle %d00: nsspfifo set_default", InterfaceName, classid, classid);
							system(command);
							tr_log(LOG_NOTICE,"command: %s\n", command);
							setdefault = 1;
						}
						else
						{
							sprintf(command, "tc qdisc add dev %s parent 2:%d handle %d00: nsspfifo", InterfaceName, classid, classid);
							system(command);
							tr_log(LOG_NOTICE,"command: %s\n", command);
						}
						classid++;
					}
					else
					{
						if(wfqflag2 == 0)
						{
							sprintf(command, "tc qdisc add dev %s parent 1:1 handle 2: nsswfq", InterfaceName);
							system(command);
							tr_log(LOG_NOTICE,"command: %s\n", command);
							wfqflag2 = 1;
						}
						sprintf(command, "tc class add dev %s parent 2: classid 2:%d nsswfq quantum %s", InterfaceName, classid1, Weight);
						system(command);
						tr_log(LOG_NOTICE,"command: %s\n", command);
						if(setdefault1 == 0)
						{
							sprintf(command, "tc qdisc add dev %s parent 2:%d handle %d00: nsspfifo set_default", InterfaceName, classid1, classid1);
							system(command);
							tr_log(LOG_NOTICE,"command: %s\n", command);
							setdefault1 = 1;
						}
						else
						{
							sprintf(command, "tc qdisc add dev %s parent 2:%d handle %d00: nsspfifo", InterfaceName, classid1, classid1);
							system(command);
							tr_log(LOG_NOTICE,"command: %s\n", command);
						}
						classid1++;
					}		
				}
			}
	}
	
}

static int tr_creat_classification_rules()
{
	char Enable[32] = {0};
	char Order[32] = {0};
	char AllInterfaces[32] = {0};
	char DestIP[32] = {0};
	char DestMask[32] = {0};
	char DestIPExclude[32] = {0};
	char SourceIP[32] = {0};
	char SourceMask[32] = {0};
	char SourceIPExclude[32] = {0};
	char DestPort[32] = {0};
	char DestPortRangeMax[32] = {0};
	char DestPortExclude[32] = {0};
	char SourcePort[32] = {0};
	char SourcePortRangeMax[32] = {0};
	char SourcePortExclude[32] = {0};
	char SourceMACAddress[32] = {0};
	char SourceMACMask[32] = {0};
	char SourceMACExclude[32] = {0};
	char DestMACAddress[32] = {0};
	char DestMACMask[32] = {0};
	char DestMACExclude[32] = {0};
	char TCPACK[32] = {0};
	char TCPACKExclude[32] = {0};
	char DSCPMark[32] = {0};
	char TrafficClass[32] = {0};
	char Protocol[32] = {0};
	char ProtocolExclude[32] = {0};
	char Ethertype[32] = {0};
	char EthertypeExclude[32] = {0};
	char SSAP[32] = {0};
	char SSAPExclude[32] = {0};
	char DSCPCheck[32] = {0};
	char DSCPExclude[32] = {0};
	char EthernetPriorityCheck[32] = {0};
	char EthernetPriorityExclude[32] = {0};
	char VLANIDCheck[32] = {0};
	char VLANIDExclude[32] = {0};
	char IPLengthMin[32] = {0};
	char IPLengthMax[32] = {0};
	char IPLengthExclude[32] = {0};
	char App[32] = {0};
    char ClassificationNumberOfEntries[32] = {0};
	char iptablescommand[1024] = {0};
	char ebtablescommand[1024] = {0};
	int i;
	int j;
	char value[64] = {0};
	char name[256] = {0};
	char Interface[256] = {0};
	char Interface2[256] = {0};
	char waninf[32] = {0};
	char classification_enable[32] = {0};
	memset(ClassificationNumberOfEntries, 0, sizeof(ClassificationNumberOfEntries));
	memset(classification_enable, 0, sizeof(classification_enable));
	do_uci_get(CLASSIFICATIONNUMBEROFENTRIES_PATH, ClassificationNumberOfEntries);
	printf("ClassificationNumberOfEntries: %s\n", ClassificationNumberOfEntries);

	i = 0;
	j = 1;
	while(j < atoi(ClassificationNumberOfEntries))
	{
		
		sprintf(name, "qos.cf%d", j);
		memset(value, 0, sizeof(value));
		do_uci_get(name,value);
		if(strcmp(value, "classification") == 0)
		{
			memset(Enable, 0, sizeof(Enable));
			sprintf(name, "qos.cf%d.Enable", j);	
			do_uci_get(name, Enable);

			if(atoi(Enable) == 0)
			{
				continue;
			}
			
			memset(Order, 0, sizeof(Order));
			memset(Interface, 0, sizeof(Interface));
			memset(AllInterfaces, 0, sizeof(AllInterfaces));
			memset(DestIP, 0, sizeof(DestIP));
			memset(DestMask, 0, sizeof(DestMask));
			memset(DestIPExclude, 0, sizeof(DestIPExclude));
			memset(SourceIP, 0, sizeof(SourceIP));
			memset(SourceMask, 0, sizeof(SourceMask));
			memset(SourceIPExclude, 0, sizeof(SourceIPExclude));
			memset(DestPort, 0, sizeof(DestPort));
			memset(DestPortRangeMax, 0, sizeof(DestPortRangeMax));
			memset(DestPortExclude, 0, sizeof(DestPortExclude));
			memset(SourcePort, 0, sizeof(SourcePort));
			memset(SourcePortRangeMax, 0, sizeof(SourcePortRangeMax));
			memset(SourcePortExclude, 0, sizeof(SourcePortExclude));
			memset(SourceMACAddress, 0, sizeof(SourceMACAddress));
			memset(SourceMACMask, 0, sizeof(SourceMACMask));
			memset(SourceMACExclude, 0, sizeof(SourceMACExclude));
			memset(DestMACAddress, 0, sizeof(DestMACAddress));
			memset(DestMACMask, 0, sizeof(DestMACMask));
			memset(DestMACExclude, 0, sizeof(DestMACExclude));
			memset(TCPACK, 0, sizeof(TCPACK));
			memset(TCPACKExclude, 0, sizeof(TCPACKExclude));
			memset(DSCPMark, 0, sizeof(DSCPMark));
			memset(Protocol, 0, sizeof(Protocol));
			memset(ProtocolExclude, 0, sizeof(ProtocolExclude));
			memset(TrafficClass, 0, sizeof(TrafficClass));
			memset(Ethertype, 0, sizeof(Ethertype));
			memset(EthertypeExclude, 0, sizeof(EthertypeExclude));
			memset(SSAP, 0, sizeof(SSAP));
			memset(SSAPExclude, 0, sizeof(SSAPExclude));
			memset(DSCPCheck, 0, sizeof(DSCPCheck));
			memset(DSCPExclude, 0, sizeof(DSCPExclude));
			memset(EthernetPriorityCheck, 0, sizeof(EthernetPriorityCheck));
			memset(EthernetPriorityExclude, 0, sizeof(EthernetPriorityExclude));
			memset(VLANIDCheck, 0, sizeof(VLANIDCheck));
			memset(VLANIDExclude, 0, sizeof(VLANIDExclude));
			memset(App, 0, sizeof(App));
			memset(IPLengthMin, 0, sizeof(IPLengthMin));
			memset(IPLengthMax, 0, sizeof(IPLengthMax));
			memset(IPLengthExclude, 0, sizeof(IPLengthExclude));
			memset(classification_enable, 0, sizeof(classification_enable));
			
			sprintf(name, "qos.cf%d.Order", j);	
			do_uci_get(name, Order);
			sprintf(name, "qos.cf%d.Interface", j);	
			do_uci_get(name, Interface);
			sprintf(name, "qos.cf%d.AllInterfaces", j);	
			do_uci_get(name, AllInterfaces);
			sprintf(name, "qos.cf%d.DestIP", j);	
			do_uci_get(name, DestIP);
			sprintf(name, "qos.cf%d.DestMask", j);	
			do_uci_get(name, DestMask);
			sprintf(name, "qos.cf%d.DestIPExclude", j);	
			do_uci_get(name, DestIPExclude);
			sprintf(name, "qos.cf%d.SourceIP", j);	
			do_uci_get(name, SourceIP);
			sprintf(name, "qos.cf%d.SourceMask", j);	
			do_uci_get(name, SourceMask);
			sprintf(name, "qos.cf%d.SourceIPExclude", j);	
			do_uci_get(name, SourceIPExclude);
			sprintf(name, "qos.cf%d.DestPort", j);	
			do_uci_get(name, DestPort);
			sprintf(name, "qos.cf%d.DestPortRangeMax", j);	
			do_uci_get(name, DestPortRangeMax);
			sprintf(name, "qos.cf%d.DestPortExclude", j);	
			do_uci_get(name, DestPortExclude);
			sprintf(name, "qos.cf%d.SourcePort", j);	
			do_uci_get(name, SourcePort);
			sprintf(name, "qos.cf%d.SourcePortRangeMax", j);	
			do_uci_get(name, SourcePortRangeMax);
			sprintf(name, "qos.cf%d.SourcePortExclude", j);	
			do_uci_get(name, SourcePortExclude);
			sprintf(name, "qos.cf%d.SourceMACAddress", j);	
			do_uci_get(name, SourceMACAddress);
			sprintf(name, "qos.cf%d.SourceMACMask", j);	
			do_uci_get(name, SourceMACMask);
			sprintf(name, "qos.cf%d.SourceMACExclude", j);	
			do_uci_get(name, SourceMACExclude);
			sprintf(name, "qos.cf%d.TCPACK", j);	
			do_uci_get(name, TCPACK);
			sprintf(name, "qos.cf%d.TCPACKExclude", j);	
			do_uci_get(name, TCPACKExclude);
			sprintf(name, "qos.cf%d.TrafficClass", j);	
			do_uci_get(name, TrafficClass);
			sprintf(name, "qos.cf%d.DSCPMark", j);	
			do_uci_get(name, DSCPMark);
			sprintf(name, "qos.cf%d.Protocol", j);	
			do_uci_get(name, Protocol);
			sprintf(name, "qos.cf%d.ProtocolExclude", j);	
			do_uci_get(name, ProtocolExclude);
			sprintf(name, "qos.cf%d.DestMACAddress", j);	
			do_uci_get(name, DestMACAddress);
			sprintf(name, "qos.cf%d.DestMACMask", j);	
			do_uci_get(name, DestMACMask);
			sprintf(name, "qos.cf%d.DestMACExclude", j);	
			do_uci_get(name, DestMACExclude);
			sprintf(name, "qos.cf%d.Ethertype", j);	
			do_uci_get(name, Ethertype);
			sprintf(name, "qos.cf%d.EthertypeExclude", j);	
			do_uci_get(name, EthertypeExclude);
			sprintf(name, "qos.cf%d.SSAP", j);	
			do_uci_get(name, SSAP);
			sprintf(name, "qos.cf%d.SSAPExclude", j);	
			do_uci_get(name, SSAPExclude);
			sprintf(name, "qos.cf%d.DSCPCheck", j);	
			do_uci_get(name, DSCPCheck);
			sprintf(name, "qos.cf%d.DSCPExclude", j);	
			do_uci_get(name, DSCPExclude);
			sprintf(name, "qos.cf%d.EthernetPriorityCheck", j);	
			do_uci_get(name, EthernetPriorityCheck);
			sprintf(name, "qos.cf%d.EthernetPriorityExclude", j);	
			do_uci_get(name, EthernetPriorityExclude);
			sprintf(name, "qos.cf%d.VLANIDCheck", j);	
			do_uci_get(name, VLANIDCheck);
			sprintf(name, "qos.cf%d.VLANIDExclude", j);	
			do_uci_get(name, VLANIDExclude);
			sprintf(name, "qos.cf%d.App", j);	
			do_uci_get(name, App);
			sprintf(name, "qos.cf%d.IPLengthMin", j);	
			do_uci_get(name, IPLengthMin);
			sprintf(name, "qos.cf%d.IPLengthMax", j);	
			do_uci_get(name, IPLengthMax);
			sprintf(name, "qos.cf%d.IPLengthExclude", j);	
			do_uci_get(name, IPLengthExclude);

			char markmatch[64] = {0};
			if(Order[0] != '\0')
			{
				sprintf(markmatch, "-m mark --mark %s", Order);
			}

			char intefacematch[64] = {0};
			memset(intefacematch, 0, sizeof(intefacematch));
			if(atoi(AllInterfaces) != 1)
			{
				for (i = 0; i <= IP_LAN_INSTANCE_NUM; i ++){
					sprintf(Interface2, "Device.IP.Interface.%d", lan_map[i].num);
					if (strcmp(Interface, Interface2) == 0){
						sprintf(intefacematch, "-i %s", lan_map[i].laninf);
						break;
					}
				}
				if(strcmp(Interface, IP_WAN_INTERFACE_PATH) == 0)
				{
					getEthInterfaceName("wan", waninf);
					sprintf(intefacematch, "-i %s", waninf);
				}
			}
			
			char destipmatch[64] = {0};
			if(atoi(DestIPExclude) == 1)
			{
				if((DestIP[0] != '\0') && (DestMask[0] == '\0'))
					sprintf(destipmatch, "! -d %s", DestIP);
				if((DestIP[0] != '\0') && (DestMask[0] != '\0'))
					sprintf(destipmatch, "! -d %s/%s", DestIP, DestMask);
			}
			else
			{
				if((DestIP[0] != '\0') && (DestMask[0] == '\0'))
					sprintf(destipmatch, "-d %s", DestIP);
				if((DestIP[0] != '\0') && (DestMask[0] != '\0'))
					sprintf(destipmatch, "-d %s/%s", DestIP, DestMask);
			}
				
			char srcipmatch[64] = {0};
			if(atoi(SourceIPExclude) == 1)
			{
				if((SourceIP[0] != '\0') && (SourceMask[0] == '\0'))
					sprintf(srcipmatch, "! -s %s", SourceIP);
				if((SourceIP[0] != '\0') && (SourceMask[0] != '\0'))
					sprintf(srcipmatch, "! -s %s/%s", SourceIP, SourceMask);
			}
			else
			{
				if((SourceIP[0] != '\0') && (SourceMask[0] == '\0'))
					sprintf(srcipmatch, "-s %s", SourceIP);
				if((SourceIP[0] != '\0') && (SourceMask[0] != '\0'))
					sprintf(srcipmatch, "-s %s/%s", SourceIP, SourceMask);
			}

			char Protocolmatch[64] = {0};
			if(atoi(ProtocolExclude) == 1)
			{
				if((Protocol[0] != '\0') && (atoi(Protocol) != -1))
					sprintf(Protocolmatch, "! -p %s", Protocol);
			}
			else
			{
				if((Protocol[0] != '\0') && (atoi(Protocol) != -1))
					sprintf(Protocolmatch, "-p %s", Protocol);
			}

			char destportmatch[64] = {0};
			if(atoi(DestPortExclude) == 1)
			{
				if((DestPort[0] != '\0') && (DestPortRangeMax[0] == '\0'))
					sprintf(destportmatch, "! --dport %s", DestPort);
				if((DestPort[0] != '\0') && (DestPortRangeMax[0] != '\0'))
					sprintf(destportmatch, "! --dport %s:%s", DestPort, DestPortRangeMax);
				if(DestPort[0] != '\0')
					strcpy(Protocolmatch, "-p tcp");
			}
			else
			{
				if((DestPort[0] != '\0') && (DestPortRangeMax[0] == '\0'))
					sprintf(destportmatch, "--dport %s", DestPort);
				if((DestPort[0] != '\0') && (DestPortRangeMax[0] != '\0'))
					sprintf(destportmatch, "--dport %s:%s", DestPort, DestPortRangeMax);
				if(DestPort[0] != '\0')
					strcpy(Protocolmatch, "-p tcp");
			}
			
			char srcportmatch[64] = {0};
			if(atoi(SourcePortExclude) == 1)
			{
				if((SourcePort[0] != '\0') && (SourcePortRangeMax[0] == '\0'))
					sprintf(srcportmatch, "! --sport %s", SourcePort);
				if((SourcePort[0] != '\0') && (SourcePortRangeMax[0] != '\0'))
					sprintf(srcportmatch, "! --sport %s:%s", SourcePort, SourcePortRangeMax);
				if(SourcePort[0] != '\0')
					strcpy(Protocolmatch, "-p tcp");
			}
			else
			{
				if((SourcePort[0] != '\0') && (SourcePortRangeMax[0] == '\0'))
					sprintf(srcportmatch, "--sport %s", SourcePort);
				if((SourcePort[0] != '\0') && (SourcePortRangeMax[0] != '\0'))
					sprintf(srcportmatch, "--sport %s:%s", SourcePort, SourcePortRangeMax);
				if(SourcePort[0] != '\0')
					strcpy(Protocolmatch, "-p tcp");
			}
			
			char srcmacmatch[64] = {0};
			memset(srcmacmatch, 0, sizeof(srcmacmatch));
			if(atoi(SourceMACExclude) == 1)
			{
				if((SourceMACAddress[0] != '\0') && (SourceMACMask[0] == '\0'))
					sprintf(srcmacmatch, "-s ! %s", SourceMACAddress);
				if((SourceMACAddress[0] != '\0') && (SourceMACMask[0] != '\0'))
					sprintf(srcmacmatch, "-s ! %s/%s", SourceMACAddress, SourceMACMask);
			}
			else
			{
				if((SourceMACAddress[0] != '\0') && (SourceMACMask[0] == '\0'))
					sprintf(srcmacmatch, "-s %s", SourceMACAddress);
				if((SourceMACAddress[0] != '\0') && (SourceMACMask[0] != '\0'))
					sprintf(srcmacmatch, "-s %s/%s", SourceMACAddress, SourceMACMask);
			}

			char destmacmatch[64] = {0};
			memset(destmacmatch, 0, sizeof(destmacmatch));
			if(atoi(DestMACExclude) == 1)
			{
				if((DestMACAddress[0] != '\0') && (DestMACMask[0] == '\0'))
					sprintf(destmacmatch, "-d ! %s", DestMACAddress);
				if((DestMACAddress[0] != '\0') && (DestMACMask[0] != '\0'))
					sprintf(destmacmatch, "-d ! %s/%s", DestMACAddress, DestMACMask);
			}
			else
			{
				if((DestMACAddress[0] != '\0') && (DestMACMask[0] == '\0'))
					sprintf(destmacmatch, "-d %s", DestMACAddress);
				if((DestMACAddress[0] != '\0') && (DestMACMask[0] != '\0'))
					sprintf(destmacmatch, "-d %s/%s", DestMACAddress, DestMACMask);
			}

			char ethertypematch[64] = {0};
			memset(ethertypematch, 0, sizeof(ethertypematch));
			if(atoi(EthertypeExclude) == 1)
			{
				if((Ethertype[0] != '\0') && (atoi(Ethertype) != -1))
					sprintf(ethertypematch, "-p ! %s", Ethertype);
			}
			else
			{
				if((Ethertype[0] != '\0') && (atoi(Ethertype) != -1))
					sprintf(ethertypematch, "-p %s", Ethertype);
			}

			char sapmatch[64] = {0};
			memset(sapmatch, 0, sizeof(sapmatch));
			if(atoi(SSAPExclude) == 1)
			{
				if((SSAP[0] != '\0') && (atoi(SSAP) != -1))
				{
					strcpy(ethertypematch, "-p LENGTH");
					sprintf(sapmatch, "--802_3-sap ! %s", SSAP);
				}
			}
			else
			{
				if((SSAP[0] != '\0') && (atoi(SSAP) != -1))
				{
					strcpy(ethertypematch, "-p LENGTH");
					sprintf(sapmatch, "--802_3-sap %s", SSAP);
				}
			}
					
			char tcpackmatch[64] = {0};
			if(atoi(TCPACKExclude) == 1)
			{
				if(atoi(TCPACK) == 1)
				{
					sprintf(tcpackmatch, "! --tcp-flags ALL ACK");
					strcpy(Protocolmatch, "-p tcp");
				}
			}
			else
			{
				if(atoi(TCPACK) == 1)
				{
					sprintf(tcpackmatch, "--tcp-flags ALL ACK");
					strcpy(Protocolmatch, "-p tcp");
				}
			}

			char dscpmatch[64] = {0};
			if(atoi(DSCPExclude) == 1)
			{
				if((DSCPCheck[0] != '\0') && (atoi(DSCPCheck) != -1))
					sprintf(dscpmatch, "-m dscp ! --dscp %s", DSCPCheck);
			}
			else
			{
				if((DSCPCheck[0] != '\0') && (atoi(DSCPCheck) != -1))
					sprintf(dscpmatch, "-m dscp --dscp %s", DSCPCheck);
			}

			char etherpriomatch[64] = {0};
			memset(etherpriomatch, 0, sizeof(etherpriomatch));
			if(atoi(EthernetPriorityExclude) == 1)
			{
				if((EthernetPriorityCheck[0] != '\0') && (atoi(EthernetPriorityCheck) != -1))
				{
					strcpy(ethertypematch, "-p 0x8100");
					sprintf(etherpriomatch, "-vlan-prio ! %s", EthernetPriorityCheck);
					memset(sapmatch, 0, sizeof(sapmatch));
				}
			}
			else
			{
				if((EthernetPriorityCheck[0] != '\0') && (atoi(EthernetPriorityCheck) != -1))
				{
					strcpy(ethertypematch, "-p 0x8100");
					sprintf(etherpriomatch, "-vlan-prio %s", EthernetPriorityCheck);
					memset(sapmatch, 0, sizeof(sapmatch));
				}
			}

			char vlanidmatch[64] = {0};
			memset(vlanidmatch, 0, sizeof(vlanidmatch));
			if(atoi(VLANIDExclude) == 1)
			{
				if((VLANIDCheck[0] != '\0') && (atoi(VLANIDCheck) != -1))
				{
					strcpy(ethertypematch, "-p 0x8100");
					sprintf(vlanidmatch, "--vlan-id ! %s", VLANIDCheck);
					memset(sapmatch, 0, sizeof(sapmatch));
				}
			}
			else
			{
				if((VLANIDCheck[0] != '\0') && (atoi(VLANIDCheck) != -1))
				{
					strcpy(ethertypematch, "-p 0x8100");
					sprintf(vlanidmatch, "--vlan-id %s", VLANIDCheck);
					memset(sapmatch, 0, sizeof(sapmatch));
				}
			}

			char iplengthmatch[64] = {0};
			if(atoi(IPLengthExclude) == 1)
			{
				if((IPLengthMin[0] != '\0') && (IPLengthMax[0] == '\0'))
					sprintf(iplengthmatch, "-m length ! --length  %s", IPLengthMin);
				if((IPLengthMin[0] != '\0') && (IPLengthMax[0] != '\0'))
					sprintf(iplengthmatch, "-m length ! --length  %s:%s", IPLengthMin, IPLengthMax);
			}
			else
			{
				if((IPLengthMin[0] != '\0') && (IPLengthMax[0] == '\0'))
					sprintf(iplengthmatch, "-m length --length %s", IPLengthMin);
				if((IPLengthMin[0] != '\0') && (IPLengthMax[0] != '\0'))
					sprintf(iplengthmatch, "-m length --length %s:%s", IPLengthMin, IPLengthMax);
			}
			
			if(atoi(TrafficClass) < 0)
			{
				char *index = strrchr(App, '.');
				char Alias[256] = {0};
				char name[256] = {0};
				char ProtocolIdentifier[256] = {0};
				char DefaultTrafficClass[256] = {0};
				char DefaultDSCPMark[256] = {0};
				char *p = NULL;
				
				if (index != NULL)
				{
					tr_getvalue_mapfile_byinstance("/oneagent/conf/QoSAppMap.mapping", Alias, atoi(index+1));
					p = strchr(Alias, '_');
					if(p != NULL)
					{
						sprintf(name, "classification.Device_QoS_App_%d.ProtocolIdentifier", atoi(p+1));		
						printf("name[%s]\n", name);
						do_uci_get(name, ProtocolIdentifier);
						printf("value[%s]\n", ProtocolIdentifier);
						if(strcasestr(ProtocolIdentifier, "sip") != NULL)
						{
							strcpy(destportmatch, "--dport 6060");
							strcpy(Protocolmatch, "-p tcp");
						}
						else if(strcasestr(ProtocolIdentifier, "h.323") != NULL)
						{
							strcpy(destportmatch, "--dport 1720");
							strcpy(Protocolmatch, "-p tcp");
						}
						else if(strcasestr(ProtocolIdentifier, "h.248") != NULL)
						{
							strcpy(destportmatch, "--dport 2944");
							strcpy(Protocolmatch, "-p tcp");
						}
						else if(strcasestr(ProtocolIdentifier, "mgcp") != NULL)
						{
							strcpy(destportmatch, "--dport 2727");
							strcpy(Protocolmatch, "-p tcp");
						}
						sprintf(name, "classification.Device_QoS_App_%d.DefaultTrafficClass", atoi(p+1));		
						do_uci_get(name, DefaultTrafficClass);
						printf("name[%s]\n", name);
						printf("value[%s]\n", DefaultTrafficClass);
						sprintf(name, "classification.Device_QoS_App_%d.DefaultDSCPMark", atoi(p+1));		
						do_uci_get(name, DefaultDSCPMark);
						printf("name[%s]\n", name);
						printf("value[%s]\n", DefaultDSCPMark);
						strcpy(TrafficClass, DefaultTrafficClass);
						strcpy(DSCPMark, DefaultDSCPMark);
					}
				}
			}

			if(strcmp(classification_enable, "1") == 0)//Enable = 1
			{
				if((srcmacmatch[0] != '\0') || (destmacmatch[0] != '\0') || (ethertypematch[0] != '\0') || (sapmatch[0] != '\0') || (vlanidmatch[0] != '\0') || (etherpriomatch[0] != '\0'))
				{
					sprintf(ebtablescommand, "ebtables -A FORWARD %s %s %s %s %s %s -j mark --mark-set %s", ethertypematch, 
						srcmacmatch, destmacmatch, sapmatch, vlanidmatch, etherpriomatch, Order);	
					printf("ebtablescommand: %s\n", ebtablescommand);
					system(ebtablescommand);
					sprintf(iptablescommand, "iptables -t mangle -A FORWARD %s %s %s %s %s %s %s %s %s %s -j CLASSIFY --set-class %s:0", intefacematch, destipmatch, srcipmatch, Protocolmatch,
							destportmatch, srcportmatch, tcpackmatch, dscpmatch, markmatch, iplengthmatch, TrafficClass);
					printf("iptablescommand: %s\n", iptablescommand);
					system(iptablescommand);
					sprintf(iptablescommand, "iptables -t mangle -A FORWARD %s %s %s %s %s %s %s %s %s %s -j DSCP --set-dscp %s", intefacematch, destipmatch, srcipmatch, Protocolmatch,
							destportmatch, srcportmatch, tcpackmatch, dscpmatch, markmatch, iplengthmatch, DSCPMark);
					printf("iptablescommand: %s\n", iptablescommand);
					system(iptablescommand);
				}
				else if(strcmp(classification_enable, "0") == 0)//Disable = 0
				{
					sprintf(iptablescommand, "iptables -t mangle -A FORWARD %s %s %s %s %s %s %s %s %s -j CLASSIFY --set-class %s:0", intefacematch, destipmatch, srcipmatch, Protocolmatch,
							destportmatch, srcportmatch, tcpackmatch, dscpmatch, iplengthmatch, TrafficClass);
					printf("iptablescommand: %s\n", iptablescommand);
					system(iptablescommand);
					sprintf(iptablescommand, "iptables -t mangle -A FORWARD %s %s %s %s %s %s %s %s %s -j DSCP --set-dscp %s", intefacematch, destipmatch, srcipmatch, Protocolmatch,
							destportmatch, srcportmatch, tcpackmatch, dscpmatch, iplengthmatch, DSCPMark);
					printf("iptablescommand: %s\n", iptablescommand);
					system(iptablescommand);
				}
			}
			else
			{
				if((srcmacmatch[0] != '\0') || (destmacmatch[0] != '\0') || (ethertypematch[0] != '\0') || (sapmatch[0] != '\0') || (vlanidmatch[0] != '\0') || (etherpriomatch[0] != '\0'))
				{
					sprintf(ebtablescommand, "ebtables -D FORWARD %s %s %s %s %s %s -j mark --mark-set %s", ethertypematch, 
						srcmacmatch, destmacmatch, sapmatch, vlanidmatch, etherpriomatch, Order);	
					printf("ebtablescommand: %s\n", ebtablescommand);
					system(ebtablescommand);
					sprintf(iptablescommand, "iptables -t mangle -D FORWARD %s %s %s %s %s %s %s %s %s %s -j CLASSIFY --set-class %s:0", intefacematch, destipmatch, srcipmatch, Protocolmatch,
							destportmatch, srcportmatch, tcpackmatch, dscpmatch, markmatch, iplengthmatch, TrafficClass);
					printf("iptablescommand: %s\n", iptablescommand);
					system(iptablescommand);
					sprintf(iptablescommand, "iptables -t mangle -D FORWARD %s %s %s %s %s %s %s %s %s %s -j DSCP --set-dscp %s", intefacematch, destipmatch, srcipmatch, Protocolmatch,
							destportmatch, srcportmatch, tcpackmatch, dscpmatch, markmatch, iplengthmatch, DSCPMark);
					printf("iptablescommand: %s\n", iptablescommand);
					system(iptablescommand);
				}
				else
				{
					sprintf(iptablescommand, "iptables -t mangle -D FORWARD %s %s %s %s %s %s %s %s %s -j CLASSIFY --set-class %s:0", intefacematch, destipmatch, srcipmatch, Protocolmatch,
							destportmatch, srcportmatch, tcpackmatch, dscpmatch, iplengthmatch, TrafficClass);
					printf("iptablescommand: %s\n", iptablescommand);
					system(iptablescommand);
					sprintf(iptablescommand, "iptables -t mangle -D FORWARD %s %s %s %s %s %s %s %s %s -j DSCP --set-dscp %s", intefacematch, destipmatch, srcipmatch, Protocolmatch,
							destportmatch, srcportmatch, tcpackmatch, dscpmatch, iplengthmatch, DSCPMark);
					printf("iptablescommand: %s\n", iptablescommand);
					system(iptablescommand);
				}
			}
		}
		j++;
	}
	memset(classification_enable, 0, sizeof(classification_enable));
}


int get_D_RootDataModelVersion(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(D_RootDataModelVersion, value);
	if(ret)
	{
		return -1;
	} */
	strcpy(value, "2.8"); //always 2.5
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_D_InterfaceStackNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(D_InterfaceStackNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}*/
	char keyvalue[MAXMAPITEMS][256];
	int num = get_Device_InterfaceStack_Entry(keyvalue);
	sprintf(value, "%d", num);
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DD_DeviceCategory(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DD_DeviceCategory, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "COM_X_WirelessRouter");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DD_Manufacturer(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DD_Manufacturer, value);
	if(ret)
	{
		return -1;
	}*/
	//getMfcInfo("Manufacturer", value);
	strcpy(value, "own");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DD_ManufacturerOUI(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DD_ManufacturerOUI, value);
	if(ret)
	{
		return -1;
	}*/
	//getMfcInfo("ManufacturerOUI", value);
	strcpy(value, "00AABB901016");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DD_ModelName(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DD_ModelName, value);
	if(ret)
	{
		return -1;
	}*/
	getMfcInfo("ModelName", value);
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DD_ModelNumber(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DD_ModelNumber, value);
	if(ret)
	{
		return -1;
	}*/
	getMfcInfo("ModelName", value);
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DD_Description(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DD_Description, value);
	if(ret)
	{
		return -1;
	}*/
	getMfcInfo("ModelName", value); //with the same as modelname
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DD_ProductClass(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DD_ProductClass, value);
	if(ret)
	{
		return -1;
	}*/
	//getMfcInfo("ModelName", value); //with the same as modelname
	strcpy(value, "HEATER_CWMP");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DD_SerialNumber(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DD_SerialNumber, value);
	if(ret)
	{
		return -1;
	}*/
	#if 0
	char mac[32] = {0};
	char ACSIdentifier[32] = {0};

	ret = do_uci_get(DM_X_CHARTER_COM_ACSIdentifier, ACSIdentifier);
	if(ret)
	{
		ret = 0;
	}

	if (strcmp(ACSIdentifier, "TWC") != 0)
		getMfcInfo("SerialNumber", value);
	else{
		getInfaceWanMac(mac); //Using WAN MAC address
		tr_log(LOG_DEBUG,"WAN Iinterface MAC [%s]",mac);
		if (mac[0] != '\0'){
			int i = 0, j = 0;
			for (i = 0; i < 17; i ++){
				if (mac[i] != ':'){
					value[j] = toupper(mac[i]);
					j ++;
				}
			}
			value[j] = '\0';
		}
		else
			strcpy(value, "");
	}
	#endif
	strcpy(value, "2015050422");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DD_X_CHARTER_COM_SerialNumber(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DD_SerialNumber, value);
	if(ret)
	{
		return -1;
	}*/
	getMfcInfo("SerialNumber", value);
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DD_HardwareVersion(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DD_HardwareVersion, value);
	if(ret)
	{
		return -1;
	}*/
	getMfcInfo("HardwareVersion", value);
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DD_SoftwareVersion(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DD_SoftwareVersion, value);
	if(ret)
	{
		return -1;
	}*/
	getMfcInfo2("FW_VERSION", value);
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DD_AdditionalHardwareVersion(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DD_AdditionalHardwareVersion, value);
	if(ret)
	{
		return -1;
	}*/
	getMfcInfo("DateOfManufacture", value); //Using the date of manufacture as the addition hardware version
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DD_AdditionalSoftwareVersion(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DD_AdditionalSoftwareVersion, value);
	if(ret)
	{
		return -1;
	}*/
	getMfcInfo2("BUILD_DATE", value); //Using the date of building time as the addition software version
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DD_ProvisioningCode(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DD_ProvisioningCode, value); //getting from trconf
	if(ret)
	{
		return -1;
	}
	if (strcmp(value, " ") == 0)
		strcpy(value, "");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DD_ProvisioningCode(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (strlen(value) > 64)
		return -2;
	
	ret = do_uci_set(DD_ProvisioningCode, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DD_UpTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DD_UpTime, value);
	if(ret)
	{
		return -1;
	}*/
	getDeviceUpTime("/proc/uptime", value);
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DD_FirstUseDate(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DD_FirstUseDate, value);
	if(ret)
	{
		return -1;
	}*/
	FILE *fp = NULL;
	char line[128] = {0};
	char *ptr = NULL;
	if ((fp = fopen("/oneagent/conf/FirstUseDate", "r")) != NULL) {
		fgets(line,sizeof(line)-1,fp);
		if((ptr = strstr(line,"\n")) != NULL)
			*ptr = '\0';
		strcpy(value, line);
        fclose(fp);
    }
	else
		strcpy(value, "0001-01-01T00:00:00Z");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DD_VendorConfigFileNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DD_VendorConfigFileNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}*/
	int count = 0;
	FILE *fd = NULL;
	char line[256] = {0};

	if ((fd = popen("ls -l /overlay/etc/config", "r")) != NULL){
		while ( fgets(line, sizeof(line), fd) )
			count ++;
		pclose(fd);
	}
	sprintf(value, "%d", count);
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DD_SupportedDataModelNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DD_SupportedDataModelNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "1"); //always 1
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DD_ProcessorNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DD_ProcessorNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}*/

	int cpu_num = 0;
	cpu_num = sysconf(_SC_NPROCESSORS_CONF);
	sprintf(value, "%d", cpu_num);
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DD_VendorLogFileNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DD_VendorLogFileNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}*/

	strcpy(value, "3"); //file /tmp/syslog/messages, /tmp/vendor/rebootreason.txt, /tmp/vendor/avail.txt
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DD_LocationNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DD_LocationNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "0"); //always 0
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DD_DeviceImageNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DD_DeviceImageNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "0"); //always 0, platform doesn't support now
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDVt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDVt_Alias, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDVt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDVt_Alias, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDVt_Name(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDVt_Name, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDVt_Version(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDVt_Version, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDVt_Date(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDVt_Date, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDVt_Description(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDVt_Description, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDVt_UseForBackupRestore(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDVt_UseForBackupRestore, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDSt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDSt_Alias, value);
	if(ret)
	{
		return -1;
	}*/
	ret = 1; //getting from tr.xml
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDSt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (!isalpha(value[0]))
		return -2;
	
	if (strlen(value) > 64)
		return -2;
	
	/*ret = do_uci_set(DDSt_Alias, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	// set to tr.xml
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDSt_URL(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDSt_URL, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDSt_UUID(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDSt_UUID, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDSt_URN(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDSt_URN, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDSt_Features(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDSt_Features, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDM_Total(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDM_Total, value);
	if(ret)
	{
		return -1;
	}*/
	struct sysinfo info;
	memset(&info, 0, sizeof(struct sysinfo));
	sysinfo(&info);
	info.totalram /= 1024; //changed to KByte
	sprintf(value, "%u", info.totalram);

	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDM_Free(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDM_Free, value);
	if(ret)
	{
		return -1;
	}*/
	struct sysinfo info;
	memset(&info, 0, sizeof(struct sysinfo));
	sysinfo(&info);
	info.freeram /= 1024; //changed to KByte
	sprintf(value, "%u", info.freeram);

	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDP_CPUUsage(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDP_CPUUsage, value);
	if(ret)
	{
		return -1;
	}*/
	getCpuUsage(value);
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDP_ProcessNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDP_ProcessNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}*/

	sprintf(value, "%d", get_all_process_num());
	
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDPPt_PID(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDPPt_PID, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Process.");
	char pid[32] = {0};
	if (index != NULL){
		ret = lib_getvalue_mapfile_byinstance(ProcessMap, pid, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			strcpy(value, pid);
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDPPt_Command(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDPPt_Command, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Process.");
	char pid[32] = {0};
	if (index != NULL){
		ret = lib_getvalue_mapfile_byinstance(ProcessMap, pid, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			getProcessStatus(pid, value, "Command");
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDPPt_Size(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDPPt_Size, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Process.");
	char pid[32] = {0};
	if (index != NULL){
		ret = lib_getvalue_mapfile_byinstance(ProcessMap, pid, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			getProcessStatus(pid, value, "Size");
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDPPt_Priority(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDPPt_Priority, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Process.");
	char pid[32] = {0};
	if (index != NULL){
		ret = lib_getvalue_mapfile_byinstance(ProcessMap, pid, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			getProcessStatus(pid, value, "Priority");
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDPPt_CPUTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDPPt_CPUTime, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Process.");
	char pid[32] = {0};
	if (index != NULL){
		ret = lib_getvalue_mapfile_byinstance(ProcessMap, pid, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			getProcessStatus(pid, value, "CPUTime");
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDPPt_State(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDPPt_State, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Process.");
	char pid[32] = {0};
	if (index != NULL){
		ret = lib_getvalue_mapfile_byinstance(ProcessMap, pid, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			getProcessStatus(pid, value, "State");
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDT_ProcessNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDT_ProcessNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "13"); //0~10 -> core cpu sensors, 11->WLAN 2.4G chip sensor, 12->WLAN 5G chip sensor
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDTTt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDTTt_Alias, value);
	if(ret)
	{
		return -1;
	}*/
	ret = 1; //getting from tr.xml
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDTTt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (!isalpha(value[0]))
		return -2;
	
	if (strlen(value) > 64)
		return -2;
	
	/*ret = do_uci_set(DDTTt_Alias, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//set to tr.xml
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDTTt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDTTt_Enable, value);
	if(ret)
	{
		return -1;
	}*/
	a_TemperatureSensorInfo temperatureSensorInfo;
	char *index = parseTemplate(path_name, ".TemperatureSensor.");
	if (index != NULL){
		memset(&temperatureSensorInfo, 0, sizeof(a_TemperatureSensorInfo));
		if (atoi(index) <= 11){ //core cpu
			getCoreChipTemperatureStatus(atoi(index)-1, &temperatureSensorInfo);
			strcpy(value, temperatureSensorInfo.Enable);
		}
		else if (atoi(index) == 12){ //wifi5g chip
			getWifiChipTemperatureStatus(0, &temperatureSensorInfo);
			strcpy(value, temperatureSensorInfo.Enable);
		}
		else if (atoi(index) == 13){ //wifi2.4g chip
			getWifiChipTemperatureStatus(1, &temperatureSensorInfo);
			strcpy(value, temperatureSensorInfo.Enable);
		}
		else
			return -1;
	}

	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDTTt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DDTTt_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char cmd[128] = {0};
	char *index = parseTemplate(path_name, ".TemperatureSensor.");
	
	if (index != NULL){
		if (atoi(index) <= 11){ //core cpu
			if (atoi(value) == 0)
				sprintf(cmd, "echo disabled > /sys/devices/virtual/thermal/thermal_zone%d/mode", atoi(index)-1);
			else
				sprintf(cmd, "echo enabled > /sys/devices/virtual/thermal/thermal_zone%d/mode", atoi(index)-1);
			system(cmd);
		}
		else if (atoi(index) == 12){ //wifi5g chip
			if (atoi(value) == 0)
				strcpy(cmd, "thermaltool -i wifi0 -set -e 0");
			else
				strcpy(cmd, "thermaltool -i wifi0 -set -e 1");
			system(cmd);
		}
		else if (atoi(index) == 13){ //wifi2.4g chip
			if (atoi(value) == 0)
				strcpy(cmd, "thermaltool -i wifi1 -set -e 0");
			else
				strcpy(cmd, "thermaltool -i wifi1 -set -e 1");
			system(cmd);
		}
		else
			return -1;
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDTTt_Status(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDTTt_Status, value);
	if(ret)
	{
		return -1;
	}*/
	a_TemperatureSensorInfo temperatureSensorInfo;
	char *index = parseTemplate(path_name, ".TemperatureSensor.");
	if (index != NULL){
		memset(&temperatureSensorInfo, 0, sizeof(a_TemperatureSensorInfo));
		if (atoi(index) <= 11){ //core cpu
			getCoreChipTemperatureStatus(atoi(index)-1, &temperatureSensorInfo);
			strcpy(value, temperatureSensorInfo.Status);
		}
		else if (atoi(index) == 12){ //wifi5g chip
			getWifiChipTemperatureStatus(0, &temperatureSensorInfo);
			strcpy(value, temperatureSensorInfo.Status);
		}
		else if (atoi(index) == 13){ //wifi2.4g chip
			getWifiChipTemperatureStatus(1, &temperatureSensorInfo);
			strcpy(value, temperatureSensorInfo.Status);
		}
		else
			return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDTTt_Reset(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDTTt_Reset, value);
	if(ret)
	{
		return -1;
	}*/
	a_TemperatureSensorInfo temperatureSensorInfo;
	char *index = parseTemplate(path_name, ".TemperatureSensor.");
	if (index != NULL){
		memset(&temperatureSensorInfo, 0, sizeof(a_TemperatureSensorInfo));
		if (atoi(index) <= 11){ //core cpu
			getCoreChipTemperatureStatus(atoi(index)-1, &temperatureSensorInfo);
			strcpy(value, temperatureSensorInfo.Reset);
		}
		else if (atoi(index) == 12){ //wifi5g chip
			getWifiChipTemperatureStatus(0, &temperatureSensorInfo);
			strcpy(value, temperatureSensorInfo.Reset);
		}
		else if (atoi(index) == 13){ //wifi2.4g chip
			getWifiChipTemperatureStatus(1, &temperatureSensorInfo);
			strcpy(value, temperatureSensorInfo.Reset);
		}
		else
			return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDTTt_Reset(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DDTTt_Reset, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	a_TemperatureSensorInfo temperatureSensorInfo;
	char cmd[128] = {0};
	char *index = parseTemplate(path_name, ".TemperatureSensor.");
	
	if (index != NULL){
		memset(&temperatureSensorInfo, 0, sizeof(a_TemperatureSensorInfo));
		if (atoi(index) <= 11){ //core cpu
			getCoreChipTemperatureStatus(atoi(index)-1, &temperatureSensorInfo);
			if (atoi(temperatureSensorInfo.Enable) == 0) //don't do anything
				return 0;
			if (atoi(value) == 0) //don't do anything
				return 0;
			else if (atoi(value) == 1){
				sprintf(cmd, "echo disabled > /sys/devices/virtual/thermal/thermal_zone%d/mode", atoi(index)-1);
				system(cmd);
				memset(cmd, 0, sizeof(cmd));
				sprintf(cmd, "echo enabled > /sys/devices/virtual/thermal/thermal_zone%d/mode", atoi(index)-1);
				system(cmd);
				//get reset time
				memset(cmd, 0, sizeof(cmd));
				sprintf(cmd, "date > /oneagent/conf/thermal_zone%dresttime", atoi(index)-1);
				system(cmd);
			}
			else
				return -1;
		}
		else if (atoi(index) == 12){ //wifi5g chip
			getWifiChipTemperatureStatus(0, &temperatureSensorInfo);
			if (atoi(temperatureSensorInfo.Enable) == 0) //don't do anything
				return 0;
			if (atoi(value) == 0) //don't do anything
				return 0;
			else if (atoi(value) == 1){
				system("thermaltool -i wifi0 -set -e 0");
				system("thermaltool -i wifi0 -set -e 1");
				//get reset time
				system("date > /oneagent/conf/wifi0resttime");
			}
			else
				return -1;
		}
		else if (atoi(index) == 13){ //wifi2.4g chip
			getWifiChipTemperatureStatus(1, &temperatureSensorInfo);
			if (atoi(temperatureSensorInfo.Enable) == 0) //don't do anything
				return 0;
			if (atoi(value) == 0) //don't do anything
				return 0;
			else if (atoi(value) == 1){
				system("thermaltool -i wifi1 -set -e 0");
				system("thermaltool -i wifi1 -set -e 1");
				//get reset time
				system("date > /oneagent/conf/wifi1resttime");
			}
			else
				return -1;
		}
		else
			return -1;
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDTTt_ResetTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDTTt_ResetTime, value);
	if(ret)
	{
		return -1;
	}*/
	a_TemperatureSensorInfo temperatureSensorInfo;
	char *index = parseTemplate(path_name, ".TemperatureSensor.");
	if (index != NULL){
		memset(&temperatureSensorInfo, 0, sizeof(a_TemperatureSensorInfo));
		if (atoi(index) <= 11){ //core cpu
			getCoreChipTemperatureStatus(atoi(index)-1, &temperatureSensorInfo);
			strcpy(value, temperatureSensorInfo.ResetTime);
		}
		else if (atoi(index) == 12){ //wifi5g chip
			getWifiChipTemperatureStatus(0, &temperatureSensorInfo);
			strcpy(value, temperatureSensorInfo.ResetTime);
		}
		else if (atoi(index) == 13){ //wifi2.4g chip
			getWifiChipTemperatureStatus(1, &temperatureSensorInfo);
			strcpy(value, temperatureSensorInfo.ResetTime);
		}
		else
			return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDTTt_Name(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDTTt_Name, value);
	if(ret)
	{
		return -1;
	}*/
	a_TemperatureSensorInfo temperatureSensorInfo;
	char *index = parseTemplate(path_name, ".TemperatureSensor.");
	if (index != NULL){
		memset(&temperatureSensorInfo, 0, sizeof(a_TemperatureSensorInfo));
		if (atoi(index) <= 11){ //core cpu
			getCoreChipTemperatureStatus(atoi(index)-1, &temperatureSensorInfo);
			strcpy(value, temperatureSensorInfo.Name);
		}
		else if (atoi(index) == 12){ //wifi5g chip
			getWifiChipTemperatureStatus(0, &temperatureSensorInfo);
			strcpy(value, temperatureSensorInfo.Name);
		}
		else if (atoi(index) == 13){ //wifi2.4g chip
			getWifiChipTemperatureStatus(1, &temperatureSensorInfo);
			strcpy(value, temperatureSensorInfo.Name);
		}
		else
			return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDTTt_Value(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDTTt_Value, value);
	if(ret)
	{
		return -1;
	}*/
	a_TemperatureSensorInfo temperatureSensorInfo;
	char *index = parseTemplate(path_name, ".TemperatureSensor.");
	if (index != NULL){
		memset(&temperatureSensorInfo, 0, sizeof(a_TemperatureSensorInfo));
		if (atoi(index) <= 11){ //core cpu
			getCoreChipTemperatureStatus(atoi(index)-1, &temperatureSensorInfo);
			strcpy(value, temperatureSensorInfo.Value);
		}
		else if (atoi(index) == 12){ //wifi5g chip
			getWifiChipTemperatureStatus(0, &temperatureSensorInfo);
			strcpy(value, temperatureSensorInfo.Value);
		}
		else if (atoi(index) == 13){ //wifi2.4g chip
			getWifiChipTemperatureStatus(1, &temperatureSensorInfo);
			strcpy(value, temperatureSensorInfo.Value);
		}
		else
			return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDTTt_LastUpdate(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDTTt_LastUpdate, value);
	if(ret)
	{
		return -1;
	}*/
	a_TemperatureSensorInfo temperatureSensorInfo;
	char *index = parseTemplate(path_name, ".TemperatureSensor.");
	if (index != NULL){
		memset(&temperatureSensorInfo, 0, sizeof(a_TemperatureSensorInfo));
		if (atoi(index) <= 11){ //core cpu
			getCoreChipTemperatureStatus(atoi(index)-1, &temperatureSensorInfo);
			strcpy(value, temperatureSensorInfo.LastUpdate);
		}
		else if (atoi(index) == 12){ //wifi5g chip
			getWifiChipTemperatureStatus(0, &temperatureSensorInfo);
			strcpy(value, temperatureSensorInfo.LastUpdate);
		}
		else if (atoi(index) == 13){ //wifi2.4g chip
			getWifiChipTemperatureStatus(1, &temperatureSensorInfo);
			strcpy(value, temperatureSensorInfo.LastUpdate);
		}
		else
			return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDTTt_MinValue(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDTTt_MinValue, value);
	if(ret)
	{
		return -1;
	}*/
	a_TemperatureSensorInfo temperatureSensorInfo;
	char *index = parseTemplate(path_name, ".TemperatureSensor.");
	if (index != NULL){
		memset(&temperatureSensorInfo, 0, sizeof(a_TemperatureSensorInfo));
		if (atoi(index) <= 11){ //core cpu
			getCoreChipTemperatureStatus(atoi(index)-1, &temperatureSensorInfo);
			strcpy(value, temperatureSensorInfo.MinValue);
		}
		else if (atoi(index) == 12){ //wifi5g chip
			getWifiChipTemperatureStatus(0, &temperatureSensorInfo);
			strcpy(value, temperatureSensorInfo.MinValue);
		}
		else if (atoi(index) == 13){ //wifi2.4g chip
			getWifiChipTemperatureStatus(1, &temperatureSensorInfo);
			strcpy(value, temperatureSensorInfo.MinValue);
		}
		else
			return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDTTt_MinTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDTTt_MinTime, value);
	if(ret)
	{
		return -1;
	}*/
	a_TemperatureSensorInfo temperatureSensorInfo;
	char *index = parseTemplate(path_name, ".TemperatureSensor.");
	if (index != NULL){
		memset(&temperatureSensorInfo, 0, sizeof(a_TemperatureSensorInfo));
		if (atoi(index) <= 11){ //core cpu
			getCoreChipTemperatureStatus(atoi(index)-1, &temperatureSensorInfo);
			strcpy(value, temperatureSensorInfo.MinTime);
		}
		else if (atoi(index) == 12){ //wifi5g chip
			getWifiChipTemperatureStatus(0, &temperatureSensorInfo);
			strcpy(value, temperatureSensorInfo.MinTime);
		}
		else if (atoi(index) == 13){ //wifi2.4g chip
			getWifiChipTemperatureStatus(1, &temperatureSensorInfo);
			strcpy(value, temperatureSensorInfo.MinTime);
		}
		else
			return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDTTt_MaxValue(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDTTt_MaxValue, value);
	if(ret)
	{
		return -1;
	}*/
	a_TemperatureSensorInfo temperatureSensorInfo;
	char *index = parseTemplate(path_name, ".TemperatureSensor.");
	if (index != NULL){
		memset(&temperatureSensorInfo, 0, sizeof(a_TemperatureSensorInfo));
		if (atoi(index) <= 11){ //core cpu
			getCoreChipTemperatureStatus(atoi(index)-1, &temperatureSensorInfo);
			strcpy(value, temperatureSensorInfo.MaxValue);
		}
		else if (atoi(index) == 12){ //wifi5g chip
			getWifiChipTemperatureStatus(0, &temperatureSensorInfo);
			strcpy(value, temperatureSensorInfo.MaxValue);
		}
		else if (atoi(index) == 13){ //wifi2.4g chip
			getWifiChipTemperatureStatus(1, &temperatureSensorInfo);
			strcpy(value, temperatureSensorInfo.MaxValue);
		}
		else
			return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDTTt_MaxTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDTTt_MaxTime, value);
	if(ret)
	{
		return -1;
	}*/
	a_TemperatureSensorInfo temperatureSensorInfo;
	char *index = parseTemplate(path_name, ".TemperatureSensor.");
	if (index != NULL){
		memset(&temperatureSensorInfo, 0, sizeof(a_TemperatureSensorInfo));
		if (atoi(index) <= 11){ //core cpu
			getCoreChipTemperatureStatus(atoi(index)-1, &temperatureSensorInfo);
			strcpy(value, temperatureSensorInfo.MaxTime);
		}
		else if (atoi(index) == 12){ //wifi5g chip
			getWifiChipTemperatureStatus(0, &temperatureSensorInfo);
			strcpy(value, temperatureSensorInfo.MaxTime);
		}
		else if (atoi(index) == 13){ //wifi2.4g chip
			getWifiChipTemperatureStatus(1, &temperatureSensorInfo);
			strcpy(value, temperatureSensorInfo.MaxTime);
		}
		else
			return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDTTt_LowAlarmValue(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDTTt_LowAlarmValue, value);
	if(ret)
	{
		return -1;
	}*/
	a_TemperatureSensorInfo temperatureSensorInfo;
	char *index = parseTemplate(path_name, ".TemperatureSensor.");
	if (index != NULL){
		memset(&temperatureSensorInfo, 0, sizeof(a_TemperatureSensorInfo));
		if (atoi(index) <= 11){ //core cpu
			getCoreChipTemperatureStatus(atoi(index)-1, &temperatureSensorInfo);
			strcpy(value, temperatureSensorInfo.LowAlarmValue);
		}
		else if (atoi(index) == 12){ //wifi5g chip
			getWifiChipTemperatureStatus(0, &temperatureSensorInfo);
			strcpy(value, temperatureSensorInfo.LowAlarmValue);
		}
		else if (atoi(index) == 13){ //wifi2.4g chip
			getWifiChipTemperatureStatus(1, &temperatureSensorInfo);
			strcpy(value, temperatureSensorInfo.LowAlarmValue);
		}
		else
			return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDTTt_LowAlarmValue(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DDTTt_LowAlarmValue, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDTTt_LowAlarmTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDTTt_LowAlarmTime, value);
	if(ret)
	{
		return -1;
	}*/
	a_TemperatureSensorInfo temperatureSensorInfo;
	char *index = parseTemplate(path_name, ".TemperatureSensor.");
	if (index != NULL){
		memset(&temperatureSensorInfo, 0, sizeof(a_TemperatureSensorInfo));
		if (atoi(index) <= 11){ //core cpu
			getCoreChipTemperatureStatus(atoi(index)-1, &temperatureSensorInfo);
			strcpy(value, temperatureSensorInfo.ResetTime); //with the same as resettime
		}
		else if (atoi(index) == 12){ //wifi5g chip
			getWifiChipTemperatureStatus(0, &temperatureSensorInfo);
			strcpy(value, temperatureSensorInfo.ResetTime); //with the same as resettime
		}
		else if (atoi(index) == 13){ //wifi2.4g chip
			getWifiChipTemperatureStatus(1, &temperatureSensorInfo);
			strcpy(value, temperatureSensorInfo.ResetTime); //with the same as resettime
		}
		else
			return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDTTt_HighAlarmValue(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDTTt_HighAlarmValue, value);
	if(ret)
	{
		return -1;
	}*/
	a_TemperatureSensorInfo temperatureSensorInfo;
	char *index = parseTemplate(path_name, ".TemperatureSensor.");
	if (index != NULL){
		memset(&temperatureSensorInfo, 0, sizeof(a_TemperatureSensorInfo));
		if (atoi(index) <= 11){ //core cpu
			getCoreChipTemperatureStatus(atoi(index)-1, &temperatureSensorInfo);
			strcpy(value, temperatureSensorInfo.HighAlarmValue);
		}
		else if (atoi(index) == 12){ //wifi5g chip
			getWifiChipTemperatureStatus(0, &temperatureSensorInfo);
			strcpy(value, temperatureSensorInfo.HighAlarmValue);
		}
		else if (atoi(index) == 13){ //wifi2.4g chip
			getWifiChipTemperatureStatus(1, &temperatureSensorInfo);
			strcpy(value, temperatureSensorInfo.HighAlarmValue);
		}
		else
			return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDTTt_HighAlarmValue(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DDTTt_HighAlarmValue, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDTTt_PollingInterval(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDTTt_PollingInterval, value);
	if(ret)
	{
		return -1;
	}*/
	a_TemperatureSensorInfo temperatureSensorInfo;
	char *index = parseTemplate(path_name, ".TemperatureSensor.");
	if (index != NULL){
		memset(&temperatureSensorInfo, 0, sizeof(a_TemperatureSensorInfo));
		if (atoi(index) <= 11){ //core cpu
			getCoreChipTemperatureStatus(atoi(index)-1, &temperatureSensorInfo);
			strcpy(value, temperatureSensorInfo.PollingInterval);
		}
		else if (atoi(index) == 12){ //wifi5g chip
			getWifiChipTemperatureStatus(0, &temperatureSensorInfo);
			strcpy(value, temperatureSensorInfo.PollingInterval);
		}
		else if (atoi(index) == 13){ //wifi2.4g chip
			getWifiChipTemperatureStatus(1, &temperatureSensorInfo);
			strcpy(value, temperatureSensorInfo.PollingInterval);
		}
		else
			return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDTTt_PollingInterval(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DDTTt_PollingInterval, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDTTt_HighAlarmTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDTTt_HighAlarmTime, value);
	if(ret)
	{
		return -1;
	}*/
	a_TemperatureSensorInfo temperatureSensorInfo;
	char *index = parseTemplate(path_name, ".TemperatureSensor.");
	if (index != NULL){
		memset(&temperatureSensorInfo, 0, sizeof(a_TemperatureSensorInfo));
		if (atoi(index) <= 11){ //core cpu
			getCoreChipTemperatureStatus(atoi(index)-1, &temperatureSensorInfo);
			strcpy(value, temperatureSensorInfo.ResetTime); //with the same as resettime
		}
		else if (atoi(index) == 12){ //wifi5g chip
			getWifiChipTemperatureStatus(0, &temperatureSensorInfo);
			strcpy(value, temperatureSensorInfo.ResetTime); //with the same as resettime
		}
		else if (atoi(index) == 13){ //wifi2.4g chip
			getWifiChipTemperatureStatus(1, &temperatureSensorInfo);
			strcpy(value, temperatureSensorInfo.ResetTime); //with the same as resettime
		}
		else
			return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDN_MaxTCPWindowSize(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDN_MaxTCPWindowSize, value);
	if(ret)
	{
		return -1;
	}*/
	FILE *fp = NULL;
	char buff[128] = {0};
	char * ptr = NULL;

	fp = fopen("/proc/sys/net/core/wmem_max", "r");
	if (fp != NULL) 
	{
		fgets(buff, sizeof(buff), fp);
		if ((ptr = strstr(buff, "\n")) != NULL)
			*ptr = '\0';
		strcpy(value, buff);
		fclose(fp);
	}
	else
	{
		return -1;
	}
	
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDN_TCPImplementation(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDN_TCPImplementation, value);
	if(ret)
	{
		return -1;
	}*/
	FILE *fp = NULL;
	char buff[128] = {0};
    char *p = NULL;
    char *q = NULL;

	fp = fopen("/proc/sys/net/ipv4/tcp_available_congestion_control", "r");
	if(fp != NULL)
	{
		fgets(buff, sizeof(buff), fp);
		fclose(fp);
		
        q = buff;
        while((p = strstr(q, " ")) != NULL)
        {
            *p = ',';
            q = p;
        }
		if ((p = strstr(buff, "\n")) != NULL)
			*p = '\0';
		strcpy(value, buff);
	}
	else
	{
		return -1;
	}
	
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDPt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDPt_Alias, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Processor.");
	char newpath[128] = {0};
	if (index != NULL){
		sprintf(newpath, "trconf.Device_DeviceInfo_Processor_%s.Alias", index);
		ret = do_uci_get(newpath, value);
		if(ret)
		{
			return -1;
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDPt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DDPt_Alias, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char *index = parseTemplate(path_name, ".Processor.");
	char newpath[128] = {0};

	if (!isalpha(value[0]))
		return -2;

	if (strlen(value) > 64)
		return -2;
	
	if (index != NULL){
		sprintf(newpath, "trconf.Device_DeviceInfo_Processor_%s.Alias", index);
		ret = do_uci_set(newpath, value);
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit(MS);
			if(ret)
			{
				return (-1);
			}
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDPt_Architecture(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDPt_Architecture, value);
	if(ret)
	{
		return -1;
	}*/

	char arch[32] = {0};
	char line[512] = {0};
	FILE *fd = NULL;

	//All CPU with the same architecture
	fd = popen("cat /proc/cpuinfo | grep 'model name'", "r");
	if(fd != NULL){
		fgets(line, sizeof(line), fd);
		sscanf(line, "%*s %*s %*s %s %*s", arch);
		strcpy(value, arch);
		pclose(fd);
	}

	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDVt_Alias_75(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDVt_Alias_75, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".VendorLogFile.");
	char newpath[128] = {0};
	if (index != NULL){
		sprintf(newpath, "trconf.Device_DeviceInfo_VendorLogFile_%s.Alias", index);
		ret = do_uci_get(newpath, value);
		if(ret)
		{
			strcpy(value, "");
			ret = 0;
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDVt_Alias_75(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DDVt_Alias_75, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char *index = parseTemplate(path_name, ".VendorLogFile.");
	char newpath[128] = {0};
	char tmp[128] = {0};

	if (!isalpha(value[0]))
		return -2;

	if (strlen(value) > 64)
		return -2;
		
	if (index != NULL){
		sprintf(newpath, "trconf.Device_DeviceInfo_VendorLogFile_%s.Alias", index);
		ret = do_uci_get(newpath, tmp);
		if(ret)
		{
			sprintf(newpath, "trconf.Device_DeviceInfo_VendorLogFile_%s", index);
			do_uci_set(newpath, "acs");
		}
		
		sprintf(newpath, "trconf.Device_DeviceInfo_VendorLogFile_%s.Alias", index);
		ret = do_uci_set(newpath, value);
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit(MS);
			if(ret)
			{
				return (-1);
			}
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDVt_Name_77(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	char *index = parseTemplate(path_name, ".VendorLogFile.");
	if (index != NULL)
	{
		if(atoi(index) == 1)
		{
			ret = do_uci_get("system.system.log_file", value);
			if(ret)
			{
				return -1;
			}
		}
		else if(atoi(index) == 2)
		{
			strcpy(value, "/tmp/vendor/rebootreason.txt");
		}
		else if(atoi(index) == 3)
		{
			strcpy(value, "/tmp/vendor/avail.txt");
		}
		else
		{
			return -1;
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDVt_MaximumSize(char * path_name, char *value)
{
	int ret = 0;
	struct stat theStat;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	char *index = parseTemplate(path_name, ".VendorLogFile.");
	if (index != NULL)
	{
		if(atoi(index) == 1)
		{
			ret = do_uci_get("system.system.log_size", value);
			if(ret)
			{
				return -1;
			}
		}
		else if(atoi(index) == 2)
		{
			if(stat( "/tmp/vendor/rebootreason.txt", &theStat ) != -1)
			{
				sprintf(value, "%lld", (long long)theStat.st_size);
			}
			else
			{
				strcpy(value, "0");
			}
		}
		else if(atoi(index) == 3)
		{
			if(stat( "/tmp/vendor/avail.txt", &theStat ) != -1)
			{
				sprintf(value, "%lld", (long long)theStat.st_size);
			}
			else
			{
				strcpy(value, "0");
			}
		}
		else
		{
			return -1;
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDVt_Persistent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDVt_Persistent, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "0"); //always 0
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDP_ManufacturerOUI(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDP_ManufacturerOUI, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDP_ProductClass(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDP_ProductClass, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDP_SerialNumber(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDP_SerialNumber, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDP_ProxyProtocol(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDP_ProxyProtocol, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDLt_Source(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLt_Source, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDLt_AcquiredTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLt_AcquiredTime, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDLt_ExternalSource(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLt_ExternalSource, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDLt_ExternalProtocol(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLt_ExternalProtocol, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDLt_DataObject(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLt_DataObject, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDLt_DataObject(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDLt_DataObject, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DM_EnableCWMP(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DM_EnableCWMP, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DM_EnableCWMP(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DM_EnableCWMP, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
		restartTR069CWMP();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DM_URL(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DM_URL, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DM_URL(char * path_name, char *value)
{
	int ret = 0;
	char old_value[256] = {0};
	
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (strlen(value) > 256)
		return -2;

	do_uci_get(DM_URL, old_value);
	if(strcmp(old_value, value))
		tr_remove( FLAG_BOOTSTRAP );
	
	ret = do_uci_set(DM_URL, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
		restartTR069CWMP();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DM_Username(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	char acs_identifier[32] = {0};
#if 0
	char defultFlag[32] = {0};

	do_uci_get(DM_UsernameFlag, defultFlag);
	if (atoi(defultFlag) == 0)
	{
		char OuiValue[64] = {0};
		char ProductClassValue[64] = {0};
		char SerialNumberValue[64] = {0};
		int res = 0;

		GET_NODE_VALUE( "Device.DeviceInfo.ManufacturerOUI", OuiValue );
		GET_NODE_VALUE( "Device.DeviceInfo.ProductClass", ProductClassValue );
		GET_NODE_VALUE( "Device.DeviceInfo.SerialNumber", SerialNumberValue );

		sprintf(value, "%s-%s-%s", OuiValue, ProductClassValue, SerialNumberValue);

		tr_log(LOG_DEBUG,"get value [%s]",value);
		return ret;
	}
#endif
	do_uci_get(DM_X_CHARTER_COM_ACSIdentifier, acs_identifier);
	if(strcmp(acs_identifier, "TWC") == 0){
		ret = do_uci_get(DM_TWCUsername, value);
	}
	else{
		ret = do_uci_get(DM_Username, value);
	}
	
	if(ret)
	{
		strcpy(value, "");
		ret = 0;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DM_Username(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	char acs_identifier[32] = {0};
	
	if (strlen(value) > 256)
		return -2;

	do_uci_get(DM_X_CHARTER_COM_ACSIdentifier, acs_identifier);
	if(strcmp(acs_identifier, "TWC") == 0){
		ret = do_uci_set(DM_TWCUsername, value);
	}
	else{
		ret = do_uci_set(DM_Username, value);
	}
	
	if(ret)
	{
		return (-1);
	}
	else
	{
		//do_uci_set(DM_UsernameFlag, "1");
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
		//restartTR069CWMP();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DM_Password(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char dmacs[32] = {0};

	if (managementServerPasswordFlag == 1){
		managementServerPasswordFlag = 0;

		do_uci_get(DM_X_CHARTER_COM_ACSIdentifier, dmacs);
		if (strcmp(dmacs,"TWC") == 0)
		{
			ret = readFromNonvolatileFlashFile(DM_Password,value);
			if (ret)
			{
				return -1;
			}
		}
		else
		{
			ret = do_uci_get(DM_Password, value);
			if(ret)
			{
				return -1;
			}
		}
		tr_log(LOG_DEBUG,"password for auth[%s]",value);
	}
	else
		strcpy(value, ""); //When read, this parameter returns an empty string
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DM_Password(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char dmacs[32] = {0};

	if (strlen(value) > 256)
		return -2;
	
	do_uci_get(DM_X_CHARTER_COM_ACSIdentifier, dmacs);
	if (strcmp(dmacs,"TWC") == 0)
		writeToNonvolatileFlashFile(DM_Password, value);
	else
		ret = do_uci_set(DM_Password, value);

	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
		//restartTR069CWMP();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DM_ScheduleReboot(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DM_ScheduleReboot, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DM_ScheduleReboot(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DM_ScheduleReboot, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
		long int currenttimesec = 0;
		long int scheduletimesec = 0;
		currenttimesec = getLocalTimeWithSeconds();
		scheduletimesec = changedDateTimeToSeconds(value);
		if (currenttimesec < scheduletimesec){
			pthread_t id;
			schedulerebootsens = scheduletimesec - currenttimesec;
			pthread_create( &id, NULL, ( void * ) doScheduleReboot, NULL );
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DM_DelayReboot(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DM_DelayReboot, value);
	if(ret)
	{
		strcpy(value, "-1");
		ret = 0;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DM_DelayReboot(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (atoi(value) < 1) //don't allow to set less than 1s
		return -2;
	
	ret = do_uci_set(DM_DelayReboot, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	pthread_t id;
	dealayrebootsens = atoi(value);
    pthread_create( &id, NULL, ( void * ) doDelayReboot, NULL );
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DM_PeriodicInformEnable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DM_PeriodicInformEnable, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DM_PeriodicInformEnable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DM_PeriodicInformEnable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
		//restartTR069CWMP();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DM_PeriodicInformInterval(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DM_PeriodicInformInterval, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DM_PeriodicInformInterval(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (atoi(value) < 1 || atoi(value) > 4294967294)
		return -2;
	
	ret = do_uci_set(DM_PeriodicInformInterval, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
		//restartTR069CWMP();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DM_PeriodicInformTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DM_PeriodicInformTime, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DM_PeriodicInformTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DM_PeriodicInformTime, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
		//restartTR069CWMP();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DM_ParameterKey(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DM_ParameterKey, value);
	if(ret)
	{
		return -1;
	}
	if (strcmp(value, " ") == 0)
		strcpy(value, "");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DM_ParameterKey(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (strlen(value) > 32)
		return -2;
	
	ret = do_uci_set(DM_ParameterKey, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DM_ConnectionRequestURL(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DM_ConnectionRequestURL, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DM_ConnectionRequestUsername(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DM_ConnectionRequestUsername, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DM_ConnectionRequestUsername(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (strlen(value) > 256)
		return -2;

	value = skip_blanks(value);
	value = trim_blanks(value);
	if(!strcmp(value, ""))
		return -2;
	
	ret = do_uci_set(DM_ConnectionRequestUsername, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
		//restartTR069CWMP();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DM_ConnectionRequestPassword(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	if (connectionRequestPasswordFlag == 1){
		connectionRequestPasswordFlag = 0;
		ret = do_uci_get(DM_ConnectionRequestPassword, value);
		if(ret)
		{
			return -1;
		}
	}
	else
		strcpy(value, ""); //When read, this parameter returns an empty string
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DM_ConnectionRequestPassword(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (strlen(value) > 256)
		return -2;

	value = skip_blanks(value);
	value = trim_blanks(value);
	if(!strcmp(value, ""))
		return -2;

	ret = do_uci_set(DM_ConnectionRequestPassword, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
		//restartTR069CWMP();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DM_UpgradesManaged(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DM_UpgradesManaged, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DM_UpgradesManaged(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DM_UpgradesManaged, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DM_KickURL(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DM_KickURL, value);
	if(ret)
	{
		return -1;
	}
	if (strcmp(value, " ") == 0)
		strcpy(value, "");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DM_DownloadProgressURL(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DM_DownloadProgressURL, value);
	if(ret)
	{
		return -1;
	}
	if (strcmp(value, " ") == 0)
		strcpy(value, "");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DM_DefaultActiveNotificationThrottle(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DM_DefaultActiveNotificationThrottle, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DM_DefaultActiveNotificationThrottle(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DM_DefaultActiveNotificationThrottle, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DM_CWMPRetryMinimumWaitInterval(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DM_CWMPRetryMinimumWaitInterval, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DM_CWMPRetryMinimumWaitInterval(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (atoi(value) < 1 || atoi(value) > 65535)
		return -2;
	
	ret = do_uci_set(DM_CWMPRetryMinimumWaitInterval, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
		//restartTR069CWMP();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DM_CWMPRetryIntervalMultiplier(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DM_CWMPRetryIntervalMultiplier, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DM_CWMPRetryIntervalMultiplier(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (atoi(value) < 1000 || atoi(value) > 65535)
		return -2;
		
	ret = do_uci_set(DM_CWMPRetryIntervalMultiplier, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
		//restartTR069CWMP();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DM_X_CHARTER_COM_ACSIdentifier(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DM_X_CHARTER_COM_ACSIdentifier, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DM_X_CHARTER_COM_ACSIdentifier(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (strlen(value) > 32)
		return -2;
		
	ret = do_uci_set(DM_X_CHARTER_COM_ACSIdentifier, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
		//restartTR069CWMP();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DM_HTTPConnectionRequestEnable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DM_HTTPConnectionRequestEnable, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "1"); //always 1
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DM_HTTPConnectionRequestEnable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DM_HTTPConnectionRequestEnable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DM_UDPConnectionRequestAddress(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DM_UDPConnectionRequestAddress, value);
	if(ret)
	{
		return -1;
	}
	if (strcmp(value, " ") == 0)
		strcpy(value, "");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DM_STUNEnable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DM_STUNEnable, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DM_STUNEnable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DM_STUNEnable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
		//restartTR069CWMP();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DM_STUNServerAddress(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DM_STUNServerAddress, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DM_STUNServerAddress(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (strlen(value) > 256)
		return -2;
	
	ret = do_uci_set(DM_STUNServerAddress, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
		//restartTR069CWMP();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DM_STUNServerPort(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DM_STUNServerPort, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DM_STUNServerPort(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (atoi(value) < 0 || atoi(value) > 65535)
		return -2;
	
	ret = do_uci_set(DM_STUNServerPort, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
		//restartTR069CWMP();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DM_STUNUsername(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DM_STUNUsername, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DM_STUNUsername(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (strlen(value) > 256)
		return -2;
	
	ret = do_uci_set(DM_STUNUsername, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
		//restartTR069CWMP();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DM_STUNPassword(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	if (managementServerSTUNPasswordFlag == 1) {
		managementServerSTUNPasswordFlag = 0;
		ret = do_uci_get(DM_STUNPassword, value);
		if(ret)
		{
			return -1;
		}
	}
	else
		strcpy(value, ""); //When read, this parameter returns an empty string
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DM_STUNPassword(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (strlen(value) > 256)
		return -2;
	
	ret = do_uci_set(DM_STUNPassword, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
		//restartTR069CWMP();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DM_STUNMaximumKeepAlivePeriod(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DM_STUNMaximumKeepAlivePeriod, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DM_STUNMaximumKeepAlivePeriod(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (atoi(value) < -1)
		return -2;
	
	ret = do_uci_set(DM_STUNMaximumKeepAlivePeriod, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DM_STUNMinimumKeepAlivePeriod(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DM_STUNMinimumKeepAlivePeriod, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DM_STUNMinimumKeepAlivePeriod(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DM_STUNMinimumKeepAlivePeriod, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DM_NATDetected(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char stunenable[32] = {0};

	ret = do_uci_get(DM_NATDetected, value);
	if(ret)
	{
		return -1;
	}
	//When STUNEnable is false, this value MUST be false.
	ret = do_uci_get(DM_STUNEnable, stunenable);
	if(ret)
	{
		return -1;
	}
	if (atoi(stunenable) == 0)
		strcpy(value, "0");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DM_AliasBasedAddressing(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DM_AliasBasedAddressing, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DM_InstanceMode(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DM_InstanceMode, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DM_InstanceMode(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (strcmp(value, "InstanceNumber") != 0 &&  strcmp(value, "InstanceAlias") != 0)
		return -1;
	
	ret = do_uci_set(DM_InstanceMode, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DM_AutoCreateInstances(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DM_AutoCreateInstances, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DM_AutoCreateInstances(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DM_AutoCreateInstances, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DM_ManageableDeviceNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DM_ManageableDeviceNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}*/
	char keyvalue[MAXMAPITEMS][256];
	int  number = 0;
   
	number = get_Device_ManagementServer_ManageableDevice(keyvalue);
	sprintf(value, "%d", number);
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DM_ManageableDeviceNotificationLimit(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DM_ManageableDeviceNotificationLimit, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DM_ManageableDeviceNotificationLimit(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DM_ManageableDeviceNotificationLimit, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DM_EmbeddedDeviceNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/* = do_uci_get(DM_EmbeddedDeviceNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "0"); //Not support, always 0
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DM_VirtualDeviceNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DM_VirtualDeviceNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "0"); //Not support, always 0
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DM_SupportedConnReqMethods(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DM_SupportedConnReqMethods, value);
	if(ret)
	{
		return -1;
	}*/
#ifdef XMPP
	strcpy(value, "HTTP,STUN,XMPP");
#else
	strcpy(value, "HTTP");
#endif
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DM_ConnReqXMPPConnection(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
#ifdef XMPP	
	ret = do_uci_get(DM_ConnReqXMPPConnection, value);
	if(ret)
	{
		return -1;
	}
	//strcpy(value, ""); //not support
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
#else
	strcpy(value, "");
#endif
}
int set_DM_ConnReqXMPPConnection(char * path_name, char *value)
{
	int ret = 0,runningInstance=0;
	char *index, curXmpp[256]={0};
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

#ifdef XMPP
	//stop the other xmpp agent if already running
	ret = do_uci_get(DM_ConnReqXMPPConnection, curXmpp);
	if(ret)
	{
		return -1;
	}

    index = parseTemplate(curXmpp,".Connection." );
    if(index)
    {
        runningInstance = atoi(index);
	}

	x_xmpp_agent_stop(runningInstance );

	ret = do_uci_set(DM_ConnReqXMPPConnection, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	
	//now start the new xmppagent
    index = parseTemplate(value,".Connection." );
    if(index)
    {
        runningInstance = atoi(index);
	}

	x_xmpp_agent_start(runningInstance );
	
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
#else
	return -1;
#endif
}
int get_DM_ConnReqAllowedJabberIDs(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
#ifdef XMPP
	ret = do_uci_get(DM_ConnReqAllowedJabberIDs, value);
	if(ret)
	{
		return -1;
	}
#else
	strcpy(value, "");
#endif
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DM_ConnReqAllowedJabberIDs(char * path_name, char *value)
{
	int ret = 0;
	
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
#ifdef XMPP
	ret = do_uci_set(DM_ConnReqAllowedJabberIDs, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
#else
	return -1;
#endif
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DM_ConnReqJabberID(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
#ifdef XMPP
	ret = do_uci_get(DM_ConnReqJabberID, value);
	if(ret)
	{
		return -1;
	}
#else
	strcpy(value, "");
#endif
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DM_HTTPCompressionSupported(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DM_HTTPCompressionSupported, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "Compress");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DM_HTTPCompression(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DM_HTTPCompression, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "Compress");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DM_HTTPCompression(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	//make sure its one of the supported type or disabled
	/*ret = do_uci_set(DM_HTTPCompression, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DM_LightweightNotificationProtocolsSupported(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DM_LightweightNotificationProtocolsSupported, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, ""); //not support
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DM_LightweightNotificationProtocolsUsed(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DM_LightweightNotificationProtocolsUsed, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, ""); //not support
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DM_LightweightNotificationProtocolsUsed(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DM_LightweightNotificationProtocolsUsed, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DM_UDPLightweightNotificationHost(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DM_UDPLightweightNotificationHost, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, ""); //not support
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DM_UDPLightweightNotificationHost(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DM_UDPLightweightNotificationHost, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DM_UDPLightweightNotificationPort(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DM_UDPLightweightNotificationPort, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, ""); //not support
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DM_UDPLightweightNotificationPort(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DM_UDPLightweightNotificationPort, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DM_InformParameterNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DM_InformParameterNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}*/
	sprintf(value, "%d", INFORMPARA_MAX_INSTANCE_NUM);
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DM_X_TWC_COM_ValidateManagementServerCertificate(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char dmacs[32] = {0};

	do_uci_get(DM_X_CHARTER_COM_ACSIdentifier, dmacs);
	if (strcmp(dmacs,"TWC") == 0)
	{
		ret = readFromNonvolatileFlashFile(DM_X_TWC_COM_ValidateManagementServerCertificate,value);
		if (ret)
		{
			ret = do_uci_get(DM_X_TWC_COM_ValidateManagementServerCertificate, value);
			if(ret)
			{
				return -1;
			}
		}
	}
	else
	{
		ret = do_uci_get(DM_X_TWC_COM_ValidateManagementServerCertificate, value);
		if(ret)
		{
			return -1;
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DM_X_TWC_COM_ValidateManagementServerCertificate(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char dmacs[32] = {0};

	do_uci_get(DM_X_CHARTER_COM_ACSIdentifier, dmacs);
	if (strcmp(dmacs,"TWC") == 0)
		writeToNonvolatileFlashFile(DM_X_TWC_COM_ValidateManagementServerCertificate, value);
	ret = do_uci_set(DM_X_TWC_COM_ValidateManagementServerCertificate, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DM_X_TWC_COM_ValidateDownloadServerCertificate(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char dmacs[32] = {0};

	do_uci_get(DM_X_CHARTER_COM_ACSIdentifier, dmacs);
	if (strcmp(dmacs,"TWC") == 0)
	{
		ret = readFromNonvolatileFlashFile(DM_X_TWC_COM_ValidateDownloadServerCertificate,value);
		if (ret)
		{
			ret = do_uci_get(DM_X_TWC_COM_ValidateDownloadServerCertificate, value);
			if(ret)
			{
				return -1;
			}
		}
	}
	else
	{
		ret = do_uci_get(DM_X_TWC_COM_ValidateDownloadServerCertificate, value);
		if(ret)
		{
			return -1;
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DM_X_TWC_COM_ValidateDownloadServerCertificate(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char dmacs[32] = {0};

	do_uci_get(DM_X_CHARTER_COM_ACSIdentifier, dmacs);
	if (strcmp(dmacs,"TWC") == 0)
		writeToNonvolatileFlashFile(DM_X_TWC_COM_ValidateDownloadServerCertificate, value);
	ret = do_uci_set(DM_X_TWC_COM_ValidateDownloadServerCertificate, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DM_X_TWC_COM_RootCertificateNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DM_X_TWC_COM_RootCertificateNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMXt_Enabled(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char *index = parseTemplate(path_name, ".X_TWC_COM_RootCertificate.");
	char name[256] = {0};
	char dmacs[32] = {0};

	if (index != NULL)
	{
		sprintf(name, "%s%d", DMXt_Enabled, atoi(index));
	}
	do_uci_get(DM_X_CHARTER_COM_ACSIdentifier, dmacs);
	if (strcmp(dmacs,"TWC") == 0)
	{
		ret = readFromNonvolatileFlashFile(name,value);
		if(ret)
		{
			ret = do_uci_get(name, value);
			if(ret)
			{
				strcpy(value, "0");
				ret = 0;
			}
		}
	}
	else
	{
		ret = do_uci_get(name, value);
		if(ret)
		{
			strcpy(value, "0");
			ret = 0;
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DMXt_Enabled(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char name[256] = {0};
	char dmacs[32] = {0};
	char *index = parseTemplate(path_name, ".X_TWC_COM_RootCertificate.");

	if (index != NULL)
	{
		sprintf(name, "%s%d", DMXt_Enabled, atoi(index));
	}
	do_uci_get(DM_X_CHARTER_COM_ACSIdentifier, dmacs);
	if (strcmp(dmacs,"TWC") == 0)
		writeToNonvolatileFlashFile(name,value);
	
	ret = do_uci_set(name, value);
	if(ret)
	{
		tr_log(LOG_DEBUG,"do_uci_set: set RootCertificate enable or disable value fail....");
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			tr_log(LOG_DEBUG,"do_uci_commit: commit RootCertificate enable or disable value fail....");
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DMXt_Certificate(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char name[256] = {0};
	char dmacs[32] = {0};
	char *index = parseTemplate(path_name, ".X_TWC_COM_RootCertificate.");

	if (index != NULL)
	{
		sprintf(name, "%s%d", DMXt_Certificate, atoi(index));
		do_uci_get(DM_X_CHARTER_COM_ACSIdentifier, dmacs);
		if (strcmp(dmacs,"TWC") == 0)
		{
			FILE *fp = NULL;
			char cert[4096] = {0};
			int Certlen = 0;
			char filename[64] = {0};
			sprintf(filename,"/tmp/vendor/cert%d",atoi(index));
        	fp = fopen(filename, "r");
        	if(fp != NULL)
        	{
				Certlen = fread(cert,1,4096,fp);
				strncpy(value, cert, Certlen+1);
				fclose(fp);
			}
			else
			{
				tr_log(LOG_DEBUG,"read certfile fail");
				ret = do_uci_get(name, value);
				if(ret)
				{
					ret = 0;
					strcpy(value, "");
				}
			}
		}
		else
		{
			ret = do_uci_get(name, value);
			if(ret)
			{
				ret = 0;
				strcpy(value, "");
			}
		}
	}
	
	/*char filename[256] = {0};
	FILE *fp = NULL;
	char cert[4096] = {0};
	int Certlen = 0;
	char *index = parseTemplate(path_name, ".X_TWC_COM_RootCertificate.");
	if (index != NULL)
	{
		sprintf(filename, "/oneagent/conf/ca%d", atoi(index));
		fp = fopen(filename,"r");
		if(fp != NULL){
			Certlen = fread(cert,1,4096,fp);
			strncpy(value, cert, Certlen+1);
			fclose(fp);
		}
		else
			strcpy(value, "");
	}*/
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DMXt_Certificate(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DMXt_Certificate, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char name[256] = {0};
	char acsidname[256] = {0};
	char filename[256] = {0};
	char cert[4096] = {0};
	FILE *fp = NULL;
	char *index = parseTemplate(path_name, ".X_TWC_COM_RootCertificate.");
	char head[30] = "-----BEGIN CERTIFICATE-----";
	char end[30] = "-----END CERTIFICATE-----";
	char line[10] = "\r\n";
	char dmacs[32] = {0};

	if (index != NULL)
	{
		sprintf(name,"%s%d",DMXt_Certificate,atoi(index));
		do_uci_get(DM_X_CHARTER_COM_ACSIdentifier, dmacs);
		
		sprintf(acsidname,"%s%d",DMXt_X_CHARTER_COM_ACSIdentifier,atoi(index));
		do_uci_set(acsidname, dmacs);
		
		if (strcmp(dmacs,"TWC") == 0)
			ret = writeToNonvolatileCertFile(atoi(index), value);
		ret = do_uci_set(name, value);
		if(ret)
		{
			tr_log(LOG_DEBUG,"do_uci_set: set RootCertificate value fail....");
			return (-1);
		}
		else
		{
			ret = do_uci_commit(MS);
			if(ret)
			{
				tr_log(LOG_DEBUG,"do_uci_commit: commit RootCertificate value fail....");
				return (-1);
			}
		}

		sprintf(cert,"%s%s%s%s%s",head,line,value,line,end);
		sprintf(filename,"/oneagent/conf/ca%d",atoi(index));
		fp = fopen(filename,"w+");
		if(fp != NULL){
			char cmd[256] = {0};
			char filename1[256] = {0};
			fwrite(cert, 1, strlen(cert), fp);
			fclose(fp);
			sprintf(filename1,"/oneagent/conf/ca%d.pem",atoi(index));
			sprintf(cmd, "openssl x509 -outform PEM -in %s -out %s",filename,filename1);
			system(cmd);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DMXt_LastModif(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DMXt_LastModif, value);
	if(ret)
	{
		return -1;
	}*/
	char dmacs[32] = {0};
	struct stat st;
	char filename[256] = {0};
	char *index = parseTemplate(path_name, ".X_TWC_COM_RootCertificate.");

	if (index != NULL){
		sprintf(filename,"/oneagent/conf/ca%d",atoi(index));
		if (stat(filename, &st) == 0)
			changedSecondsToDateTime(st.st_mtime,value);
		else
		{
			do_uci_get(DM_X_CHARTER_COM_ACSIdentifier, dmacs);
			if (strcmp(dmacs,"TWC") == 0)
			{
				sprintf(filename,"/tmp/vendor/cert%d",atoi(index));
				if (stat(filename, &st) == 0)
					changedSecondsToDateTime(st.st_mtime,value);
				else
					strcpy(value, "0001-01-01T00:00:00Z");
			}
			else
				strcpy(value, "0001-01-01T00:00:00Z");
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMXt_SerialNumber(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DMXt_SerialNumber, value);
	if(ret)
	{
		return -1;
	}*/
	char dmacs[32] = {0};
	X509 *caCert = NULL;
	ASN1_INTEGER *bs = NULL;  
    BIGNUM  *bn = NULL;  
	char *index = parseTemplate(path_name, ".X_TWC_COM_RootCertificate.");

	if (index != NULL)
	{
		int i = atoi(index);
		
		do_uci_get(DM_X_CHARTER_COM_ACSIdentifier, dmacs);
		if (strcmp(dmacs,"TWC") == 0)
		{
			tr_log(LOG_DEBUG,"call write_vendor_file");
			write_vendor_file(i);	
		}
		ret = pem_to_x509(i, &caCert);
		if (ret == 0){
			bs = X509_get_serialNumber(caCert);
			if (bs != NULL){
				if (bs->length == 0) {
					strcpy(value, "");
				}
				else{
					bn = ASN1_INTEGER_to_BN(bs, NULL);
					if (bn != NULL){
						strcpy(value,BN_bn2hex(bn));
						BN_free(bn);
					}
					else
						strcpy(value, "");
				}
				free(bs);
			}
			else
				strcpy(value, "");
			if (caCert != NULL)
				free(caCert);
		}
		else{
			strcpy(value, "");
			ret = 0;
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMXt_Issuer(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DMXt_Issuer, value);
	if(ret)
	{
		return -1;
	}*/
	char dmacs[32] = {0};
	X509 *caCert = NULL; 
	char *index = parseTemplate(path_name, ".X_TWC_COM_RootCertificate.");

	if (index != NULL)
	{
		int i = atoi(index);
		do_uci_get(DM_X_CHARTER_COM_ACSIdentifier, dmacs);
		if (strcmp(dmacs,"TWC") == 0)
		{
			tr_log(LOG_DEBUG,"call write_vendor_file");
			write_vendor_file(i);	
		}
		ret = pem_to_x509(i, &caCert);
		if (ret == 0){
			strcpy(value,X509_NAME_oneline( X509_get_issuer_name( caCert ), NULL, 0));
			if (caCert != NULL){
				free(caCert);
			}
		}
		else{
			strcpy(value, "");
			ret = 0;
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMXt_NotBefore(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DMXt_NotBefore, value);
	if(ret)
	{
		return -1;
	}*/
	char dmacs[32] = {0};
	X509 *caCert = NULL;
	ASN1_TIME *start = NULL;
	time_t ttStart = {0};
	char *index = parseTemplate(path_name, ".X_TWC_COM_RootCertificate.");

	if (index != NULL)
	{
		int i = atoi(index);
		do_uci_get(DM_X_CHARTER_COM_ACSIdentifier, dmacs);
		if (strcmp(dmacs,"TWC") == 0)
		{
			tr_log(LOG_DEBUG,"call write_vendor_file");
			write_vendor_file(i);	
		}
		ret = pem_to_x509(i, &caCert);
		if (ret == 0){
			start = X509_get_notBefore(caCert);
			if (start != NULL){
				/*ttStart = ASN1_UTCTIME_get(start);
				tr_log(LOG_DEBUG,"ttStart [%ld]",ttStart);
				changedSecondsToDateTime(ttStart,value);*/
				ASN1_UTCTIME_get1(start, value);
			}
			else
				strcpy(value, "0001-01-01T00:00:00Z");
			if (caCert != NULL)
				free(caCert);
		}
		else{
			strcpy(value, "0001-01-01T00:00:00Z");
			ret = 0;
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMXt_NotAfter(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DMXt_NotAfter, value);
	if(ret)
	{
		return -1;
	}*/
	char dmacs[32] = {0};
	X509 *caCert = NULL;
	ASN1_TIME *end = NULL; 
	time_t ttEnd = {0};
	char *index = parseTemplate(path_name, ".X_TWC_COM_RootCertificate.");

	if (index != NULL)
	{
		int i = atoi(index);
		do_uci_get(DM_X_CHARTER_COM_ACSIdentifier, dmacs);
		if (strcmp(dmacs,"TWC") == 0)
		{
			tr_log(LOG_DEBUG,"call write_vendor_file");
			write_vendor_file(i);	
		}
		ret = pem_to_x509(i, &caCert);
		if (ret == 0){
			end = X509_get_notAfter(caCert);
			if (end != NULL){
				/*ttEnd = ASN1_UTCTIME_get(end);
				tr_log(LOG_DEBUG,"ttEnd [%ld]",ttEnd);
				if(ttEnd == -1)
				{
					ASN1_UTCTIME_get1(end, value);
				}
				else
				{
					changedSecondsToDateTime(ttEnd,value);
				}*/
				ASN1_UTCTIME_get1(end, value);
			}
			else
				strcpy(value, "0001-01-01T00:00:00Z");
			if (caCert != NULL)
				free(caCert);
		}
		else{
			strcpy(value, "0001-01-01T00:00:00Z");
			ret = 0;
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMXt_Subject(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DMXt_Subject, value);
	if(ret)
	{
		return -1;
	}*/
	char dmacs[32] = {0};
	X509 *caCert = NULL; 
	char *index = parseTemplate(path_name, ".X_TWC_COM_RootCertificate.");

	if (index != NULL)
	{
		int i = atoi(index);
		do_uci_get(DM_X_CHARTER_COM_ACSIdentifier, dmacs);
		if (strcmp(dmacs,"TWC") == 0)
		{
			write_vendor_file(i);	
			tr_log(LOG_DEBUG,"call write_vendor_file");
		}
		ret = pem_to_x509(i, &caCert);
		if (ret == 0){
			strcpy(value,X509_NAME_oneline( X509_get_subject_name( caCert ), NULL, 0));
			if (caCert != NULL)
				free(caCert);
		}
		else{
			strcpy(value, "");
			ret = 0;
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMXt_SubjectAlt(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DMXt_SubjectAlt, value);
	if(ret)
	{
		return -1;
	}*/
	char dmacs[32] = {0};
	X509 *caCert = NULL;
	char subalt[256] = {0};
	STACK_OF(GENERAL_NAME) *gens = NULL;
	char *index = parseTemplate(path_name, ".X_TWC_COM_RootCertificate.");

	if (index != NULL)
	{
		int i = atoi(index);
		do_uci_get(DM_X_CHARTER_COM_ACSIdentifier, dmacs);
		if (strcmp(dmacs,"TWC") == 0)
		{
			tr_log(LOG_DEBUG,"call write_vendor_file");
			write_vendor_file(i);	
		}
		ret = pem_to_x509(i, &caCert);
		if (ret == 0){
			gens = X509_get_ext_d2i(caCert, NID_subject_alt_name, NULL, NULL);
			if (gens != NULL){
				GENERAL_NAME *gen = NULL;
				ASN1_IA5STRING *cstr = NULL;
				tr_log(LOG_DEBUG,"can get gens");
				for (i = 0; i < sk_GENERAL_NAME_num(gens); i++) {
					gen = sk_GENERAL_NAME_value(gens, i);
					if (gen != NULL && gen->type == GEN_DNS){
						cstr = gen->d.dNSName;
						if(cstr != NULL){
							if (subalt[0] == '\0')
								sprintf(subalt, "%s", cstr->data);
							else
								sprintf(subalt, "%s,%s",subalt, cstr->data);
							free(cstr);
							tr_log(LOG_DEBUG,"subalt[%s]",subalt);
						}
						free(gen);
					}
				}
				strcpy(value, subalt);
				if (gens != NULL)
					free(gens);
			}
			else{
				tr_log(LOG_DEBUG,"can't get gens");
				strcpy(value, "");
			}
			if (caCert != NULL)
				free(caCert);
		}
		else{
			strcpy(value, "");
			ret = 0;
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMXt_SignatureAlgorithm(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DMXt_SignatureAlgorithm, value);
	if(ret)
	{
		return -1;
	}*/
	char dmacs[32] = {0};
	X509 *caCert = NULL;
	ASN1_OBJECT* salg  = NULL;
	char oid[128] = {0};
	char *index = parseTemplate(path_name, ".X_TWC_COM_RootCertificate.");

	if (index != NULL)
	{
		int i = atoi(index);
		do_uci_get(DM_X_CHARTER_COM_ACSIdentifier, dmacs);
		if (strcmp(dmacs,"TWC") == 0)
		{
			tr_log(LOG_DEBUG,"call write_vendor_file");
			write_vendor_file(i);	
		}
		ret = pem_to_x509(i, &caCert);
		if (ret == 0){
			salg = caCert->sig_alg->algorithm;
			if(salg != NULL){
				OBJ_obj2txt(oid, 128, caCert->sig_alg->algorithm, 1);
				strcpy(value,oid);
				free(salg);
			}
			else{
				tr_log(LOG_DEBUG,"get sig_alg->algorithm error");
				strcpy(value, "");
			}
			if (caCert != NULL)
				free(caCert);
		}
		else{
			strcpy(value, "");
			ret = 0;
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMXt_X_CHARTER_COM_ACSIdentifier(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char acsidname[256] = {0};
	char *index = parseTemplate(path_name, ".X_TWC_COM_RootCertificate.");
	sprintf(acsidname,"%s%d",DMXt_X_CHARTER_COM_ACSIdentifier,atoi(index));
	ret = do_uci_get(acsidname, value);
	if(ret)
	{
		char dmacs[32] = {0};
		do_uci_get(DM_X_CHARTER_COM_ACSIdentifier, dmacs);
		if (strcmp(dmacs,"TWC") == 0)
		{
			strcpy(value,dmacs);
			tr_log(LOG_DEBUG,"value[%s]",value);
			ret = 0;
		}
		else
			return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMMt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DMMt_Alias, value);
	if(ret)
	{
		return -1;
	}*/
	ret = 1; //getting from tr.xml
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DMMt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (!isalpha(value[0]))
		return -2;
	
	if (strlen(value) > 64)
		return -2;
	
	/*ret = do_uci_set(DMMt_Alias, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//set to tr.xml
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DMMt_ManufacturerOUI(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DMMt_ManufacturerOUI, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".ManageableDevice.");
	char mac[32] = {0};

	if (index != NULL){
		ret = lib_getvalue_mapfile_byinstance(ManagementServerManageableDeviceMapMap, mac, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			char filename[128] = {0};
			char info[64] = {0};
			char *p = NULL;
			sprintf(filename, "/tmp/%s_option125", mac);
			getManagementServerManageableDeviceInfo(filename, "ManufacturerOUI", info);
			if ((p = strstr(info, "\n")) != NULL || (p = strstr(info, "\r")) != NULL)
				*p = '\0';
			strcpy(value, info);
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMMt_SerialNumber(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DMMt_SerialNumber, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".ManageableDevice.");
	char mac[32] = {0};

	if (index != NULL){
		ret = lib_getvalue_mapfile_byinstance(ManagementServerManageableDeviceMapMap, mac, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			char filename[128] = {0};
			char info[64] = {0};
			char *p = NULL;
			sprintf(filename, "/tmp/%s_option125", mac);
			getManagementServerManageableDeviceInfo(filename, "SerialNumber", info);
			if ((p = strstr(info, "\n")) != NULL || (p = strstr(info, "\r")) != NULL)
				*p = '\0';
			strcpy(value, info);
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMMt_ProductClass(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DMMt_ProductClass, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".ManageableDevice.");
	char mac[32] = {0};

	if (index != NULL){
		ret = lib_getvalue_mapfile_byinstance(ManagementServerManageableDeviceMapMap, mac, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			char filename[128] = {0};
			char info[64] = {0};
			char *p = NULL;
			sprintf(filename, "/tmp/%s_option125", mac);
			getManagementServerManageableDeviceInfo(filename, "ProductClass", info);
			if ((p = strstr(info, "\n")) != NULL || (p = strstr(info, "\r")) != NULL)
				*p = '\0';
			strcpy(value, info);
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMMt_Host(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DMMt_Host, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".ManageableDevice.");
	char mac[32] = {0};
	char mac2[32] = {0};
	int i = 1;

	if (index != NULL){
		ret = lib_getvalue_mapfile_byinstance(ManagementServerManageableDeviceMapMap, mac, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			for (i = 1; ;i ++){
				ret = lib_getvalue_mapfile_byinstance(HostsHostMap, mac2, i);
				if(ret)
				{
					strcpy(value, ""); //no host entry, value an empty string
					break;
				}
				else
				{
					if (strcasecmp(mac, mac2) == 0){
						sprintf(value, "Device.Hosts.Host.%d", i);
						break;
					}
				}
			}
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMA_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMA_Enable, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DMA_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DMA_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DMA_TransferTypeFilter(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMA_TransferTypeFilter, value);
	if(ret)
	{
		return -1;
	}
	if (strcmp(value, " ") == 0)
		strcpy(value, "");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DMA_TransferTypeFilter(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (strcmp(value, "Upload") != 0 && strcmp(value, "Download") != 0 && strcmp(value, "Both") != 0)
		return -2;
	
	ret = do_uci_set(DMA_TransferTypeFilter, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DMA_ResultTypeFilter(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMA_ResultTypeFilter, value);
	if(ret)
	{
		return -1;
	}
	if (strcmp(value, " ") == 0)
		strcpy(value, "");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DMA_ResultTypeFilter(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (strcmp(value, "Success") != 0 && strcmp(value, "Failure") != 0 && strcmp(value, "Both") != 0)
		return -2;
	
	ret = do_uci_set(DMA_ResultTypeFilter, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DMA_FileTypeFilter(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMA_FileTypeFilter, value);
	if(ret)
	{
		return -1;
	}
	if (strcmp(value, " ") == 0)
		strcpy(value, "");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DMA_FileTypeFilter(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (strlen(value) > 1024)
		return -2;
	
	ret = do_uci_set(DMA_FileTypeFilter, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DMA_Enable_177(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMA_Enable_177, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DMA_Enable_177(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DMA_Enable_177, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DMA_Status(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMA_Status, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMA_GroupNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMA_GroupNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMAGt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMAGt_Alias, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DMAGt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DMAGt_Alias, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DMAGt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMAGt_Enable, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DMAGt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DMAGt_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DMAGt_Status(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMAGt_Status, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMAGt_URL(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMAGt_URL, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMAQ_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMAQ_Enable, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DMAQ_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DMAQ_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DMAQ_Status(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMAQ_Status, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMAQ_URL(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMAQ_URL, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DMAQ_URL(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DMAQ_URL, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DMD_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMD_Enable, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DMD_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DMD_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DMD_OperationTypeFilter(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMD_OperationTypeFilter, value);
	if(ret)
	{
		return -1;
	}
	if (strcmp(value, " ") == 0)
		strcpy(value, "");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DMD_OperationTypeFilter(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (strcmp(value, "Install") != 0 && strcmp(value, "Update") != 0 && strcmp(value, "Uninstall") != 0)
		return -2;
	
	ret = do_uci_set(DMD_OperationTypeFilter, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DMD_ResultTypeFilter(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMD_ResultTypeFilter, value);
	if(ret)
	{
		return -1;
	}
	if (strcmp(value, " ") == 0)
		strcpy(value, "");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DMD_ResultTypeFilter(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (strcmp(value, "Success") != 0 && strcmp(value, "Failure") != 0 && strcmp(value, "Both") != 0)
		return -2;
	
	ret = do_uci_set(DMD_ResultTypeFilter, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DMD_FaultCodeFilter(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMD_FaultCodeFilter, value);
	if(ret)
	{
		return -1;
	}
	if (strcmp(value, " ") == 0)
		strcpy(value, "");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DMD_FaultCodeFilter(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (strcmp(value, "9001") != 0 && strcmp(value, "9003") != 0 && strcmp(value, "9012") != 0
		&& strcmp(value, "9013") != 0 && strcmp(value, "9015") != 0 && strcmp(value, "9016") != 0
		&& strcmp(value, "9017") != 0 && strcmp(value, "9018") != 0 && strcmp(value, "9022") != 0
		&& strcmp(value, "9023") != 0 && strcmp(value, "9024") != 0 && strcmp(value, "9025") != 0
		&& strcmp(value, "9026") != 0 && strcmp(value, "9027") != 0 && strcmp(value, "9028") != 0
		&& strcmp(value, "9029") != 0 && strcmp(value, "9030") != 0 && strcmp(value, "9031") != 0
		&& strcmp(value, "9032") != 0)
		return -2;
	
	ret = do_uci_set(DMD_FaultCodeFilter, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DMEt_ControllerID(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMEt_ControllerID, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMEt_ProxiedDeviceID(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMEt_ProxiedDeviceID, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMEt_Reference(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMEt_Reference, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMEt_SupportedDataModel(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMEt_SupportedDataModel, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMEt_Host(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMEt_Host, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMEt_ProxyProtocol(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMEt_ProxyProtocol, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMEt_ProxyProtocolReference(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMEt_ProxyProtocolReference, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMEt_DiscoveryProtocol(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMEt_DiscoveryProtocol, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMEt_DiscoveryProtocolReference(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMEt_DiscoveryProtocolReference, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMEt_CommandProcessed(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMEt_CommandProcessed, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMEt_ommandProcessingErrMsg(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMEt_ommandProcessingErrMsg, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMEt_LastSyncTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMEt_LastSyncTime, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DMEt_LastSyncTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DMEt_LastSyncTime, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DMVt_ManufacturerOUI(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMVt_ManufacturerOUI, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMVt_ProductClass(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMVt_ProductClass, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMVt_SerialNumber(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMVt_SerialNumber, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMVt_Host(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMVt_Host, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMVt_ProxyProtocol(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMVt_ProxyProtocol, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMVt_ProxyProtocolReference(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMVt_ProxyProtocolReference, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMVt_DiscoveryProtocol(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMVt_DiscoveryProtocol, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMVt_DiscoveryProtocolReference(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMVt_DiscoveryProtocolReference, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMS_CRUnawarenessMaxDuration(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMS_CRUnawarenessMaxDuration, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DMS_CRUnawarenessMaxDuration(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DMS_CRUnawarenessMaxDuration, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DMS_MaxMissedPeriodic(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMS_MaxMissedPeriodic, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DMS_MaxMissedPeriodic(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DMS_MaxMissedPeriodic, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DMS_NotifyMissedScheduled(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMS_NotifyMissedScheduled, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DMS_NotifyMissedScheduled(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DMS_NotifyMissedScheduled, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DMS_NetworkAwarenessCapable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMS_NetworkAwarenessCapable, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMS_SelfTimerCapable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMS_SelfTimerCapable, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMS_CRAwarenessRequested(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMS_CRAwarenessRequested, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DMS_CRAwarenessRequested(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DMS_CRAwarenessRequested, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DMS_PeriodicAwarenessRequested(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMS_PeriodicAwarenessRequested, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DMS_PeriodicAwarenessRequested(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DMS_PeriodicAwarenessRequested, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DMS_ScheduledAwarenessRequested(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMS_ScheduledAwarenessRequested, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DMS_ScheduledAwarenessRequested(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DMS_ScheduledAwarenessRequested, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DMIt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DMIt_Enable, value);
	if(ret)
	{
		return -1;
	}*/
	int ret2 = 0;
	char buff[128] = {0};
	char name[256] = {0};
	char *p = parseTemplate(path_name, ".InformParameter.");

	if (p == NULL)
		return -1;
	else
	{
		sprintf(name, "%s%d", DMIt_Enable, atoi(p));
		ret = do_uci_get(name, value);
		if(ret)
		{
			if(atoi(p) > INFORMPARA_MAX_INSTANCE_NUM)
			{
				return -1;
			}
			ret2 = getinformparaEnbl(p, buff);
			if (ret2 == 0)
				strcpy(value, buff);
			else
				strcpy(value, "1");
			ret = 0;
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DMIt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DMIt_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char name[256] = {0};
	char *p = parseTemplate(path_name, ".InformParameter.");

	if (p == NULL)
		return -1;
	else
	{
		sprintf(name,"%s%d",DMIt_Enable,atoi(p));
		ret = do_uci_set(name, value);
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit(MS);
			if(ret)
			{
				return (-1);
			}
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DMIt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DMIt_Alias, value);
	if(ret)
	{
		return -1;
	}*/
	ret = 1; //getting from tr.xml
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DMIt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (!isalpha(value[0]))
		return -2;
	
	if (strlen(value) > 64)
		return -2;

	/*ret = do_uci_set(DMIt_Alias, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//set to tr.xml
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DMIt_ParameterName(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DMIt_ParameterName, value);
	if(ret)
	{
		return -1;
	}*/
	char buff[128] = {0};
	char *p = parseTemplate(path_name, ".InformParameter.");

	if (p == NULL)
		return -1;
	else
	{
		if(atoi(p) > INFORMPARA_MAX_INSTANCE_NUM)
		{
			return -1;
		}
		getinformparaName(p, buff);
		strcpy(value, buff);
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DMIt_ParameterName(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DMIt_ParameterName, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DMIt_EventList(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DMIt_EventList, value);
	if(ret)
	{
		return -1;
	}*/
	char buff[128] = {0};
	char *p = parseTemplate(path_name, ".InformParameter.");

	if (p == NULL)
		return -1;
	else
	{
		if(atoi(p) > INFORMPARA_MAX_INSTANCE_NUM)
		{
			return -1;
		}
		getinformparaEvent(p, buff);
		strcpy(value, buff);
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DMIt_EventList(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DMIt_EventList, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DG_ManufacturerOUI(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DG_ManufacturerOUI, value);
	if(ret)
	{
		return -1;
	}*/
	char mac[32] = {0};

	getNextHopGwMac(mac);
	if (mac[0] != '\0'){
		int i = 0, j = 0;
		for (i = 0; i < 8; i ++){
			if (mac[i] != ':'){
				value[j] = toupper(mac[i]);
				j ++;
			}
		}
		value[j] = '\0';
	}
	else
		strcpy(value, "");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DG_ProductClass(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DG_ProductClass, value);
	if(ret)
	{
		return -1;
	}*/
	char mac[32] = {0};

	getNextHopGwMac(mac);
	if (mac[0] != '\0'){
		int i = 0, j = 0;
		for (i = 0; i < 8; i ++){
			if (mac[i] != ':'){
				value[j] = toupper(mac[i]);
				j ++;
			}
		}
		value[j] = '\0';
	}
	else
		strcpy(value, "");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DG_SerialNumber(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DG_SerialNumber, value);
	if(ret)
	{
		return -1;
	}*/
	char mac[32] = {0};

	getNextHopGwMac(mac);
	if (mac[0] != '\0'){
		int i = 0, j = 0;
		for (i = 0; i < 8; i ++){
			if (mac[i] != ':'){
				value[j] = toupper(mac[i]);
				j ++;
			}
		}
		value[j] = '\0';
	}
	else
		strcpy(value, "");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DT_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DT_Enable, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "1"); //always 1, device doesn't support to disable
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DT_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DT_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DT_Status(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DT_Status, value);
	if(ret)
	{
		return -1;
	}*/
	a_infinfo wanStatus;

	memset(&wanStatus, 0, sizeof(wanStatus));
	getInterfaceInfo("wan", &wanStatus);
	if (wanStatus.status == 1)
	{
		strcpy(value, "Synchronized"); 
	}
	else
	{
		strcpy(value, "Unsynchronized"); 
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DT_NTPServer1(char * path_name, char *value)
{
	int ret = 0;
	char ntpserverlist[4096] = {0};
	char ntpserver1[256] = {0};
	char ntpserver2[256] = {0};
	char ntpserver3[256] = {0};
	char ntpserver4[256] = {0};
	char ntpserver5[256] = {0};
	
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("system.ntp.server", ntpserverlist);
	if(ret)
	{
		return -1;
	}
	sscanf(ntpserverlist, "%s %s %s %s %s", ntpserver1, ntpserver2, ntpserver3, ntpserver4, ntpserver5);
	strcpy(value, ntpserver1);
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DT_NTPServer1(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (strlen(value) > 64)
		return -2;
	
	/*ret = do_uci_set(DT_NTPServer1, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	ret = updatentpserverlist(1, value);
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DT_NTPServer2(char * path_name, char *value)
{
	int ret = 0;
	char ntpserverlist[4096] = {0};
	char ntpserver1[256] = {0};
	char ntpserver2[256] = {0};
	char ntpserver3[256] = {0};
	char ntpserver4[256] = {0};
	char ntpserver5[256] = {0};
	
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("system.ntp.server", ntpserverlist);
	if(ret)
	{
		return -1;
	}
	sscanf(ntpserverlist, "%s %s %s %s %s", ntpserver1, ntpserver2, ntpserver3, ntpserver4, ntpserver5);
	strcpy(value, ntpserver2);
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DT_NTPServer2(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (strlen(value) > 64)
		return -2;
	
	/*ret = do_uci_set(DT_NTPServer2, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	ret = updatentpserverlist(2, value);
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DT_NTPServer3(char * path_name, char *value)
{
	int ret = 0;
	char ntpserverlist[4096] = {0};
	char ntpserver1[256] = {0};
	char ntpserver2[256] = {0};
	char ntpserver3[256] = {0};
	char ntpserver4[256] = {0};
	char ntpserver5[256] = {0};
	
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("system.ntp.server", ntpserverlist);
	if(ret)
	{
		return -1;
	}
	sscanf(ntpserverlist, "%s %s %s %s %s", ntpserver1, ntpserver2, ntpserver3, ntpserver4, ntpserver5);
	strcpy(value, ntpserver3);
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DT_NTPServer3(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (strlen(value) > 64)
		return -2;
	
	/*ret = do_uci_set(DT_NTPServer3, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	ret = updatentpserverlist(3, value);
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DT_NTPServer4(char * path_name, char *value)
{
	int ret = 0;
	char ntpserverlist[4096] = {0};
	char ntpserver1[256] = {0};
	char ntpserver2[256] = {0};
	char ntpserver3[256] = {0};
	char ntpserver4[256] = {0};
	char ntpserver5[256] = {0};
	
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("system.ntp.server", ntpserverlist);
	if(ret)
	{
		return -1;
	}
	sscanf(ntpserverlist, "%s %s %s %s %s", ntpserver1, ntpserver2, ntpserver3, ntpserver4, ntpserver5);
	strcpy(value, ntpserver4);
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DT_NTPServer4(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DT_NTPServer4, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/

	if (strlen(value) > 64)
		return -2;

	ret = updatentpserverlist(4, value);
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DT_NTPServer5(char * path_name, char *value)
{
	int ret = 0;
	char ntpserverlist[4096] = {0};
	char ntpserver1[256] = {0};
	char ntpserver2[256] = {0};
	char ntpserver3[256] = {0};
	char ntpserver4[256] = {0};
	char ntpserver5[256] = {0};
	
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("system.ntp.server", ntpserverlist);
	if(ret)
	{
		return -1;
	}
	sscanf(ntpserverlist, "%s %s %s %s %s", ntpserver1, ntpserver2, ntpserver3, ntpserver4, ntpserver5);
	strcpy(value, ntpserver5);
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DT_NTPServer5(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DT_NTPServer5, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/

	if (strlen(value) > 64)
		return -2;

	ret = updatentpserverlist(5, value);
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DT_CurrentLocalTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DT_CurrentLocalTime, value);
	if(ret)
	{
		return -1;
	}*/
	FILE *fp = NULL;
	char line[128] = {0};
	char *p = NULL;

    if ((fp = popen("date \"+%Y-%m-%dT%H:%M:%SZ\"", "r")) != NULL) {
		fgets(line, sizeof(line)-1, fp);
		if((p = strstr(line, "\n")) != NULL)
			*p = '\0';
        strcpy(value, line);
        pclose(fp);
    }
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DT_LocalTimeZone(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("system.system.timezone", value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DT_LocalTimeZone(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char cmd[64] = "";

	if (strlen(value) > 256)
		return -2;
	
	ret = do_uci_set("system.system.timezone", value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("system");
		if(ret)
		{
			return (-1);
		}
		sprintf(cmd, "echo \"%s\" > /tmp/TZ;", value);
		system(cmd);
		system("/etc/init.d/sysntpd restart");
		system("date -k"); 
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DU_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DU_Enable, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DU_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DU_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
		if (atoi(value) == 0)
			system("/etc/init.d/lighttpd stop &");
		else
			system("/etc/init.d/lighttpd start &");
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DU_PasswordRequired(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DU_PasswordRequired, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "1"); //always 1
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DU_PasswordRequired(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DU_PasswordRequired, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	// don't do anything, always 1
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DU_PasswordUserSelectable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DU_PasswordUserSelectable, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "0"); //always 0
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DU_PasswordReset(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DU_PasswordReset, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "0"); //always 0
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DU_PasswordReset(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DU_PasswordReset, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	if (atoi(value) == 1){
		FILE *fp = NULL;
		char line[128] = {0};
		int len = 0;
		int i = 0;
		int dohttp = 0;

		if ((fp = popen("uci -c /rom/etc/config get pwd.super_user.passwd", "r")) != NULL) { //super user
			fgets(line, sizeof(line), fp);
			len = strlen(line);
			for (i = 0; i<= len; i++){
				if (line[i] == '\n')
					line[i] = '\0';
			}
			pclose(fp);
			ret = do_uci_set("pwd.super_user.passwd", line);
			if(ret)
			{
				return (-1);
			}
			else
			{
				dohttp = 1;
			}
    	}

		if ((fp = popen("uci -c /rom/etc/config get pwd.manager.passwd", "r")) != NULL) { //manager user
			fgets(line, sizeof(line), fp);
			len = strlen(line);
			for (i = 0; i<= len; i++){
				if (line[i] == '\n')
					line[i] = '\0';
			}
			pclose(fp);
			ret = do_uci_set("pwd.manager.passwd", line);
			if(ret)
			{
				return (-1);
			}
			else
			{
				dohttp = 1;
			}
    	}

		if (dohttp == 1){
			ret = do_uci_commit("pwd");
			if(ret)
			{
				return (-1);
			}
			system("/etc/init.d/lighttpd restart &");
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DU_UpgradeAvailable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DU_UpgradeAvailable, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "0"); //always 0
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DU_UpgradeAvailable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DU_UpgradeAvailable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	// don't do anything, always 0
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DU_WarrantyDate(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DU_WarrantyDate, value);
	if(ret)
	{
		return -1;
	}
	if (strcmp(value, " ") == 0)
		strcpy(value, "0001-01-01T00:00:00Z");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DU_WarrantyDate(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DU_WarrantyDate, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DU_ISPName(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DU_ISPName, value);
	if(ret)
	{
		return -1;
	}
	if (strcmp(value, " ") == 0)
		strcpy(value, "");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DU_ISPName(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (strlen(value) > 64)
		return -2;
	
	ret = do_uci_set(DU_ISPName, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DU_ISPHelpDesk(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DU_ISPHelpDesk, value);
	if(ret)
	{
		return -1;
	}
	if (strcmp(value, " ") == 0)
		strcpy(value, "");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DU_ISPHelpDesk(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (strlen(value) > 32)
		return -2;
	
	ret = do_uci_set(DU_ISPHelpDesk, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DU_ISPHomePage(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DU_ISPHomePage, value);
	if(ret)
	{
		return -1;
	}
	if (strcmp(value, " ") == 0)
		strcpy(value, "");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DU_ISPHomePage(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (strlen(value) > 256)
		return -2;
	
	ret = do_uci_set(DU_ISPHomePage, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DU_ISPHelpPage(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DU_ISPHelpPage, value);
	if(ret)
	{
		return -1;
	}
	if (strcmp(value, " ") == 0)
		strcpy(value, "");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DU_ISPHelpPage(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (strlen(value) > 256)
		return -2;
	
	ret = do_uci_set(DU_ISPHelpPage, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DU_ISPLogo(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DU_ISPLogo, value);
	if(ret)
	{
		return -1;
	}
	if (strcmp(value, " ") == 0)
		strcpy(value, "");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DU_ISPLogo(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (strlen(value) > 256)
		return -2;
	
	ret = do_uci_set(DU_ISPLogo, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DU_ISPLogoSize(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DU_ISPLogoSize, value);
	if(ret)
	{
		return -1;
	}
	if (strcmp(value, " ") == 0)
		strcpy(value, "0");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DU_ISPLogoSize(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (atoi(value) < 0 || atoi(value) > 4095)
		return -2;
	
	ret = do_uci_set(DU_ISPLogoSize, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DU_ISPMailServer(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DU_ISPMailServer, value);
	if(ret)
	{
		return -1;
	}
	if (strcmp(value, " ") == 0)
		strcpy(value, "");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DU_ISPMailServer(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (strlen(value) > 256)
		return -2;
	
	ret = do_uci_set(DU_ISPMailServer, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DU_ISPNewsServer(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DU_ISPNewsServer, value);
	if(ret)
	{
		return -1;
	}
	if (strcmp(value, " ") == 0)
		strcpy(value, "");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DU_ISPNewsServer(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	
	if (strlen(value) > 256)
		return -2;
	
	ret = do_uci_set(DU_ISPNewsServer, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DU_TextColor(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DU_TextColor, value);
	if(ret)
	{
		return -1;
	}
	if (strcmp(value, " ") == 0)
		strcpy(value, "");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DU_TextColor(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (strlen(value) > 6)
		return -2;
	
	ret = do_uci_set(DU_TextColor, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DU_BackgroundColor(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DU_BackgroundColor, value);
	if(ret)
	{
		return -1;
	}
	if (strcmp(value, " ") == 0)
		strcpy(value, "");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DU_BackgroundColor(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (strlen(value) > 6)
		return -2;
	
	ret = do_uci_set(DU_BackgroundColor, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DU_ButtonColor(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DU_ButtonColor, value);
	if(ret)
	{
		return -1;
	}
	if (strcmp(value, " ") == 0)
		strcpy(value, "");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DU_ButtonColor(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (strlen(value) > 6)
		return -2;
	
	ret = do_uci_set(DU_ButtonColor, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DU_ButtonTextColor(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DU_ButtonTextColor, value);
	if(ret)
	{
		return -1;
	}
	if (strcmp(value, " ") == 0)
		strcpy(value, "");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DU_ButtonTextColor(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (strlen(value) > 6)
		return -2;
	
	ret = do_uci_set(DU_ButtonTextColor, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DU_AutoUpdateServer(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DU_AutoUpdateServer, value);
	if(ret)
	{
		return -1;
	}
	if (strcmp(value, " ") == 0)
		strcpy(value, "");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DU_AutoUpdateServer(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (strlen(value) > 256)
		return -2;
	
	ret = do_uci_set(DU_AutoUpdateServer, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DU_UserUpdateServer(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DU_UserUpdateServer, value);
	if(ret)
	{
		return -1;
	}
	if (strcmp(value, " ") == 0)
		strcpy(value, "");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DU_UserUpdateServer(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (strlen(value) > 256)
		return -2;
	
	ret = do_uci_set(DU_UserUpdateServer, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DU_AvailableLanguages(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("system.system.languages", value);
	if(ret)
	{
		strcpy(value, "en");
		ret = 0;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DU_AvailableLanguages(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DU_AvailableLanguages, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DU_CurrentLanguage(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("system.system.languages", value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DU_CurrentLanguage(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	//don't support to change the language
	/*ret = do_uci_set(DU_CurrentLanguage, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	if (strlen(value) > 16)
		return -2;

	if((strcmp(value, "en") != 0) && (strcmp(value, "zh-cn") != 0) && (strcmp(value, "zh-tw") != 0))
	{
		return (-1);
	}
	
	ret = do_uci_set("system.system.languages", value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("system");
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DUR_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(ADMIN_SYS_MISC_HTTP, value);
	if(ret)
	{
		strcpy(value, "0");
		ret = 0;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DUR_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	
	//ret = doRemoteAccess(atoi(value));
	//ret = setRemoteAccess(atoi(value));
	/*
	if(ret)
	{
		return (-1);
	}*/
	ret = do_uci_set(ADMIN_SYS_MISC_HTTP, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("lighttpd");
		if(ret)
		{
			return (-1);
		}
		setRemoteAccess2();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DUR_Port(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	int http = -1;
	int https = -1;
	char http_port[32] = {0};
	char https_port[32] = {0};
	
	http = do_uci_get(ADMIN_SYS_MISC_HTTP_PORT, http_port);
	https = do_uci_get(ADMIN_SYS_MISC_HTTPS_PORT, https_port);

	if (getRemoteAccessMode() == 0){ //http
		if (!http)
			sprintf(value, "%s", http_port);
		else
			sprintf(value, "%s", "8081");
	}
	else{ //https
		if (!https)
			sprintf(value, "%s", https_port);
		else
			sprintf(value, "%s", "8444");
	}

	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DUR_Port(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (atoi(value) < 0 || atoi(value) > 65535)
		return -2;

	if (atoi(value) == 80 || atoi(value) == 443)
		return -2;

	if (checkPortUsing(atoi(value)) == 1)
		return -2;

	if (getRemoteAccessMode() == 0) //http
		ret = do_uci_set(ADMIN_SYS_MISC_HTTP_PORT, value);
	else
		ret = do_uci_set(ADMIN_SYS_MISC_HTTPS_PORT, value); //HTTP
	
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("lighttpd");
		if(ret)
		{
			return (-1);
		}
		char tmp[16] = {0};
		do_uci_get(ADMIN_SYS_MISC_HTTP, tmp);
		//ret = setRemoteAccess(atoi(tmp));
		setRemoteAccess2();
	}
	
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DUR_SupportedProtocols(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	
	strcpy(value, "HTTP,HTTPS");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUR_Protocol(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (getRemoteAccessMode() == 0) //http
		strcpy(value, "HTTP");
	else
		strcpy(value, "HTTPS"); //HTTP

	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DUR_Protocol(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	int http = -1;
	int https = -1;
	char http_port[32] = {0};
	char https_port[32] = {0};

	if(strcasestr("HTTP, HTTPS", value) == NULL)
	{
		return (-2);
	}
	
	http = do_uci_get(ADMIN_SYS_MISC_HTTP_PORT, http_port);
	https = do_uci_get(ADMIN_SYS_MISC_HTTPS_PORT, https_port);

	if (!strcasecmp(value, "HTTP")){ //http
		do_uci_set(ADMIN_SYS_MISC_HTTP_MODE, "0");
		if (http) //set default value
			do_uci_set(ADMIN_SYS_MISC_HTTP_PORT, "8081");
		do_uci_delete(ADMIN_SYS_MISC_HTTPS_PORT, NULL);
	}
	else{ //https
		do_uci_set(ADMIN_SYS_MISC_HTTP_MODE, "1");
		if (https) //set default value
			do_uci_set(ADMIN_SYS_MISC_HTTPS_PORT, "8444");
		do_uci_delete(ADMIN_SYS_MISC_HTTP_PORT, NULL);
	}

	ret = do_uci_set(DUR_Protocol, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("lighttpd");
		if(ret)
		{
			return (-1);
		}
		char tmp[16] = {0};
		do_uci_get(ADMIN_SYS_MISC_HTTP, tmp);
		//ret = setRemoteAccess(atoi(tmp));
		setRemoteAccess2();
	}
	
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DUR_X_Charter_AllowSpecifiedIP(char * path_name, char *value)
{
	int ret = 0;
	char allow_ip[32] = {0};
	
	tr_log(LOG_DEBUG, "path_name[%s]", path_name);
	ret = do_uci_get(LOGIN_ALLOW_SPECIFIED_IP, value);
	if(ret){
		strcpy(value, "0");
		ret = 0;
	}
	
	tr_log(LOG_DEBUG, "get value [%s]", value);
	return ret;
}
int set_DUR_X_Charter_AllowSpecifiedIP(char * path_name, char *value)
{
	int ret = 0;
	
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(LOGIN_ALLOW_SPECIFIED_IP, value);
	if(ret)
		return -1;

	ret = do_uci_commit("system");
	if(ret)
		return -1;
	
	//char tmp[16] = {0};
	//do_uci_get(ADMIN_SYS_MISC_HTTP, tmp);
	//ret = setRemoteAccess(atoi(tmp));
	setRemoteAccess2();
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DUR_X_Charter_AllowedIpRanges(char * path_name, char *value)
{
	int ret = 0;
	char *p = NULL;
	
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LOGIN_ALLOWED_IP, value);
	if(ret){
		strcpy(value, "");
		ret = 0;
		return ret;
	}
	p = value;
	while(*p != '\0'){
		if(*p == ' ')
			*p = ',';
		p++;
	}
	
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DUR_X_Charter_AllowedIpRanges(char * path_name, char *value)
{
	int ret = 0;
	char ipranges[128] = {0};
	int j;
	char *str;
	char *token;
	char *saveptr1;
	char *ptr = NULL;
	char ipstart[32] = {0};
	
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	do_uci_delete(LOGIN_ALLOWED_IP, NULL);

	strncpy(ipranges, value, sizeof(ipranges));
	ipranges[sizeof(ipranges)-1] = 0;
	
	for (j = 1, str = ipranges; ; j++, str = NULL) {
		token = strtok_r(str, ",", &saveptr1);
		tr_log(LOG_DEBUG,"token[%s]",token);
		if (token == NULL)
			break;

		if((ptr = strchr(token, '-')) != NULL)
		{
			strncpy(ipstart, token, ptr-token);
			if ((isValidIP(ipstart) == 0) || (isValidIP(ptr+1) == 0))
			{
				return -2;
			}
		}
		else
		{
			if (isValidIP(token) == 0)
				return -2;
		}
	}

	strcpy(ipranges, value);
	for (j = 1, str = ipranges; ; j++, str = NULL) {
		token = strtok_r(str, ",", &saveptr1);
		if (token == NULL)
			break;
		if(do_uci_add_list(LOGIN_ALLOWED_IP, token))
			return -1;
	}

	ret = do_uci_commit("system");
	if(ret)
		return (-1);
	char tmp[16] = {0};
	do_uci_get(ADMIN_SYS_MISC_HTTP, tmp);
	//ret = setRemoteAccess(atoi(tmp));
	setRemoteAccess2();
	do_uci_get(LOGIN_ALLOWED_IP, ipranges);
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DUR_X_Charter_MaxAllowedIpRangeNumber(char * path_name, char *value)
{
	int ret = 0;
	
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	strcpy(value, "4"); // web gui show max number 4.
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUL_Movable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUL_Movable, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DUL_Movable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DUL_Movable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DUL_Resizable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUL_Resizable, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DUL_Resizable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DUL_Resizable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DUL_PosX(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUL_PosX, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DUL_PosX(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DUL_PosX, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DUL_PosY(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUL_PosY, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DUL_PosY(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DUL_PosY, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DUL_Width(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUL_Width, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DUL_Width(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DUL_Width, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DUL_Height(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUL_Height, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DUL_Height(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DUL_Height, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DUL_DisplayWidth(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUL_DisplayWidth, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUL_DisplayHeight(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUL_DisplayHeight, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUX_X_Charter_ManagerPassword(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUCP_X_Charter_ManagerPassword, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"coral################## get value [%s]",value);
	return ret;
}
int set_DUX_X_Charter_ManagerPassword(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DUCP_X_Charter_ManagerPassword, value);
	if(ret)
	{
		return -1;
	}
	else
	{
		ret = do_uci_commit(DUCP_X_Charter_ManagerPassword);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"coral##################get value [%s]",value);
	return ret;
}
int get_DUX_X_Charter_SuperPassword(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUCP_X_Charter_ManagerPassword, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"coral################## get value [%s]",value);
	return ret;
}
int set_DUX_X_Charter_SuperPassword(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DUCP_X_Charter_SuperPassword, value);
	if(ret)
	{
		return -1;
	}
	else
	{
		ret = do_uci_commit(DUCP_X_Charter_SuperPassword);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"coral##################get value [%s]",value);
	return ret;
}
int get_DIt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIt_Alias, value);
	if(ret)
	{
		return -1;
	}*/
	ret = 1; //getting from tr.xml
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (!isalpha(value[0]))
		return -2;
	
	if (strlen(value) > 64)
		return -2;
	
	/*ret = do_uci_set(DIt_Alias, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//set to tr.xml
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIt_HigherLayer(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIt_HigherLayer, value);
	if(ret)
	{
		return -1;
	}*/
	char str[256] = {0};
	int i = 0;
	char *index = parseTemplate(path_name, ".InterfaceStack.");

	if (index != NULL){
		ret = lib_getvalue_mapfile_byinstance(InterfaceStackMap, str, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			for (i = 0; i < strlen(str); i ++){
				if (str[i] == '|')
					str[i] = ' ';
			}
			sscanf(str, "%*s %s %*s", value);
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIt_LowerLayer(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIt_LowerLayer, value);
	if(ret)
	{
		return -1;
	}*/
	char str[256] = {0};
	int i = 0;
	char *index = parseTemplate(path_name, ".InterfaceStack.");

	if (index != NULL){
		ret = lib_getvalue_mapfile_byinstance(InterfaceStackMap, str, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			for (i = 0; i < strlen(str); i ++){
				if (str[i] == '|')
					str[i] = ' ';
			}
			sscanf(str, "%*s %*s %s %*s", value);
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIt_HigherAlias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIt_HigherAlias, value);
	if(ret)
	{
		return -1;
	}*/
	char str[256] = {0};
	int i = 0;
	char *index = parseTemplate(path_name, ".InterfaceStack.");

	if (index != NULL){
		ret = lib_getvalue_mapfile_byinstance(InterfaceStackMap, str, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			for (i = 0; i < strlen(str); i ++){
				if (str[i] == '|')
					str[i] = ' ';
			}
			sscanf(str, "%*s %*s %*s %s %*s", value);
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIt_LowerAlias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIt_LowerAlias, value);
	if(ret)
	{
		return -1;
	}*/
	char str[256] = {0};
	char *p = NULL;
	int i = 0;
	char *index = parseTemplate(path_name, ".InterfaceStack.");

	if (index != NULL){
		ret = lib_getvalue_mapfile_byinstance(InterfaceStackMap, str, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			for (i = 0; i < strlen(str); i ++){
				if (str[i] == '|')
					str[i] = ' ';
			}
			sscanf(str, "%*s %*s %*s %*s %s", value);
			p = strchr(value, '\n');
			if(p != NULL)
			{
				*p = '\0';
			}
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DD_LineNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DD_LineNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DD_ChannelNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DD_ChannelNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DD_BondingGroupNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DD_BondingGroupNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDLt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLt_Enable, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDLt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDLt_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDLt_EnableDataGathering(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLt_EnableDataGathering, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDLt_EnableDataGathering(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDLt_EnableDataGathering, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDLt_Status(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLt_Status, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDLt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLt_Alias, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDLt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDLt_Alias, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDLt_Name(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLt_Name, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDLt_LastChange(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLt_LastChange, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDLt_LowerLayers(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLt_LowerLayers, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDLt_LowerLayers(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDLt_LowerLayers, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDLt_Upstream(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLt_Upstream, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDLt_FirmwareVersion(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLt_FirmwareVersion, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDLt_LinkStatus(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLt_LinkStatus, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDLt_StandardsSupported(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLt_StandardsSupported, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDLt_XTSE(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLt_XTSE, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDLt_StandardUsed(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLt_StandardUsed, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDLt_XTSUsed(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLt_XTSUsed, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDLt_LineEncoding(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLt_LineEncoding, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDLt_AllowedProfiles(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLt_AllowedProfiles, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDLt_CurrentProfile(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLt_CurrentProfile, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDLt_PowerManagementState(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLt_PowerManagementState, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDLt_SuccessFailureCause(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLt_SuccessFailureCause, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDLt_UPBOKLER(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLt_UPBOKLER, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDLt_UPBOKLEPb(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLt_UPBOKLEPb, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDLt_UPBOKLERPb(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLt_UPBOKLERPb, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDLt_RXTHRSHds(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLt_RXTHRSHds, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDLt_ACTRAMODEds(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLt_ACTRAMODEds, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDLt_ACTRAMODEus(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLt_ACTRAMODEus, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDLt_ACTINPROCds(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLt_ACTINPROCds, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDLt_ACTINPROCus(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLt_ACTINPROCus, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDLt_SNRMROCds(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLt_SNRMROCds, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDLt_SNRMROCus(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLt_SNRMROCus, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDLt_LastStateTransmittedDownstream(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLt_LastStateTransmittedDownstream, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDLt_LastStateTransmittedUpstream(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLt_LastStateTransmittedUpstream, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDLt_UPBOKLE(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLt_UPBOKLE, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDLt_MREFPSDds(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLt_MREFPSDds, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDLt_MREFPSDus(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLt_MREFPSDus, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDLt_LIMITMASK(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLt_LIMITMASK, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDLt_US0MASK(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLt_US0MASK, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDLt_TRELLISds(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLt_TRELLISds, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDLt_TRELLISus(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLt_TRELLISus, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDLt_ACTSNRMODEds(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLt_ACTSNRMODEds, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDLt_ACTSNRMODEus(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLt_ACTSNRMODEus, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDLt_VirtualNoisePSDds(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLt_VirtualNoisePSDds, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDLt_VirtualNoisePSDus(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLt_VirtualNoisePSDus, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDLt_ACTUALCE(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLt_ACTUALCE, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDLt_LineNumber(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLt_LineNumber, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDLt_UpstreamMaxBitRate(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLt_UpstreamMaxBitRate, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDLt_DownstreamMaxBitRate(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLt_DownstreamMaxBitRate, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDLt_UpstreamNoiseMargin(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLt_UpstreamNoiseMargin, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDLt_DownstreamNoiseMargin(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLt_DownstreamNoiseMargin, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDLt_SNRMpbus(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLt_SNRMpbus, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDLt_SNRMpbds(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLt_SNRMpbds, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDLt_INMIATOds(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLt_INMIATOds, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDLt_INMIATSds(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLt_INMIATSds, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDLt_INMCCds(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLt_INMCCds, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDLt_INMINPEQMODEds(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLt_INMINPEQMODEds, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDLt_UpstreamAttenuation(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLt_UpstreamAttenuation, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDLt_DownstreamAttenuation(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLt_DownstreamAttenuation, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDLt_UpstreamPower(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLt_UpstreamPower, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDLt_DownstreamPower(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLt_DownstreamPower, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDLt_XTURVendor(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLt_XTURVendor, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDLt_XTURCountry(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLt_XTURCountry, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDLt_XTURANSIStd(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLt_XTURANSIStd, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDLt_XTURANSIRev(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLt_XTURANSIRev, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDLt_XTUCVendor(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLt_XTUCVendor, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDLt_XTUCCountry(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLt_XTUCCountry, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDLt_XTUCANSIStd(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLt_XTUCANSIStd, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDLt_XTUCANSIRev(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLt_XTUCANSIRev, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDLtD_LoggingDepthR(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLtD_LoggingDepthR, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDLtD_LoggingDepthR(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDLtD_LoggingDepthR, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDLtD_ActLoggingDepthReportingR(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLtD_ActLoggingDepthReportingR, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDLtD_ActLoggingDepthReportingR(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDLtD_ActLoggingDepthReportingR, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDLtD_EventTraceBufferR(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLtD_EventTraceBufferR, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDLtD_EventTraceBufferR(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDLtD_EventTraceBufferR, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDLtS_BytesSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLtS_BytesSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDLtS_BytesSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDLtS_BytesSent, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDLtS_BytesReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLtS_BytesReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDLtS_BytesReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDLtS_BytesReceived, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDLtS_PacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLtS_PacketsSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDLtS_PacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDLtS_PacketsSent, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDLtS_PacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLtS_PacketsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDLtS_PacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDLtS_PacketsReceived, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDLtS_ErrorsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLtS_ErrorsSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDLtS_ErrorsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDLtS_ErrorsSent, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDLtS_ErrorsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLtS_ErrorsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDLtS_ErrorsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDLtS_ErrorsReceived, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDLtS_DiscardPacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLtS_DiscardPacketsSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDLtS_DiscardPacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDLtS_DiscardPacketsSent, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDLtS_DiscardPacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLtS_DiscardPacketsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDLtS_DiscardPacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDLtS_DiscardPacketsReceived, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDLtS_TotalStart(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLtS_TotalStart, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDLtS_TotalStart(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDLtS_TotalStart, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDLtS_ShowtimeStart(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLtS_ShowtimeStart, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDLtS_ShowtimeStart(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDLtS_ShowtimeStart, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDLtS_LastShowtimeStart(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLtS_LastShowtimeStart, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDLtS_LastShowtimeStart(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDLtS_LastShowtimeStart, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDLtS_CurrentDayStart(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLtS_CurrentDayStart, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDLtS_CurrentDayStart(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDLtS_CurrentDayStart, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDLtS_QuarterHourStart(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLtS_QuarterHourStart, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDLtS_QuarterHourStart(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDLtS_QuarterHourStart, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDLtST_ErroredSecs(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLtST_ErroredSecs, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDLtST_ErroredSecs(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDLtST_ErroredSecs, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDLtST_SeverelyErroredSecs(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLtST_SeverelyErroredSecs, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDLtST_SeverelyErroredSecs(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDLtST_SeverelyErroredSecs, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDLtSS_ErroredSecs(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLtSS_ErroredSecs, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDLtSS_ErroredSecs(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDLtSS_ErroredSecs, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDLtSS_SeverelyErroredSecs(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLtSS_SeverelyErroredSecs, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDLtSS_SeverelyErroredSecs(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDLtSS_SeverelyErroredSecs, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDLtSL_ErroredSecs(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLtSL_ErroredSecs, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDLtSL_ErroredSecs(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDLtSL_ErroredSecs, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDLtSL_SeverelyErroredSecs(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLtSL_SeverelyErroredSecs, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDLtSL_SeverelyErroredSecs(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDLtSL_SeverelyErroredSecs, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDLtSC_ErroredSecs(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLtSC_ErroredSecs, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDLtSC_ErroredSecs(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDLtSC_ErroredSecs, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDLtSC_SeverelyErroredSecs(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLtSC_SeverelyErroredSecs, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDLtSC_SeverelyErroredSecs(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDLtSC_SeverelyErroredSecs, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDLtSQ_ErroredSecs(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLtSQ_ErroredSecs, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDLtSQ_ErroredSecs(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDLtSQ_ErroredSecs, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDLtSQ_SeverelyErroredSecs(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLtSQ_SeverelyErroredSecs, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDLtSQ_SeverelyErroredSecs(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDLtSQ_SeverelyErroredSecs, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDLtT_HLOGGds(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLtT_HLOGGds, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDLtT_HLOGGds(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDLtT_HLOGGds, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDLtT_HLOGGus(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLtT_HLOGGus, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDLtT_HLOGGus(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDLtT_HLOGGus, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDLtT_HLOGpsds(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLtT_HLOGpsds, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDLtT_HLOGpsds(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDLtT_HLOGpsds, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDLtT_HLOGpsus(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLtT_HLOGpsus, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDLtT_HLOGpsus(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDLtT_HLOGpsus, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDLtT_HLOGMTds(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLtT_HLOGMTds, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDLtT_HLOGMTds(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDLtT_HLOGMTds, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDLtT_HLOGMTus(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLtT_HLOGMTus, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDLtT_HLOGMTus(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDLtT_HLOGMTus, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDLtT_QLNGds(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLtT_QLNGds, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDLtT_QLNGds(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDLtT_QLNGds, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDLtT_QLNGus(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLtT_QLNGus, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDLtT_QLNGus(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDLtT_QLNGus, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDLtT_QLNpsds(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLtT_QLNpsds, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDLtT_QLNpsds(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDLtT_QLNpsds, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDLtT_QLNpsus(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLtT_QLNpsus, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDLtT_QLNpsus(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDLtT_QLNpsus, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDLtT_QLNMTds(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLtT_QLNMTds, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDLtT_QLNMTds(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDLtT_QLNMTds, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDLtT_QLNMTus(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLtT_QLNMTus, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDLtT_QLNMTus(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDLtT_QLNMTus, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDLtT_SNRGds(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLtT_SNRGds, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDLtT_SNRGds(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDLtT_SNRGds, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDLtT_SNRGus(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLtT_SNRGus, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDLtT_SNRGus(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDLtT_SNRGus, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDLtT_SNRpsds(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLtT_SNRpsds, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDLtT_SNRpsds(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDLtT_SNRpsds, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDLtT_SNRpsus(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLtT_SNRpsus, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDLtT_SNRpsus(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDLtT_SNRpsus, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDLtT_SNRMTds(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLtT_SNRMTds, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDLtT_SNRMTds(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDLtT_SNRMTds, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDLtT_SNRMTus(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLtT_SNRMTus, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDLtT_SNRMTus(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDLtT_SNRMTus, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDLtT_LATNds(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLtT_LATNds, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDLtT_LATNds(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDLtT_LATNds, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDLtT_LATNus(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLtT_LATNus, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDLtT_LATNus(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDLtT_LATNus, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDLtT_SATNds(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLtT_SATNds, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDLtT_SATNds(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDLtT_SATNds, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDLtT_SATNus(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDLtT_SATNus, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDLtT_SATNus(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDLtT_SATNus, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDCt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDCt_Enable, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDCt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDCt_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDCt_Status(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDCt_Status, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDCt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDCt_Alias, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDCt_Name(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDCt_Name, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDCt_LastChange(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDCt_LastChange, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDCt_LowerLayers(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDCt_LowerLayers, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDCt_LinkEncapsulationSupported(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDCt_LinkEncapsulationSupported, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDCt_LinkEncapsulationUsed(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDCt_LinkEncapsulationUsed, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDCt_LPATH(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDCt_LPATH, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDCt_INTLVDEPTH(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDCt_INTLVDEPTH, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDCt_INTLVBLOCK(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDCt_INTLVBLOCK, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDCt_ActualInterleavingDelay(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDCt_ActualInterleavingDelay, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDCt_ACTINP(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDCt_ACTINP, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDCt_INPREPORT(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDCt_INPREPORT, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDCt_NFEC(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDCt_NFEC, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDCt_RFEC(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDCt_RFEC, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDCt_LSYMB(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDCt_LSYMB, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDCt_UpstreamCurrRate(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDCt_UpstreamCurrRate, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDCt_DownstreamCurrRate(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDCt_DownstreamCurrRate, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDCt_ACTNDR(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDCt_ACTNDR, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDCt_ACTINPREIN(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDCt_ACTINPREIN, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDCtS_BytesSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDCtS_BytesSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDCtS_BytesReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDCtS_BytesReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDCtS_PacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDCtS_PacketsSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDCtS_PacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDCtS_PacketsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDCtS_ErrorsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDCtS_ErrorsSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDCtS_ErrorsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDCtS_ErrorsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDCtS_DiscardPacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDCtS_DiscardPacketsSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDCtS_DiscardPacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDCtS_DiscardPacketsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDCtS_TotalStart(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDCtS_TotalStart, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDCtS_ShowtimeStart(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDCtS_ShowtimeStart, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDCtS_LastShowtimeStart(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDCtS_LastShowtimeStart, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDCtS_CurrentDayStart(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDCtS_CurrentDayStart, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDCtS_QuarterHourStart(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDCtS_QuarterHourStart, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDCtST_XTURFECErrors(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDCtST_XTURFECErrors, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDCtST_XTURFECErrors(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDCtST_XTURFECErrors, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDCtST_XTUCFECErrors(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDCtST_XTUCFECErrors, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDCtST_XTUCFECErrors(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDCtST_XTUCFECErrors, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDCtST_XTURHECErrors(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDCtST_XTURHECErrors, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDCtST_XTURHECErrors(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDCtST_XTURHECErrors, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDCtST_XTUCHECErrors(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDCtST_XTUCHECErrors, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDCtST_XTUCHECErrors(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDCtST_XTUCHECErrors, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDCtST_XTURCRCErrors(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDCtST_XTURCRCErrors, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDCtST_XTURCRCErrors(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDCtST_XTURCRCErrors, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDCtST_XTUCCRCErrors(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDCtST_XTUCCRCErrors, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDCtST_XTUCCRCErrors(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDCtST_XTUCCRCErrors, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDCtSS_XTURFECErrors(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDCtSS_XTURFECErrors, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDCtSS_XTURFECErrors(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDCtSS_XTURFECErrors, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDCtSS_XTUCFECErrors(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDCtSS_XTUCFECErrors, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDCtSS_XTUCFECErrors(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDCtSS_XTUCFECErrors, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDCtSS_XTURHECErrors(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDCtSS_XTURHECErrors, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDCtSS_XTURHECErrors(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDCtSS_XTURHECErrors, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDCtSS_XTUCHECErrors(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDCtSS_XTUCHECErrors, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDCtSS_XTUCHECErrors(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDCtSS_XTUCHECErrors, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDCtSS_XTURCRCErrors(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDCtSS_XTURCRCErrors, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDCtSS_XTURCRCErrors(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDCtSS_XTURCRCErrors, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDCtSS_XTUCCRCErrors(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDCtSS_XTUCCRCErrors, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDCtSS_XTUCCRCErrors(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDCtSS_XTUCCRCErrors, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDCtSL_XTURFECErrors(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDCtSL_XTURFECErrors, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDCtSL_XTURFECErrors(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDCtSL_XTURFECErrors, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDCtSL_XTUCFECErrors(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDCtSL_XTUCFECErrors, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDCtSL_XTUCFECErrors(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDCtSL_XTUCFECErrors, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDCtSL_XTURHECErrors(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDCtSL_XTURHECErrors, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDCtSL_XTURHECErrors(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDCtSL_XTURHECErrors, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDCtSL_XTUCHECErrors(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDCtSL_XTUCHECErrors, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDCtSL_XTUCHECErrors(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDCtSL_XTUCHECErrors, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDCtSL_XTURCRCErrors(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDCtSL_XTURCRCErrors, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDCtSL_XTURCRCErrors(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDCtSL_XTURCRCErrors, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDCtSL_XTUCCRCErrors(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDCtSL_XTUCCRCErrors, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDCtSL_XTUCCRCErrors(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDCtSL_XTUCCRCErrors, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDCtSC_XTURFECErrors(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDCtSC_XTURFECErrors, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDCtSC_XTURFECErrors(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDCtSC_XTURFECErrors, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDCtSC_XTUCFECErrors(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDCtSC_XTUCFECErrors, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDCtSC_XTUCFECErrors(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDCtSC_XTUCFECErrors, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDCtSC_XTURHECErrors(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDCtSC_XTURHECErrors, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDCtSC_XTURHECErrors(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDCtSC_XTURHECErrors, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDCtSC_XTUCHECErrors(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDCtSC_XTUCHECErrors, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDCtSC_XTUCHECErrors(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDCtSC_XTUCHECErrors, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDCtSC_XTURCRCErrors(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDCtSC_XTURCRCErrors, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDCtSC_XTURCRCErrors(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDCtSC_XTURCRCErrors, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDCtSC_XTUCCRCErrors(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDCtSC_XTUCCRCErrors, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDCtSC_XTUCCRCErrors(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDCtSC_XTUCCRCErrors, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDCtSQ_XTURFECErrors(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDCtSQ_XTURFECErrors, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDCtSQ_XTURFECErrors(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDCtSQ_XTURFECErrors, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDCtSQ_XTUCFECErrors(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDCtSQ_XTUCFECErrors, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDCtSQ_XTUCFECErrors(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDCtSQ_XTUCFECErrors, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDCtSQ_XTURHECErrors(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDCtSQ_XTURHECErrors, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDCtSQ_XTURHECErrors(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDCtSQ_XTURHECErrors, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDCtSQ_XTUCHECErrors(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDCtSQ_XTUCHECErrors, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDCtSQ_XTUCHECErrors(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDCtSQ_XTUCHECErrors, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDCtSQ_XTURCRCErrors(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDCtSQ_XTURCRCErrors, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDCtSQ_XTURCRCErrors(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDCtSQ_XTURCRCErrors, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDCtSQ_XTUCCRCErrors(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDCtSQ_XTUCCRCErrors, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDCtSQ_XTUCCRCErrors(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDCtSQ_XTUCCRCErrors, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDBt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDBt_Enable, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDBt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDBt_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDBt_Status(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDBt_Status, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDBt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDBt_Alias, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDBt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDBt_Alias, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDBt_Name(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDBt_Name, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDBt_LastChange(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDBt_LastChange, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDBt_LowerLayers(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDBt_LowerLayers, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDBt_GroupStatus(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDBt_GroupStatus, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDBt_GroupID(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDBt_GroupID, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDBt_BondSchemesSupported(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDBt_BondSchemesSupported, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDBt_BondScheme(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDBt_BondScheme, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDBt_GroupCapacity(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDBt_GroupCapacity, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDBt_RunningTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDBt_RunningTime, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDBt_TargetUpRate(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDBt_TargetUpRate, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDBt_TargetDownRate(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDBt_TargetDownRate, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDBt_ThreshLowUpRate(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDBt_ThreshLowUpRate, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDBt_ThreshLowDownRate(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDBt_ThreshLowDownRate, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDBt_UpstreamDifferentialDelayTolerance(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDBt_UpstreamDifferentialDelayTolerance, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDBt_DownstreamDifferentialDelayTolerance(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDBt_DownstreamDifferentialDelayTolerance, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDBt_BondedChannelNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDBt_BondedChannelNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDBtBt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDBtBt_Alias, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDBtBt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDBtBt_Alias, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDBtBt_Channel(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDBtBt_Channel, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDBtBtES_UnderflowErrorsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDBtBtES_UnderflowErrorsSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDBtBtES_CRCErrorsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDBtBtES_CRCErrorsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDBtBtES_AlignmentErrorsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDBtBtES_AlignmentErrorsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDBtBtES_ShortPacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDBtBtES_ShortPacketsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDBtBtES_LongPacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDBtBtES_LongPacketsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDBtBtES_OverflowErrorsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDBtBtES_OverflowErrorsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDBtBtES_PauseFramesReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDBtBtES_PauseFramesReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDBtBtES_FramesDropped(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDBtBtES_FramesDropped, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDBtS_BytesSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDBtS_BytesSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDBtS_BytesReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDBtS_BytesReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDBtS_PacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDBtS_PacketsSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDBtS_PacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDBtS_PacketsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDBtS_ErrorsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDBtS_ErrorsSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDBtS_ErrorsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDBtS_ErrorsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDBtS_UnicastPacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDBtS_UnicastPacketsSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDBtS_UnicastPacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDBtS_UnicastPacketsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDBtS_DiscardPacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDBtS_DiscardPacketsSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDBtS_DiscardPacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDBtS_DiscardPacketsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDBtS_MulticastPacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDBtS_MulticastPacketsSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDBtS_MulticastPacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDBtS_MulticastPacketsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDBtS_BroadcastPacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDBtS_BroadcastPacketsSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDBtS_BroadcastPacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDBtS_BroadcastPacketsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDBtS_UnknownProtoPacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDBtS_UnknownProtoPacketsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDBtS_TotalStart(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDBtS_TotalStart, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDBtS_CurrentDayStart(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDBtS_CurrentDayStart, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDBtS_QuarterHourStart(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDBtS_QuarterHourStart, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDBtST_FailureReasons(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDBtST_FailureReasons, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDBtST_UpstreamRate(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDBtST_UpstreamRate, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDBtST_DownstreamRate(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDBtST_DownstreamRate, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDBtST_UpstreamPacketLoss(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDBtST_UpstreamPacketLoss, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDBtST_DownstreamPacketLoss(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDBtST_DownstreamPacketLoss, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDBtST_UpstreamDifferentialDelay(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDBtST_UpstreamDifferentialDelay, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDBtST_DownstreamDifferentialDelay(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDBtST_DownstreamDifferentialDelay, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDBtST_FailureCount(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDBtST_FailureCount, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDBtST_ErroredSeconds(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDBtST_ErroredSeconds, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDBtST_SeverelyErroredSeconds(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDBtST_SeverelyErroredSeconds, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDBtST_UnavailableSeconds(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDBtST_UnavailableSeconds, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDBtSC_FailureReasons(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDBtSC_FailureReasons, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDBtSC_UpstreamRate(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDBtSC_UpstreamRate, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDBtSC_DownstreamRate(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDBtSC_DownstreamRate, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDBtSC_UpstreamPacketLoss(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDBtSC_UpstreamPacketLoss, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDBtSC_DownstreamPacketLoss(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDBtSC_DownstreamPacketLoss, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDBtSC_UpstreamDifferentialDelay(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDBtSC_UpstreamDifferentialDelay, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDBtSC_DownstreamDifferentialDelay(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDBtSC_DownstreamDifferentialDelay, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDBtSC_FailureCount(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDBtSC_FailureCount, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDBtSC_ErroredSeconds(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDBtSC_ErroredSeconds, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDBtSC_SeverelyErroredSeconds(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDBtSC_SeverelyErroredSeconds, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDBtSC_UnavailableSeconds(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDBtSC_UnavailableSeconds, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDBtSQ_FailureReasons(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDBtSQ_FailureReasons, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDBtSQ_UpstreamRate(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDBtSQ_UpstreamRate, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDBtSQ_DownstreamRate(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDBtSQ_DownstreamRate, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDBtSQ_UpstreamPacketLoss(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDBtSQ_UpstreamPacketLoss, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDBtSQ_DownstreamPacketLoss(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDBtSQ_DownstreamPacketLoss, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDBtSQ_UpstreamDifferentialDelay(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDBtSQ_UpstreamDifferentialDelay, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDBtSQ_DownstreamDifferentialDelay(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDBtSQ_DownstreamDifferentialDelay, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDBtSQ_FailureCount(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDBtSQ_FailureCount, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDBtSQ_ErroredSeconds(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDBtSQ_ErroredSeconds, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDBtSQ_SeverelyErroredSeconds(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDBtSQ_SeverelyErroredSeconds, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDBtSQ_UnavailableSeconds(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDBtSQ_UnavailableSeconds, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDBtES_PAFErrors(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDBtES_PAFErrors, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDBtES_PAFSmallFragments(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDBtES_PAFSmallFragments, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDBtES_PAFLargeFragments(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDBtES_PAFLargeFragments, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDBtES_PAFBadFragments(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDBtES_PAFBadFragments, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDBtES_PAFLostFragments(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDBtES_PAFLostFragments, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDBtES_PAFLateFragments(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDBtES_PAFLateFragments, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDBtES_PAFLostStarts(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDBtES_PAFLostStarts, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDBtES_PAFLostEnds(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDBtES_PAFLostEnds, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDBtES_PAFOverflows(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDBtES_PAFOverflows, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDBtES_PauseFramesSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDBtES_PauseFramesSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDBtES_CRCErrorsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDBtES_CRCErrorsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDBtES_AlignmentErrorsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDBtES_AlignmentErrorsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDBtES_ShortPacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDBtES_ShortPacketsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDBtES_LongPacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDBtES_LongPacketsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDBtES_OverflowErrorsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDBtES_OverflowErrorsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDBtES_FramesDropped(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDBtES_FramesDropped, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDDA_DiagnosticsState(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDDA_DiagnosticsState, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDDA_DiagnosticsState(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDDA_DiagnosticsState, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDDA_Interface(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDDA_Interface, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDDA_Interface(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDDA_Interface, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDDA_ACTPSDds(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDDA_ACTPSDds, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDDA_ACTPSDus(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDDA_ACTPSDus, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDDA_ACTATPds(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDDA_ACTATPds, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDDA_ACTATPus(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDDA_ACTATPus, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDDA_HLINSCds(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDDA_HLINSCds, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDDA_HLINSCus(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDDA_HLINSCus, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDDA_HLINGds(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDDA_HLINGds, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDDA_HLINGus(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDDA_HLINGus, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDDA_HLOGGds(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDDA_HLOGGds, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDDA_HLOGGus(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDDA_HLOGGus, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDDA_HLOGpsds(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDDA_HLOGpsds, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDDA_HLOGpsus(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDDA_HLOGpsus, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDDA_HLOGMTds(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDDA_HLOGMTds, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDDA_HLOGMTus(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDDA_HLOGMTus, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDDA_LATNpbds(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDDA_LATNpbds, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDDA_LATNpbus(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDDA_LATNpbus, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDDA_SATNds(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDDA_SATNds, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDDA_SATNus(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDDA_SATNus, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDDA_HLINpsds(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDDA_HLINpsds, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDDA_HLINpsus(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDDA_HLINpsus, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDDA_QLNGds(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDDA_QLNGds, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDDA_QLNGus(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDDA_QLNGus, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDDA_QLNpsds(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDDA_QLNpsds, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDDA_QLNpsus(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDDA_QLNpsus, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDDA_QLNMTds(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDDA_QLNMTds, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDDA_QLNMTus(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDDA_QLNMTus, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDDA_SNRGds(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDDA_SNRGds, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDDA_SNRGus(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDDA_SNRGus, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDDA_SNRpsds(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDDA_SNRpsds, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDDA_SNRpsus(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDDA_SNRpsus, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDDA_SNRMTds(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDDA_SNRMTds, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDDA_SNRMTus(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDDA_SNRMTus, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDDA_BITSpsds(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDDA_BITSpsds, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDDA_BITSpsus(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDDA_BITSpsus, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DO_InterfaceNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DO_InterfaceNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DOIt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DOIt_Enable, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DOIt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DOIt_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DOIt_Status(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DOIt_Status, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DOIt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DOIt_Alias, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DOIt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DOIt_Alias, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DOIt_Name(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DOIt_Name, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DOIt_LastChange(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DOIt_LastChange, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DOIt_LowerLayers(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DOIt_LowerLayers, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DOIt_LowerLayers(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DOIt_LowerLayers, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DOIt_Upstream(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DOIt_Upstream, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DOIt_OpticalSignalLevel(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DOIt_OpticalSignalLevel, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DOIt_LowerOpticalThreshold(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DOIt_LowerOpticalThreshold, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DOIt_UpperOpticalThreshold(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DOIt_UpperOpticalThreshold, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DOIt_TransmitOpticalLevel(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DOIt_TransmitOpticalLevel, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DOIt_LowerTransmitPowerThreshold(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DOIt_LowerTransmitPowerThreshold, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DOIt_UpperTransmitPowerThreshold(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DOIt_UpperTransmitPowerThreshold, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DOItS_BytesSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DOItS_BytesSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DOItS_BytesReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DOItS_BytesReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DOItS_PacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DOItS_PacketsSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DOItS_PacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DOItS_PacketsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DOItS_ErrorsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DOItS_ErrorsSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DOItS_ErrorsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DOItS_ErrorsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DOItS_DiscardPacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DOItS_DiscardPacketsSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DOItS_DiscardPacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DOItS_DiscardPacketsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DA_LinkNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DA_LinkNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DALt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DALt_Enable, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DALt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DALt_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DALt_Status(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DALt_Status, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DALt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DALt_Alias, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DALt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DALt_Alias, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DALt_Name(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DALt_Name, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DALt_LastChange(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DALt_LastChange, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DALt_LowerLayers(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DALt_LowerLayers, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DALt_LowerLayers(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DALt_LowerLayers, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DALt_LinkType(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DALt_LinkType, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DALt_LinkType(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DALt_LinkType, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DALt_AutoConfig(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DALt_AutoConfig, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DALt_DestinationAddress(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DALt_DestinationAddress, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DALt_DestinationAddress(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DALt_DestinationAddress, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DALt_Encapsulation(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DALt_Encapsulation, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DALt_Encapsulation(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DALt_Encapsulation, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DALt_FCSPreserved(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DALt_FCSPreserved, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DALt_FCSPreserved(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DALt_FCSPreserved, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DALt_VCSearchList(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DALt_VCSearchList, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DALt_VCSearchList(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DALt_VCSearchList, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DALt_AAL(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DALt_AAL, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DALtS_BytesSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DALtS_BytesSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DALtS_BytesReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DALtS_BytesReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DALtS_PacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DALtS_PacketsSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DALtS_PacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DALtS_PacketsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DALtS_ErrorsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DALtS_ErrorsSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DALtS_ErrorsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DALtS_ErrorsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DALtS_UnicastPacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DALtS_UnicastPacketsSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DALtS_UnicastPacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DALtS_UnicastPacketsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DALtS_DiscardPacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DALtS_DiscardPacketsSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DALtS_DiscardPacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DALtS_DiscardPacketsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DALtS_MulticastPacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DALtS_MulticastPacketsSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DALtS_MulticastPacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DALtS_MulticastPacketsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DALtS_BroadcastPacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DALtS_BroadcastPacketsSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DALtS_BroadcastPacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DALtS_BroadcastPacketsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DALtS_UnknownProtoPacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DALtS_UnknownProtoPacketsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DALtS_TransmittedBlocks(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DALtS_TransmittedBlocks, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DALtS_ReceivedBlocks(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DALtS_ReceivedBlocks, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DALtS_CRCErrors(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DALtS_CRCErrors, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DALtS_HECErrors(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DALtS_HECErrors, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DALtQ_QoSClass(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DALtQ_QoSClass, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DALtQ_QoSClass(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DALtQ_QoSClass, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DALtQ_PeakCellRate(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DALtQ_PeakCellRate, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DALtQ_PeakCellRate(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DALtQ_PeakCellRate, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DALtQ_MaximumBurstSize(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DALtQ_MaximumBurstSize, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DALtQ_MaximumBurstSize(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DALtQ_MaximumBurstSize, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DALtQ_SustainableCellRate(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DALtQ_SustainableCellRate, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DALtQ_SustainableCellRate(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DALtQ_SustainableCellRate, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DADF_DiagnosticsState(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DADF_DiagnosticsState, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DADF_DiagnosticsState(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DADF_DiagnosticsState, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DADF_Interface(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DADF_Interface, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DADF_Interface(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DADF_Interface, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DADF_NumberOfRepetitions(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DADF_NumberOfRepetitions, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DADF_NumberOfRepetitions(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DADF_NumberOfRepetitions, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DADF_Timeout(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DADF_Timeout, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DADF_Timeout(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DADF_Timeout, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DADF_SuccessCount(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DADF_SuccessCount, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DADF_FailureCount(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DADF_FailureCount, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DADF_AverageResponseTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DADF_AverageResponseTime, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DADF_MinimumResponseTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DADF_MinimumResponseTime, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DADF_MaximumResponseTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DADF_MaximumResponseTime, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DP_LinkNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DP_LinkNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DP_LinkNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DP_LinkNumberOfEntries, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DPLt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DPLt_Enable, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DPLt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DPLt_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DPLt_Status(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DPLt_Status, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DPLt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DPLt_Alias, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DPLt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DPLt_Alias, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DPLt_Name(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DPLt_Name, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DPLt_LastChange(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DPLt_LastChange, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DPLt_LowerLayers(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DPLt_LowerLayers, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DPLt_LowerLayers(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DPLt_LowerLayers, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DPLt_MACAddress(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DPLt_MACAddress, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DPLtS_BytesSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DPLtS_BytesSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DPLtS_BytesReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DPLtS_BytesReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DPLtS_PacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DPLtS_PacketsSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DPLtS_PacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DPLtS_PacketsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DPLtS_ErrorsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DPLtS_ErrorsSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DPLtS_ErrorsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DPLtS_ErrorsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DPLtS_UnicastPacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DPLtS_UnicastPacketsSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DPLtS_UnicastPacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DPLtS_UnicastPacketsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DPLtS_DiscardPacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DPLtS_DiscardPacketsSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DPLtS_DiscardPacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DPLtS_DiscardPacketsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DPLtS_MulticastPacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DPLtS_MulticastPacketsSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DPLtS_MulticastPacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DPLtS_MulticastPacketsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DPLtS_BroadcastPacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DPLtS_BroadcastPacketsSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DPLtS_BroadcastPacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DPLtS_BroadcastPacketsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DPLtS_UnknownProtoPacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DPLtS_UnknownProtoPacketsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DE_InterfaceNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DE_InterfaceNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "2"); //Always 2, Ethernet Interfaces include eth0(WAN) and eth1(LAN)
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DE_LinkNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DE_LinkNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "2"); //Always 2, WAN and LAN
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DE_VLANTerminationNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DE_VLANTerminationNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "0"); //not support, always 0
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DE_RMONStatsNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DE_RMONStatsNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "0"); //not support, always 0
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DERt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DERt_Enable, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DERt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DERt_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DERt_Status(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DERt_Status, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DERt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DERt_Alias, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DERt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DERt_Alias, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DERt_Name(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DERt_Name, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DERt_Interface(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DERt_Interface, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DERt_Interface(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DERt_Interface, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DERt_VLANID(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DERt_VLANID, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DERt_VLANID(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DERt_VLANID, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DERt_Queue(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DERt_Queue, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DERt_Queue(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DERt_Queue, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DERt_AllQueues(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DERt_AllQueues, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DERt_AllQueues(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DERt_AllQueues, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DERt_DropEvents(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DERt_DropEvents, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DERt_Bytes(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DERt_Bytes, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DERt_Packets(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DERt_Packets, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DERt_BroadcastPackets(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DERt_BroadcastPackets, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DERt_MulticastPackets(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DERt_MulticastPackets, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DERt_CRCErroredPackets(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DERt_CRCErroredPackets, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DERt_UndersizePackets(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DERt_UndersizePackets, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DERt_OversizePackets(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DERt_OversizePackets, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DERt_Packets64Bytes(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DERt_Packets64Bytes, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DERt_Packets65to127Bytes(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DERt_Packets65to127Bytes, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DERt_Packets128to255Bytes(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DERt_Packets128to255Bytes, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DERt_Packets512to1023Bytes(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DERt_Packets512to1023Bytes, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DERt_Packets1024to1518Bytes(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DERt_Packets1024to1518Bytes, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DEIt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DEIt_Enable, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Interface.");

	if (index != NULL){
		if(atoi(index) == ETHERNET_LAN_INSTANCE_INDEX)
		{
			strcpy(value, "1"); //lan
		}
		else if (atoi(index) == ETHERNET_WAN_INSTANCE_INDEX) //wan
		{
			char wanup[32] = {0};
			ret = do_uci_get("network.wan.disabled", wanup);
			if(ret)
			{
				strcpy(value, "1"); //no this uci node with defalut settings
				ret = 0;
			}
			else{
				if (atoi(wanup) == 0)
					strcpy(value, "1");
				else
					strcpy(value, "0");
			}
		}
		else
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DEIt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DEIt_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char *index = parseTemplate(path_name, ".Interface.");

	if (index != NULL){
		if(atoi(index) == ETHERNET_LAN_INSTANCE_INDEX)
		{
			//strcpy(value, "1"); //lan
			return -3; //don't allow to set
		}
		else if (atoi(index) == ETHERNET_WAN_INSTANCE_INDEX) //wan
		{
			char wanup[32] = {0};
			if (atoi(value) == 1)
				strcpy(wanup, "0");
			else{
				//strcpy(wanup, "1");
				return -3; //CS attempt to disable the WAN interface, that parameter setting MUST be rejected and reported to ACS as an error, now the error code is 9001(Request denied)
			}
			ret = do_uci_set("network.wan.disabled", wanup);
			if(ret)
			{
				return -1;
			}
			else{
				ret = do_uci_commit("network");
				if(ret)
				{
					return (-1);
				}
				//ret = 1; //means need to reboot for taking effect
				doRestartNetwork();
			}
		}
		else{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DEIt_Status(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DEIt_Status, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Interface.");

	if (index != NULL){
		if(atoi(index) == ETHERNET_LAN_INSTANCE_INDEX)
		{
			strcpy(value, "Up"); //lan
		}
		else if (atoi(index) == ETHERNET_WAN_INSTANCE_INDEX) //wan
		{
			char wanup[32] = {0};
			ret = do_uci_get("network.wan.disabled", wanup);
			if(ret)
			{
				strcpy(value, "Up"); //no this uci node with defalut settings
				ret = 0;
			}
			else{
				if (atoi(wanup) == 1)
					strcpy(value, "Down");
				else
					strcpy(value, "Up");
			}
		}
		else
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DEIt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
#if 0 //getting from tr.xml
	/*ret = do_uci_get(DEIt_Alias, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Interface.");
	char newpath[128] = {0};
	node_t target;
	if (index != NULL){
		sprintf(newpath, "Device.Ethernet.Interface.%s.Alias", index);
		ret = lib_resolve_node(newpath, &target); //get from tr.xml
		if(ret)
		{
			return -1;
		}
		strcpy(value, target->value);
	}
#endif
    ret = 1; //getting from tr.xml
    tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DEIt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (!isalpha(value[0]))
		return -2;
	
	if (strlen(value) > 64)
		return -2;
	
#if 0 //set to tr.xml
	/*ret = do_uci_set(DEIt_Alias, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char *index = parseTemplate(path_name, ".Interface.");
	char newpath[128] = {0};
	node_t target;
	if (index != NULL){
		sprintf(newpath, "Device.Ethernet.Interface.%s.Alias", index);
		tr_log(LOG_DEBUG,"set_DEIt_Alias set,newpath [%s] value [%s]\n",newpath,value);
		ret = lib_resolve_node(newpath, &target);
		if(ret)
		{
			tr_log(LOG_DEBUG,"set_DEIt_Alias set value [%s]\n",value);
			return (-1);
		}
		else
		{
			strcpy(target->value, value);
			change = 1;
			lib_commit_transaction();
		}
	}
#endif	
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DEIt_Name(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DEIt_Name, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Interface.");

	if (index != NULL){
		if(atoi(index) == ETHERNET_LAN_INSTANCE_INDEX)
		{
			getEthInterfaceName("lan", value); //lan
		}
		else if (atoi(index) == ETHERNET_WAN_INSTANCE_INDEX)
		{
			getEthInterfaceName("wan", value); //wan
		}
		else
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DEIt_LastChange(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DEIt_LastChange, value);
	if(ret)
	{
		return -1;
	}*/

	getInterfaceLastChangeTime(value);

	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DEIt_LowerLayers(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DEIt_LowerLayers, value);
	if(ret)
	{
		return -1;
	}*/
	/*char *index = parseTemplate(path_name, ".Interface.");
	if (index != NULL){
		if(atoi(index) == ETHERNET_LAN_INSTANCE_INDEX)
		{
			strcpy(value, ETHERNET_LAN_INTERFACE_PATH); //lan
		}
		else if (atoi(index) == ETHERNET_WAN_INSTANCE_INDEX)
		{
			strcpy(value, ETHERNET_WAN_INTERFACE_PATH); //wan
		}
		else
		{
			return (-1);
		}
	}*/
	strcpy(value, ""); //Since Interface is a layer 1 interface, it is expected that LowerLayers will not be used
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DEIt_LowerLayers(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DEIt_LowerLayers, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	 //don't allow to do set, always null
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DEIt_Upstream(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DEIt_Upstream, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Interface.");

	if (index != NULL){
		if(atoi(index) == ETHERNET_LAN_INSTANCE_INDEX)
		{
			strcpy(value, "0"); //lan, always false
		}
		else if (atoi(index) == ETHERNET_WAN_INSTANCE_INDEX)
		{
			strcpy(value, "1"); //wan, always true
		}
		else
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DEIt_MACAddress(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DEIt_MACAddress, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Interface.");
	char inf[32] = {0};
	char *ptr = NULL;

	if (index != NULL){
		if(atoi(index) == ETHERNET_LAN_INSTANCE_INDEX) //lan
		{
			//getMfcInfo("LANPortMAC", value);
			getEthInterfaceName("lan", inf);
			getInfaceMac(inf, value);
			if((ptr= strstr(value, " ")) != NULL)
				*ptr = '\0';
		}
		else if (atoi(index) == ETHERNET_WAN_INSTANCE_INDEX) //wan
		{
			//getMfcInfo("WANPortMAC", value);
			getEthInterfaceName("wan", inf);
			getInfaceWanMac(value);
			if((ptr= strstr(value, " ")) != NULL)
				*ptr = '\0';
		}
		else
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DEIt_MaxBitRate(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DEIt_MaxBitRate, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "-1"); //always auto, means automatic selection of the maximum bit rate
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DEIt_MaxBitRate(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DEIt_MaxBitRate, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DEIt_CurrentBitRate(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DEIt_CurrentBitRate, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Interface.");
	char inf[32] = {0};

	if (index != NULL){
		if(atoi(index) == ETHERNET_LAN_INSTANCE_INDEX) //lan
		{
			getEthInterfaceName("lan", inf);
			getDevStatus(inf, "speed", value);
			
		}
		else if (atoi(index) == ETHERNET_WAN_INSTANCE_INDEX) //wan
		{
			getEthInterfaceName("wan", inf);
			getDevStatus(inf, "speed", value);
		}
		else
		{
			return (-1);
		}

		if (strcmp(value, "") != 0){
			char *p = NULL;
			if ((p = strstr(value, "F")) != NULL) //for full speed
				*p = '\0';
			if ((p = strstr(value, "H")) != NULL) //for half speed
				*p = '\0';
			if (strncmp(value, "-1", 2) == 0)
				strcpy(value, "0"); //no link with value 0
		}
		else
			strcpy(value, "0"); //no link with value 0
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DEIt_DuplexMode(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DEIt_DuplexMode, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "Auto"); //always Auto
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DEIt_DuplexMode(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DEIt_DuplexMode, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DEIt_EEECapability(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DEIt_EEECapability, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "1"); //always 1
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DEIt_EEEEnable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DEIt_EEEEnable, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "1"); //always 1
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DEIt_EEEEnable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DEIt_EEEEnable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DEItS_BytesSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DEItS_BytesSent, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Interface.");
	char inf[32] = {0};

	if (index != NULL){
		if(atoi(index) == ETHERNET_LAN_INSTANCE_INDEX) //lan
		{
			getEthInterfaceName("lan", inf);
			getDevStatus(inf, "tx_bytes", value);
			
		}
		else if (atoi(index) == ETHERNET_WAN_INSTANCE_INDEX) //wan
		{
			getEthInterfaceName("wan", inf);
			getDevStatus(inf, "tx_bytes", value);
		}
		else
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DEItS_BytesReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DEItS_BytesReceived, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Interface.");
	char inf[32] = {0};

	if (index != NULL){
		if(atoi(index) == ETHERNET_LAN_INSTANCE_INDEX)
		{
			getEthInterfaceName("lan", inf);
			getDevStatus(inf, "rx_bytes", value);
			
		}
		else if (atoi(index) == ETHERNET_WAN_INSTANCE_INDEX)
		{
			getEthInterfaceName("wan", inf);
			getDevStatus(inf, "rx_bytes", value);
		}
		else
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DEItS_PacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DEItS_PacketsSent, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Interface.");
	char inf[32] = {0};

	if (index != NULL){
		if(atoi(index) == ETHERNET_LAN_INSTANCE_INDEX) //lan
		{
			getEthInterfaceName("lan", inf);
			getDevStatus(inf, "tx_packets", value);
			
		}
		else if (atoi(index) == ETHERNET_WAN_INSTANCE_INDEX) //wan
		{
			getEthInterfaceName("wan", inf);
			getDevStatus(inf, "tx_packets", value);
		}
		else
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DEItS_PacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DEItS_PacketsReceived, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Interface.");
	char inf[32] = {0};

	if (index != NULL){
		if(atoi(index) == ETHERNET_LAN_INSTANCE_INDEX) //lan
		{
			getEthInterfaceName("lan", inf);
			getDevStatus(inf, "rx_packets", value);
			
		}
		else if (atoi(index) == ETHERNET_WAN_INSTANCE_INDEX) //wan
		{
			getEthInterfaceName("wan", inf);
			getDevStatus(inf, "rx_packets", value);
		}
		else
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DEItS_ErrorsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DEItS_ErrorsSent, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Interface.");
	char inf[32] = {0};

	if (index != NULL){
		if(atoi(index) == ETHERNET_LAN_INSTANCE_INDEX) //lan
		{
			getEthInterfaceName("lan", inf);
			getDevStatus(inf, "tx_errors", value);
			
		}
		else if (atoi(index) == ETHERNET_WAN_INSTANCE_INDEX) //wan
		{
			getEthInterfaceName("wan", inf);
			getDevStatus(inf, "tx_errors", value);
		}
		else
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DEItS_ErrorsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DEItS_ErrorsReceived, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Interface.");
	char inf[32] = {0};

	if (index != NULL){
		if(atoi(index) == ETHERNET_LAN_INSTANCE_INDEX) //lan
		{
			getEthInterfaceName("lan", inf);
			getDevStatus(inf, "rx_errors", value);
			
		}
		else if (atoi(index) == ETHERNET_WAN_INSTANCE_INDEX) //wan
		{
			getEthInterfaceName("wan", inf);
			getDevStatus(inf, "rx_errors", value);
		}
		else
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DEItS_UnicastPacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DEItS_UnicastPacketsSent, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Interface.");
	int count = 0;
	int sum = 0;
	int i = 0;

	if (index != NULL)
	{
		if(atoi(index) == ETHERNET_LAN_INSTANCE_INDEX)
		{
			for(i=1; i<=4; i++)
			{
				count = get_ssdk_mib_statistics(i, "TxUniCast");
				sum = sum + count;
				count = 0;
			}
		}
		else if (atoi(index) == ETHERNET_WAN_INSTANCE_INDEX)
		{
			count = get_ssdk_mib_statistics(5, "TxUniCast");
			sum = sum + count;
		}
		else
		{
			return (-1);
		}
	}
	sprintf(value, "%d", sum);
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DEItS_UnicastPacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DEItS_UnicastPacketsReceived, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Interface.");
	int count = 0;
	int sum = 0;
	int i = 0;

	if (index != NULL)
	{
		if(atoi(index) == ETHERNET_LAN_INSTANCE_INDEX)
		{
			for(i=1; i<=4; i++)
			{
				count = get_ssdk_mib_statistics(i, "RxUniCast");
				sum = sum + count;
				count = 0;
			}
		}
		else if (atoi(index) == ETHERNET_WAN_INSTANCE_INDEX)
		{
			count = get_ssdk_mib_statistics(5, "RxUniCast");
			sum = sum + count;
		}
		else
		{
			return (-1);
		}
	}
	sprintf(value, "%d", sum);
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DEItS_DiscardPacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DEItS_DiscardPacketsSent, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Interface.");
	char inf[32] = {0};

	if (index != NULL){
		if(atoi(index) == ETHERNET_LAN_INSTANCE_INDEX) //lan
		{
			getEthInterfaceName("lan", inf);
			getDevStatus(inf, "tx_dropped", value);
			
		}
		else if (atoi(index) == ETHERNET_WAN_INSTANCE_INDEX) //wan
		{
			getEthInterfaceName("wan", inf);
			getDevStatus(inf, "tx_dropped", value);
		}
		else
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DEItS_DiscardPacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DEItS_DiscardPacketsReceived, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Interface.");
	char inf[32] = {0};

	if (index != NULL){
		if(atoi(index) == ETHERNET_LAN_INSTANCE_INDEX) //lan
		{
			getEthInterfaceName("lan", inf);
			getDevStatus(inf, "rx_dropped", value);
			
		}
		else if (atoi(index) == ETHERNET_WAN_INSTANCE_INDEX) //wan
		{
			getEthInterfaceName("wan", inf);
			getDevStatus(inf, "rx_dropped", value);
		}
		else
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DEItS_MulticastPacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DEItS_MulticastPacketsSent, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Interface.");
	int count = 0;
	int sum = 0;
	int i = 0;

	if (index != NULL)
	{
		if(atoi(index) == ETHERNET_LAN_INSTANCE_INDEX)
		{
			for(i=1; i<=4; i++)
			{
				count = get_ssdk_mib_statistics(i, "TxMulti");
				sum = sum + count;
				count = 0;
			}
		}
		else if (atoi(index) == ETHERNET_WAN_INSTANCE_INDEX)
		{
			count = get_ssdk_mib_statistics(5, "TxMulti");
			sum = sum + count;
		}
		else
		{
			return (-1);
		}
	}
	sprintf(value, "%d", sum);
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DEItS_MulticastPacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DEItS_MulticastPacketsReceived, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Interface.");
	int count = 0;
	int sum = 0;
	int i = 0;

	if (index != NULL)
	{
		if(atoi(index) == ETHERNET_LAN_INSTANCE_INDEX)
		{
			for(i=1; i<=4; i++)
			{
				count = get_ssdk_mib_statistics(i, "RxMulti");
				sum = sum + count;
				count = 0;
			}
		}
		else if (atoi(index) == ETHERNET_WAN_INSTANCE_INDEX)
		{
			count = get_ssdk_mib_statistics(5, "RxMulti");
			sum = sum + count;
		}
		else
		{
			return (-1);
		}
	}
	sprintf(value, "%d", sum);
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DEItS_BroadcastPacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DEItS_BroadcastPacketsSent, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Interface.");
	int count = 0;
	int sum = 0;
	int i = 0;

	if (index != NULL)
	{
		if(atoi(index) == ETHERNET_LAN_INSTANCE_INDEX)
		{
			for(i=1; i<=4; i++)
			{
				count = get_ssdk_mib_statistics(i, "TxBroad");
				sum = sum + count;
				count = 0;
			}
		}
		else if (atoi(index) == ETHERNET_WAN_INSTANCE_INDEX)
		{
			count = get_ssdk_mib_statistics(5, "TxBroad");
			sum = sum + count;
		}
		else
		{
			return (-1);
		}
	}
	sprintf(value, "%d", sum);
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DEItS_BroadcastPacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DEItS_BroadcastPacketsReceived, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Interface.");
	int count = 0;
	int sum = 0;
	int i = 0;

	if (index != NULL)
	{
		if(atoi(index) == ETHERNET_LAN_INSTANCE_INDEX)
		{
			for(i=1; i<=4; i++)
			{
				count = get_ssdk_mib_statistics(i, "RxBroad");
				sum = sum + count;
				count = 0;
			}
		}
		else if (atoi(index) == ETHERNET_WAN_INSTANCE_INDEX)
		{
			count = get_ssdk_mib_statistics(5, "RxBroad");
			sum = sum + count;
		}
		else
		{
			return (-1);
		}
	}
	sprintf(value, "%d", sum);
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DEItS_UnknownProtoPacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DEItS_UnknownProtoPacketsReceived, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Interface.");
	char inf[32] = {0};

	if (index != NULL){
		if(atoi(index) == ETHERNET_LAN_INSTANCE_INDEX) //lan
		{
			getEthInterfaceName("lan", inf);
			getDevStatus(inf, "rx_frame_errors", value);
			
		}
		else if (atoi(index) == ETHERNET_WAN_INSTANCE_INDEX) //wan
		{
			getEthInterfaceName("wan", inf);
			getDevStatus(inf, "rx_frame_errors", value);
		}
		else
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DELt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DELt_Enable, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Link.");

	if (index != NULL){
		if(atoi(index) == ETHERNET_LAN_INSTANCE_INDEX)
		{
			strcpy(value, "1"); //lan
		}
		else if (atoi(index) == ETHERNET_WAN_INSTANCE_INDEX) //wan
		{
			char wanup[32] = {0};
			ret = do_uci_get("network.wan.disabled", wanup);
			if(ret)
			{
				strcpy(value, "1"); //no this uci node with defalut settings
				ret = 0;
			}
			else{
				if (atoi(wanup) == 1)
					strcpy(value, "0");
				else
					strcpy(value, "1");
			}
		}
		else
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DELt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DELt_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char *index = parseTemplate(path_name, ".Link.");

	if (index != NULL){
		if (atoi(value) == 0) //New Charter PRD don't allow to disable
			return -3;
		
		if(atoi(index) == ETHERNET_LAN_INSTANCE_INDEX)
		{
			strcpy(value, "1"); //lan
		}
		else if (atoi(index) == ETHERNET_WAN_INSTANCE_INDEX) //wan
		{
			char wanup[32] = {0};
			if (atoi(value) == 1)
				strcpy(wanup, "0");
			else
				strcpy(wanup, "1");
			ret = do_uci_set("network.wan.disabled", wanup);
			if(ret)
			{
				return -1;
			}
			else{
				ret = do_uci_commit("network");
				if(ret)
				{
					return (-1);
				}
				//ret = 1; //means need to reboot for taking effect
				doRestartNetwork();
			}
		}
		else{
			return (-1);
		}
	}
	else
		return -1;
	
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DELt_Status(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DELt_Status, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Link.");

	if (index != NULL){
		if(atoi(index) == ETHERNET_LAN_INSTANCE_INDEX)
		{
			strcpy(value, "Up"); //lan
		}
		else if (atoi(index) == ETHERNET_WAN_INSTANCE_INDEX) //wan
		{
			char waninf[32] = {0};
			getWanHigherLayerInterface(waninf);
			if (waninf[0] != '\0')
				strcpy(value, "Up");
			else
				strcpy(value, "Down");
		}
		else
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DELt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DELt_Alias, value);
	if(ret)
	{
		return -1;
	}*/
	ret = 1; //getting from tr.xml
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DELt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (!isalpha(value[0]))
		return -2;
	
	if (strlen(value) > 64)
		return -2;
	
	/*ret = do_uci_set(DELt_Alias, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);*/
	//set to tr.xml
	return ret;
}
int get_DELt_Name(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DELt_Name, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Link.");

	if (index != NULL){
		if (atoi(index) == ETHERNET_LAN_INSTANCE_INDEX){
			strcpy(value, "LAN Group"); //textual name
		}
		else if (atoi(index) == ETHERNET_WAN_INSTANCE_INDEX){
			char wanmode[32] = {0};
			getWanMode(wanmode);
			sprintf(value, "WAN %s Mode", wanmode); //textual name
		}
		else
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DELt_LastChange(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DELt_LastChange, value);
	if(ret)
	{
		return -1;
	}*/
	a_infinfo infStatus;
	char *index = parseTemplate(path_name, ".Link.");

	if (index == NULL)
		return -1;

	memset(&infStatus, 0, sizeof(infStatus));
	
	if(atoi(index) == ETHERNET_LAN_INSTANCE_INDEX)
	{
		getInterfaceInfo("lan", &infStatus);
	}
	else if (atoi(index) == ETHERNET_WAN_INSTANCE_INDEX)
	{
		char wanmode[32] = {0};
		char wantype[32] = {0};
		getWanMode(wanmode);
		if (strcmp(wanmode, "pptp") == 0 || strcmp(wanmode, "l2tp") == 0)
			strcpy(wantype, "wan0");
		else
			strcpy(wantype, "wan");
		memset(&infStatus, 0, sizeof(infStatus));
		getInterfaceInfo(wantype, &infStatus);
	}
	else
	{
		return (-1);
	}
	
	if (strcmp(infStatus.uptime, "") != 0)
		strcpy(value, infStatus.uptime);
	else
		strcpy(value, "0");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DELt_LowerLayers(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DELt_LowerLayers, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Link.");

	if (index != NULL){
		if (atoi(index) == ETHERNET_LAN_INSTANCE_INDEX){
			strcpy(value, ETHERNET_LAN_INTERFACE_PATH);
		}
		else if (atoi(index) == ETHERNET_WAN_INSTANCE_INDEX)
		{
			char wanup[32] = {0};
			ret = do_uci_get("network.wan.disabled", wanup);
			if(ret)
			{
				strcpy(wanup, "0"); //no this uci node with defalut settings
				ret = 0;
			}
			if (atoi(wanup) == 0)
				strcpy(value, ETHERNET_WAN_INTERFACE_PATH);
			else
				strcpy(value, "");
		}
		else
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DELt_LowerLayers(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DELt_LowerLayers, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to change
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DELt_MACAddress(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DELt_MACAddress, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Link.");
	char inf[32] = {0};

	if (index != NULL){
		if(atoi(index) == ETHERNET_LAN_INSTANCE_INDEX) //lan
		{
			//getMfcInfo("LANPortMAC", value);
			getInfaceMac("br-lan", value);
			
		}
		else if (atoi(index) == ETHERNET_WAN_INSTANCE_INDEX) //wan
		{
			//getMfcInfo("WANPortMAC", value);
			getEthInterfaceName("wan", inf);
			getInfaceMac(inf, value);
		}
		else
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DELt_PriorityTagging(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DELt_PriorityTagging, value);
	if(ret)
	{
		return -1;
	}*/
	ret = 1; //getting from tr.xml
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DELt_PriorityTagging(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DELt_PriorityTagging, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//set to tr.xml
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DELtS_BytesSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DELtS_BytesSent, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Link.");

	if (index != NULL){
		if(atoi(index) == ETHERNET_LAN_INSTANCE_INDEX)
		{
			getDevStatus("br-lan", "tx_bytes", value); //lan
			
		}
		else if (atoi(index) == ETHERNET_WAN_INSTANCE_INDEX)
		{
			char inf[32] = {0};
			getWanHigherLayerInterface(inf);
			getDevStatus(inf, "tx_bytes", value); //wan
		}
		else
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DELtS_BytesReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DELtS_BytesReceived, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Link.");

	if (index != NULL){
		if(atoi(index) == ETHERNET_LAN_INSTANCE_INDEX)
		{
			getDevStatus("br-lan", "rx_bytes", value); //lan
			
		}
		else if (atoi(index) == ETHERNET_WAN_INSTANCE_INDEX)
		{
			char inf[32] = {0};
			getWanHigherLayerInterface(inf);
			getDevStatus(inf, "rx_bytes", value); //wan
		}
		else
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DELtS_PacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DELtS_PacketsSent, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Link.");

	if (index != NULL){
		if(atoi(index) == ETHERNET_LAN_INSTANCE_INDEX)
		{
			getDevStatus("br-lan", "tx_packets", value); //lan
			
		}
		else if (atoi(index) == ETHERNET_WAN_INSTANCE_INDEX)
		{
			char inf[32] = {0};
			getWanHigherLayerInterface(inf);
			getDevStatus(inf, "tx_packets", value); //wan
		}
		else
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DELtS_PacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DELtS_PacketsReceived, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Link.");

	if (index != NULL){
		if(atoi(index) == ETHERNET_LAN_INSTANCE_INDEX)
		{
			getDevStatus("br-lan", "rx_packets", value); //lan
			
		}
		else if (atoi(index) == ETHERNET_WAN_INSTANCE_INDEX)
		{
			char inf[32] = {0};
			getWanHigherLayerInterface(inf);
			getDevStatus(inf, "rx_packets", value); //wan
		}
		else
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DELtS_ErrorsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DELtS_ErrorsSent, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Link.");

	if (index != NULL){
		if(atoi(index) == ETHERNET_LAN_INSTANCE_INDEX)
		{
			getDevStatus("br-lan", "tx_errors", value); //lan
			
		}
		else if (atoi(index) == ETHERNET_WAN_INSTANCE_INDEX)
		{
			char inf[32] = {0};
			getWanHigherLayerInterface(inf);
			getDevStatus(inf, "tx_errors", value); //wan
		}
		else
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DELtS_ErrorsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DELtS_ErrorsReceived, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Link.");

	if (index != NULL){
		if(atoi(index) == ETHERNET_LAN_INSTANCE_INDEX)
		{
			getDevStatus("br-lan", "rx_errors", value); //lan
			
		}
		else if (atoi(index) == ETHERNET_WAN_INSTANCE_INDEX)
		{
			char inf[32] = {0};
			getWanHigherLayerInterface(inf);
			getDevStatus(inf, "rx_errors", value); //wan
		}
		else
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DELtS_UnicastPacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DELtS_UnicastPacketsSent, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Link.");
	int count = 0;
	int sum = 0;
	int i = 0;

	if (index != NULL)
	{
		if(atoi(index) == ETHERNET_LAN_INSTANCE_INDEX)
		{
			for(i=1; i<=4; i++)
			{
				count = get_ssdk_mib_statistics(i, "TxUniCast");
				sum = sum + count;
				count = 0;
			}
		}
		else if (atoi(index) == ETHERNET_WAN_INSTANCE_INDEX)
		{
			
			char inf[32] = {0};
			char inf2[32] = {0};
			getWanHigherLayerInterface(inf);
			getEthInterfaceName("wan", inf2);
			if(strcmp(inf, inf2) == 0)
			{
				count = get_ssdk_mib_statistics(5, "TxUniCast");
				sum = sum + count;
			}
		}
		else
		{
			return (-1);
		}
	}
	sprintf(value, "%d", sum);
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DELtS_UnicastPacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DELtS_UnicastPacketsReceived, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Link.");
	int count = 0;
	int sum = 0;
	int i = 0;

	if (index != NULL)
	{
		if(atoi(index) == ETHERNET_LAN_INSTANCE_INDEX)
		{
			for(i=1; i<=4; i++)
			{
				count = get_ssdk_mib_statistics(i, "RxUniCast");
				sum = sum + count;
				count = 0;
			}
		}
		else if (atoi(index) == ETHERNET_WAN_INSTANCE_INDEX)
		{
			
			char inf[32] = {0};
			char inf2[32] = {0};
			getWanHigherLayerInterface(inf);
			getEthInterfaceName("wan", inf2);
			if(strcmp(inf, inf2) == 0)
			{
				count = get_ssdk_mib_statistics(5, "RxUniCast");
				sum = sum + count;
			}
		}
		else
		{
			return (-1);
		}
	}
	sprintf(value, "%d", sum);
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DELtS_DiscardPacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DELtS_DiscardPacketsSent, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Link.");

	if (index != NULL){
		if(atoi(index) == ETHERNET_LAN_INSTANCE_INDEX)
		{
			getDevStatus("br-lan", "tx_dropped", value); //lan
			
		}
		else if (atoi(index) == ETHERNET_WAN_INSTANCE_INDEX)
		{
			char inf[32] = {0};
			getWanHigherLayerInterface(inf);
			getDevStatus(inf, "tx_dropped", value); //wan
		}
		else
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DELtS_DiscardPacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DELtS_DiscardPacketsReceived, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Link.");

	if (index != NULL){
		if(atoi(index) == ETHERNET_LAN_INSTANCE_INDEX)
		{
			getDevStatus("br-lan", "rx_dropped", value); //lan
			
		}
		else if (atoi(index) == ETHERNET_WAN_INSTANCE_INDEX)
		{
			char inf[32] = {0};
			getWanHigherLayerInterface(inf);
			getDevStatus(inf, "rx_dropped", value); //wan
		}
		else
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DELtS_MulticastPacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DELtS_MulticastPacketsSent, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Link.");
	int count = 0;
	int sum = 0;
	int i = 0;

	if (index != NULL)
	{
		if(atoi(index) == ETHERNET_LAN_INSTANCE_INDEX)
		{
			for(i=1; i<=4; i++)
			{
				count = get_ssdk_mib_statistics(i, "TxMulti");
				sum = sum + count;
				count = 0;
			}
		}
		else if (atoi(index) == ETHERNET_WAN_INSTANCE_INDEX)
		{
			
			char inf[32] = {0};
			char inf2[32] = {0};
			getWanHigherLayerInterface(inf);
			getEthInterfaceName("wan", inf2);
			if(strcmp(inf, inf2) == 0)
			{
				count = get_ssdk_mib_statistics(5, "TxMulti");
				sum = sum + count;
			}
		}
		else
		{
			return (-1);
		}
	}
	sprintf(value, "%d", sum);
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DELtS_MulticastPacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DELtS_MulticastPacketsReceived, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Link.");
	int count = 0;
	int sum = 0;
	int i = 0;

	if (index != NULL)
	{
		if(atoi(index) == ETHERNET_LAN_INSTANCE_INDEX)
		{
			for(i=1; i<=4; i++)
			{
				count = get_ssdk_mib_statistics(i, "RxMulti");
				sum = sum + count;
				count = 0;
			}
		}
		else if (atoi(index) == ETHERNET_WAN_INSTANCE_INDEX)
		{
			
			char inf[32] = {0};
			char inf2[32] = {0};
			getWanHigherLayerInterface(inf);
			getEthInterfaceName("wan", inf2);
			if(strcmp(inf, inf2) == 0)
			{
				count = get_ssdk_mib_statistics(5, "RxMulti");
				sum = sum + count;
			}
		}
		else
		{
			return (-1);
		}
	}
	sprintf(value, "%d", sum);
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DELtS_BroadcastPacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DELtS_BroadcastPacketsSent, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Link.");
	int count = 0;
	int sum = 0;
	int i = 0;

	if (index != NULL)
	{
		if(atoi(index) == ETHERNET_LAN_INSTANCE_INDEX)
		{
			for(i=1; i<=4; i++)
			{
				count = get_ssdk_mib_statistics(i, "TxBroad");
				sum = sum + count;
				count = 0;
			}
		}
		else if (atoi(index) == ETHERNET_WAN_INSTANCE_INDEX)
		{
			
			char inf[32] = {0};
			char inf2[32] = {0};
			getWanHigherLayerInterface(inf);
			getEthInterfaceName("wan", inf2);
			if(strcmp(inf, inf2) == 0)
			{
				count = get_ssdk_mib_statistics(5, "TxBroad");
				sum = sum + count;
			}
		}
		else
		{
			return (-1);
		}
	}
	sprintf(value, "%d", sum);
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DELtS_BroadcastPacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DELtS_BroadcastPacketsReceived, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Link.");
	int count = 0;
	int sum = 0;
	int i = 0;

	if (index != NULL)
	{
		if(atoi(index) == ETHERNET_LAN_INSTANCE_INDEX)
		{
			for(i=1; i<=4; i++)
			{
				count = get_ssdk_mib_statistics(i, "RxBroad");
				sum = sum + count;
				count = 0;
			}
		}
		else if (atoi(index) == ETHERNET_WAN_INSTANCE_INDEX)
		{
			
			char inf[32] = {0};
			char inf2[32] = {0};
			getWanHigherLayerInterface(inf);
			getEthInterfaceName("wan", inf2);
			if(strcmp(inf, inf2) == 0)
			{
				count = get_ssdk_mib_statistics(5, "RxBroad");
				sum = sum + count;
			}
		}
		else
		{
			return (-1);
		}
	}
	sprintf(value, "%d", sum);
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DELtS_UnknownProtoPacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DELtS_UnknownProtoPacketsReceived, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Link.");

	if (index != NULL){
		if(atoi(index) == ETHERNET_LAN_INSTANCE_INDEX)
		{
			getDevStatus("br-lan", "rx_frame_errors", value); //lan
			
		}
		else if (atoi(index) == ETHERNET_WAN_INSTANCE_INDEX)
		{
			char inf[32] = {0};
			getWanHigherLayerInterface(inf);
			getDevStatus(inf, "rx_frame_errors", value); //wan
		}
		else
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DEVt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DEVt_Enable, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DEVt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DEVt_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DEVt_Status(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DEVt_Status, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DEVt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DEVt_Alias, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DEVt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DEVt_Alias, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DEVt_Name(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DEVt_Name, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DEVt_LastChange(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DEVt_LastChange, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DEVt_LowerLayers(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DEVt_LowerLayers, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DEVt_LowerLayers(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DEVt_LowerLayers, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DEVt_VLANID(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DEVt_VLANID, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DEVt_VLANID(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DEVt_VLANID, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DEVt_TPID(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DEVt_TPID, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DEVt_TPID(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DEVt_TPID, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DEVtS_BytesSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DEVtS_BytesSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DEVtS_BytesReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DEVtS_BytesReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DEVtS_PacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DEVtS_PacketsSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DEVtS_PacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DEVtS_PacketsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DEVtS_ErrorsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DEVtS_ErrorsSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DEVtS_ErrorsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DEVtS_ErrorsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DEVtS_UnicastPacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DEVtS_UnicastPacketsSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DEVtS_UnicastPacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DEVtS_UnicastPacketsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DEVtS_DiscardPacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DEVtS_DiscardPacketsSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DEVtS_DiscardPacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DEVtS_DiscardPacketsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DEVtS_MulticastPacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DEVtS_MulticastPacketsSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DEVtS_MulticastPacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DEVtS_MulticastPacketsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DEVtS_BroadcastPacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DEVtS_BroadcastPacketsSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DEVtS_BroadcastPacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DEVtS_BroadcastPacketsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DEVtS_UnknownProtoPacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DEVtS_UnknownProtoPacketsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DU_InterfaceNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DU_InterfaceNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DU_PortNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DU_PortNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "2"); //support two usb ports
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUIt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUIt_Enable, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DUIt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DUIt_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DUIt_Status(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUIt_Status, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUIt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUIt_Alias, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DUIt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DUIt_Alias, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DUIt_Name(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUIt_Name, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUIt_LastChange(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUIt_LastChange, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUIt_LowerLayers(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUIt_LowerLayers, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DUIt_LowerLayers(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DUIt_LowerLayers, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DUIt_Upstream(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUIt_Upstream, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUIt_MACAddress(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUIt_MACAddress, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUIt_MaxBitRate(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUIt_MaxBitRate, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUIt_Port(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUIt_Port, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUItS_BytesSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUItS_BytesSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUItS_BytesReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUItS_BytesReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUItS_PacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUItS_PacketsSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUItS_PacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUItS_PacketsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUItS_ErrorsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUItS_ErrorsSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUItS_ErrorsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUItS_ErrorsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUItS_UnicastPacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUItS_UnicastPacketsSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUItS_UnicastPacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUItS_UnicastPacketsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUItS_DiscardPacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUItS_DiscardPacketsSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUItS_DiscardPacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUItS_DiscardPacketsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUItS_MulticastPacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUItS_MulticastPacketsSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUItS_MulticastPacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUItS_MulticastPacketsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUItS_BroadcastPacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUItS_BroadcastPacketsSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUItS_BroadcastPacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUItS_BroadcastPacketsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUItS_UnknownProtoPacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUItS_UnknownProtoPacketsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUPt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUPt_Alias, value);
	if(ret)
	{
		return -1;
	}*/
	ret = 1; //getting from tr.xml
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DUPt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (!isalpha(value[0]))
		return -2;
	
	if (strlen(value) > 64)
		return -2;
	
	/*ret = do_uci_set(DUPt_Alias, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//set to tr.xml
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DUPt_Name(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUPt_Name, value);
	if(ret)
	{
		return -1;
	}*/
	ret = 1; //getting from tr.xml
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUPt_Standard(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUPt_Standard, value);
	if(ret)
	{
		return -1;
	}*/
	char usbpath[128] = {0};
	FILE *fp = NULL;
	char line[128] = {0};
	char * ptr = NULL;
	char *index = parseTemplate(path_name, ".Port.");

	if (index != NULL)
	{
		if (atoi(index) == 1)
			strcpy(usbpath, "/sys/bus/platform/devices/xhci-hcd.0/usb1/version");
		else if (atoi(index) == 2)
			strcpy(usbpath, "/sys/bus/platform/devices/xhci-hcd.1/usb3/version");
		else
			return -1;
		if((fp=fopen(usbpath, "r")) != NULL){
			fgets(line,sizeof(line)-1,fp);
			if ((ptr = strstr(line, "\n")) != NULL)
					*ptr = '\0';
			strcpy(value, line);
			fclose(fp);
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUPt_Type(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUPt_Type, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "Host"); //always Host
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUPt_Receptacle(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUPt_Receptacle, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "Standard-A"); //always Standard-A
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUPt_Rate(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUPt_Rate, value);
	if(ret)
	{
		return -1;
	}*/
	char busnum[8] = {0};
	char *index = parseTemplate(path_name, ".Port.");

	if (index != NULL)
	{
		if (atoi(index) == 1)
			strcpy(busnum, "1");
		else if (atoi(index) == 2)
			strcpy(busnum, "3");
		else
			return -1;
		get_USBHostsDeviceInfo2(busnum, value, "speed"); //get Rate
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUPt_Power(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUPt_Power, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "Bus"); //always Bus
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUU_HostNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUU_HostNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "2"); //has two usb ports
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUUHt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUUHt_Alias, value);
	if(ret)
	{
		return -1;
	}*/
	ret = 1; //getting from tr.xml
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DUUHt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (!isalpha(value[0]))
		return -2;
	
	if (strlen(value) > 64)
		return -2;
	
	/*ret = do_uci_set(DUUHt_Alias, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//set to tr.xml
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DUUHt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUUHt_Enable, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "1"); //always enable
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DUUHt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DUUHt_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DUUHt_Name(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUUHt_Name, value);
	if(ret)
	{
		return -1;
	}*/
	ret = 1; //getting from tr.xml
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUUHt_Type(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUUHt_Type, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "xHCI"); //always xHCI Host Controller
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUUHt_Reset(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUUHt_Reset, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DUUHt_Reset(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DUUHt_Reset, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DUUHt_PowerManagementEnable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUUHt_PowerManagementEnable, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DUUHt_PowerManagementEnable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DUUHt_PowerManagementEnable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DUUHt_USBVersion(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUUHt_USBVersion, value);
	if(ret)
	{
		return -1;
	}*/
	char usbpath[128] = {0};
	FILE *fp = NULL;
	char line[128] = {0};
	char * ptr = NULL;
	char *index = parseTemplate(path_name, ".Host.");

	if (index != NULL)
	{
		if (atoi(index) == 1)
			strcpy(usbpath, "/sys/bus/platform/devices/xhci-hcd.0/usb1/version");
		else if (atoi(index) == 2)
			strcpy(usbpath, "/sys/bus/platform/devices/xhci-hcd.1/usb3/version");
		else
			return -1;
		if((fp=fopen(usbpath, "r")) != NULL){
			fgets(line,sizeof(line)-1,fp);
			if ((ptr = strstr(line, "\n")) != NULL)
					*ptr = '\0';
			strcpy(value, line);
			fclose(fp);
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUUHt_DeviceNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUUHt_DeviceNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}*/
	char keyvalue[MAXMAPITEMS][128];
	char usbubsnum[32] = {0};
	int num = 0;
	char *index = parseTemplate(path_name, ".Host.");

	if (index != NULL)
	{
		if (atoi(index) == 1)
			strcpy(usbubsnum, "1");
		else if (atoi(index) == 2)
			strcpy(usbubsnum, "3");
		else
			return -1;
		num = get_USBHostsDevice(keyvalue, usbubsnum);
		sprintf(value, "%d", num);
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DUUHt_DeviceNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DUUHt_DeviceNumberOfEntries, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DUUHtDt_DeviceNumber(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUUHtDt_DeviceNumber, value);
	if(ret)
	{
		return -1;
	}*/
	char busnum[8] = {0};
	char *index = parseTemplate(path_name, ".Host.");

	if (index != NULL)
	{
		if (atoi(index) == 1)
			strcpy(busnum, "1");
		else if (atoi(index) == 2)
			strcpy(busnum, "3");
		else
			return -1;
		get_USBHostsDeviceInfo(busnum, value, "devnum"); //get DeviceNumber
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUUHtDt_USBVersion(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUUHtDt_USBVersion, value);
	if(ret)
	{
		return -1;
	}*/
	char busnum[8] = {0};
	char *index = parseTemplate(path_name, ".Host.");

	if (index != NULL)
	{
		if (atoi(index) == 1)
			strcpy(busnum, "1");
		else if (atoi(index) == 2)
			strcpy(busnum, "3");
		else
			return -1;
		get_USBHostsDeviceInfo(busnum, value, "version"); //get USBVersion
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUUHtDt_DeviceClass(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUUHtDt_DeviceClass, value);
	if(ret)
	{
		return -1;
	}*/
	char busnum[8] = {0};
	char *index = parseTemplate(path_name, ".Host.");

	if (index != NULL)
	{
		if (atoi(index) == 1)
			strcpy(busnum, "1");
		else if (atoi(index) == 2)
			strcpy(busnum, "3");
		else
			return -1;
		get_USBHostsDeviceInfo(busnum, value, "bDeviceClass"); //get DeviceClass
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUUHtDt_DeviceSubClass(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUUHtDt_DeviceSubClass, value);
	if(ret)
	{
		return -1;
	}*/
	char busnum[8] = {0};
	char *index = parseTemplate(path_name, ".Host.");

	if (index != NULL)
	{
		if (atoi(index) == 1)
			strcpy(busnum, "1");
		else if (atoi(index) == 2)
			strcpy(busnum, "3");
		else
			return -1;
		get_USBHostsDeviceInfo(busnum, value, "bDeviceSubClass"); //get DeviceSubClass
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DUUHtDt_DeviceSubClass(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DUUHtDt_DeviceSubClass, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DUUHtDt_DeviceVersion(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUUHtDt_DeviceVersion, value);
	if(ret)
	{
		return -1;
	}*/
	char busnum[8] = {0};
	char *index = parseTemplate(path_name, ".Host.");

	if (index != NULL)
	{
		if (atoi(index) == 1)
			strcpy(busnum, "1");
		else if (atoi(index) == 2)
			strcpy(busnum, "3");
		else
			return -1;
		get_USBHostsDeviceInfo(busnum, value, "bcdDevice"); //get DeviceVersion
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DUUHtDt_DeviceVersion(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DUUHtDt_DeviceVersion, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DUUHtDt_DeviceProtocol(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUUHtDt_DeviceProtocol, value);
	if(ret)
	{
		return -1;
	}*/
	char busnum[8] = {0};
	char *index = parseTemplate(path_name, ".Host.");

	if (index != NULL)
	{
		if (atoi(index) == 1)
			strcpy(busnum, "1");
		else if (atoi(index) == 2)
			strcpy(busnum, "3");
		else
			return -1;
		get_USBHostsDeviceInfo(busnum, value, "bDeviceProtocol"); //get DeviceProtocol
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DUUHtDt_DeviceProtocol(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DUUHtDt_DeviceProtocol, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DUUHtDt_ProductID(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUUHtDt_ProductID, value);
	if(ret)
	{
		return -1;
	}*/
	char busnum[8] = {0};
	char *index = parseTemplate(path_name, ".Host.");

	if (index != NULL)
	{
		if (atoi(index) == 1)
			strcpy(busnum, "1");
		else if (atoi(index) == 2)
			strcpy(busnum, "3");
		else
			return -1;
		get_USBHostsDeviceInfo(busnum, value, "idProduct"); //get ProductID
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DUUHtDt_ProductID(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DUUHtDt_ProductID, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DUUHtDt_VendorID(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUUHtDt_VendorID, value);
	if(ret)
	{
		return -1;
	}*/
	char busnum[8] = {0};
	char *index = parseTemplate(path_name, ".Host.");

	if (index != NULL)
	{
		if (atoi(index) == 1)
			strcpy(busnum, "1");
		else if (atoi(index) == 2)
			strcpy(busnum, "3");
		else
			return -1;
		get_USBHostsDeviceInfo(busnum, value, "idVendor"); //get VendorID
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DUUHtDt_VendorID(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DUUHtDt_VendorID, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DUUHtDt_Manufacturer(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUUHtDt_Manufacturer, value);
	if(ret)
	{
		return -1;
	}*/
	char busnum[8] = {0};
	char *index = parseTemplate(path_name, ".Host.");

	if (index != NULL)
	{
		if (atoi(index) == 1)
			strcpy(busnum, "1");
		else if (atoi(index) == 2)
			strcpy(busnum, "3");
		else
			return -1;
		get_USBHostsDeviceInfo(busnum, value, "manufacturer"); //get Manufacturer
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DUUHtDt_Manufacturer(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DUUHtDt_Manufacturer, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DUUHtDt_ProductClass(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUUHtDt_ProductClass, value);
	if(ret)
	{
		return -1;
	}*/
	char busnum[8] = {0};
	char *index = parseTemplate(path_name, ".Host.");

	if (index != NULL)
	{
		if (atoi(index) == 1)
			strcpy(busnum, "1");
		else if (atoi(index) == 2)
			strcpy(busnum, "3");
		else
			return -1;
		get_USBHostsDeviceInfo(busnum, value, "product"); //get ProductClass
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DUUHtDt_ProductClass(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DUUHtDt_ProductClass, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DUUHtDt_SerialNumber(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUUHtDt_SerialNumber, value);
	if(ret)
	{
		return -1;
	}*/
	char busnum[8] = {0};
	char *index = parseTemplate(path_name, ".Host.");

	if (index != NULL)
	{
		if (atoi(index) == 1)
			strcpy(busnum, "1");
		else if (atoi(index) == 2)
			strcpy(busnum, "3");
		else
			return -1;
		get_USBHostsDeviceInfo(busnum, value, "serial"); //get SerialNumber
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DUUHtDt_SerialNumber(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DUUHtDt_SerialNumber, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DUUHtDt_Port(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUUHtDt_Port, value);
	if(ret)
	{
		return -1;
	}*/
	char busnum[8] = {0};
	char *index = parseTemplate(path_name, ".Host.");

	if (index != NULL)
	{
		if (atoi(index) == 1)
			strcpy(busnum, "1");
		else if (atoi(index) == 2)
			strcpy(busnum, "3");
		else
			return -1;
		get_USBHostsDeviceInfo(busnum, value, "busnum"); //get Port
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUUHtDt_USBPort(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUUHtDt_USBPort, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Host.");

	if (index != NULL)
	{
		if (atoi(index) == 1)
			strcpy(value, "Device.USB.Port.1");
		else if (atoi(index) == 2)
			strcpy(value, "Device.USB.Port.2");
		else
			return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUUHtDt_Rate(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUUHtDt_Rate, value);
	if(ret)
	{
		return -1;
	}*/
	char busnum[8] = {0};
	char *index = parseTemplate(path_name, ".Host.");

	if (index != NULL)
	{
		if (atoi(index) == 1)
			strcpy(busnum, "1");
		else if (atoi(index) == 2)
			strcpy(busnum, "3");
		else
			return -1;
		get_USBHostsDeviceInfo(busnum, value, "speed"); //get Rate
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUUHtDt_Parent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUUHtDt_Parent, value);
	if(ret)
	{
		return -1;
	}*/
	char busnum[8] = {0};
	char *index = parseTemplate(path_name, ".Host.");

	if (index != NULL)
	{
		if (atoi(index) == 1)
			strcpy(busnum, "1");
		else if (atoi(index) == 2)
			strcpy(busnum, "3");
		else
			return -1;
		get_USBHostsDeviceInfo(busnum, value, "devpath"); //get Parent
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUUHtDt_MaxChildren(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUUHtDt_MaxChildren, value);
	if(ret)
	{
		return -1;
	}*/
	char busnum[8] = {0};
	char *index = parseTemplate(path_name, ".Host.");

	if (index != NULL)
	{
		if (atoi(index) == 1)
			strcpy(busnum, "1");
		else if (atoi(index) == 2)
			strcpy(busnum, "3");
		else
			return -1;
		get_USBHostsDeviceInfo(busnum, value, "maxchild"); //get MaxChildren
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUUHtDt_IsSuspended(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUUHtDt_IsSuspended, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUUHtDt_IsSelfPowered(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUUHtDt_IsSelfPowered, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUUHtDt_ConfigurationNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUUHtDt_ConfigurationNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "0"); //always 0, not support
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUUHtDtCt_ConfigurationNumber(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUUHtDtCt_ConfigurationNumber, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUUHtDtCt_InterfaceNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUUHtDtCt_InterfaceNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUUHtDtCtIt_InterfaceNumber(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUUHtDtCtIt_InterfaceNumber, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUUHtDtCtIt_nterfaceClass(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUUHtDtCtIt_nterfaceClass, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUUHtDtCtIt_InterfaceSubClass(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUUHtDtCtIt_InterfaceSubClass, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUUHtDtCtIt_InterfaceProtocol(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUUHtDtCtIt_InterfaceProtocol, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DH_InterfaceNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DH_InterfaceNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHIt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHIt_Enable, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DHIt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DHIt_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DHIt_Status(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHIt_Status, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHIt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHIt_Alias, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DHIt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DHIt_Alias, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DHIt_Name(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHIt_Name, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHIt_LastChange(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHIt_LastChange, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHIt_LowerLayers(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHIt_LowerLayers, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DHIt_LowerLayers(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DHIt_LowerLayers, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DHIt_Upstream(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHIt_Upstream, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHIt_MACAddress(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHIt_MACAddress, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHIt_FirmwareVersion(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHIt_FirmwareVersion, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHIt_NodeID(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHIt_NodeID, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHIt_IsMaster(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHIt_IsMaster, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHIt_Synced(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHIt_Synced, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHIt_TotalSyncTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHIt_TotalSyncTime, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHIt_MaxBitRate(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHIt_MaxBitRate, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHIt_NetworkUtilization(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHIt_NetworkUtilization, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHIt_PossibleConnectionTypes(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHIt_PossibleConnectionTypes, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHIt_ConnectionType(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHIt_ConnectionType, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DHIt_ConnectionType(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DHIt_ConnectionType, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DHIt_PossibleSpectralModes(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHIt_PossibleSpectralModes, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHIt_SpectralMode(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHIt_SpectralMode, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DHIt_SpectralMode(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DHIt_SpectralMode, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DHIt_MTU(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHIt_MTU, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DHIt_MTU(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DHIt_MTU, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DHIt_NoiseMargin(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHIt_NoiseMargin, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHIt_DefaultNonLARQPER(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHIt_DefaultNonLARQPER, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHIt_LARQEnable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHIt_LARQEnable, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHIt_MinMulticastRate(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHIt_MinMulticastRate, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHIt_NegMulticastRate(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHIt_NegMulticastRate, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHIt_MasterSelectionMode(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHIt_MasterSelectionMode, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DHIt_MasterSelectionMode(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DHIt_MasterSelectionMode, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DHIt_AssociatedDeviceNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHIt_AssociatedDeviceNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHItS_BytesSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHItS_BytesSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHItS_BytesReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHItS_BytesReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHItS_PacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHItS_PacketsSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHItS_PacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHItS_PacketsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHItS_ErrorsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHItS_ErrorsSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHItS_ErrorsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHItS_ErrorsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHItS_UnicastPacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHItS_UnicastPacketsSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHItS_UnicastPacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHItS_UnicastPacketsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHItS_DiscardPacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHItS_DiscardPacketsSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHItS_DiscardPacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHItS_DiscardPacketsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHItS_MulticastPacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHItS_MulticastPacketsSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHItS_MulticastPacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHItS_MulticastPacketsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHItS_BroadcastPacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHItS_BroadcastPacketsSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHItS_BroadcastPacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHItS_BroadcastPacketsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHItS_UnknownProtoPacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHItS_UnknownProtoPacketsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHItQ_FlowSpecNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHItQ_FlowSpecNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHItQFt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHItQFt_Enable, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DHItQFt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DHItQFt_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DHItQFt_Status(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHItQFt_Status, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHItQFt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHItQFt_Alias, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DHItQFt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DHItQFt_Alias, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DHItQFt_TrafficClasses(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHItQFt_TrafficClasses, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DHItQFt_TrafficClasses(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DHItQFt_TrafficClasses, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DHItQFt_FlowType(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHItQFt_FlowType, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DHItQFt_FlowType(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DHItQFt_FlowType, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DHItQFt_Priority(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHItQFt_Priority, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHItQFt_Latency(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHItQFt_Latency, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DHItQFt_Latency(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DHItQFt_Latency, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DHItQFt_Jitter(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHItQFt_Jitter, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DHItQFt_Jitter(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DHItQFt_Jitter, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DHItQFt_PacketSize(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHItQFt_PacketSize, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DHItQFt_PacketSize(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DHItQFt_PacketSize, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DHItQFt_MinRate(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHItQFt_MinRate, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DHItQFt_MinRate(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DHItQFt_MinRate, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DHItQFt_AvgRate(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHItQFt_AvgRate, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DHItQFt_AvgRate(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DHItQFt_AvgRate, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DHItQFt_MaxRate(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHItQFt_MaxRate, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DHItQFt_MaxRate(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DHItQFt_MaxRate, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DHItQFt_PER(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHItQFt_PER, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DHItQFt_PER(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DHItQFt_PER, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DHItQFt_Timeout(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHItQFt_Timeout, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DHItQFt_Timeout(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DHItQFt_Timeout, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DHItAt_MACAddress(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHItAt_MACAddress, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHItAt_NodeID(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHItAt_NodeID, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHItAt_IsMaster(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHItAt_IsMaster, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHItAt_Synced(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHItAt_Synced, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHItAt_TotalSyncTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHItAt_TotalSyncTime, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHItAt_MaxBitRate(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHItAt_MaxBitRate, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHItAt_PHYDiagnosticsEnable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHItAt_PHYDiagnosticsEnable, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DHItAt_PHYDiagnosticsEnable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DHItAt_PHYDiagnosticsEnable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DHItAt_Active(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHItAt_Active, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHDP_DiagnosticsState(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHDP_DiagnosticsState, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DHDP_DiagnosticsState(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DHDP_DiagnosticsState, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DHDP_Interface(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHDP_Interface, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DHDP_Interface(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DHDP_Interface, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DHDP_NumPacketsInBurst(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHDP_NumPacketsInBurst, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DHDP_NumPacketsInBurst(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DHDP_NumPacketsInBurst, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DHDP_BurstInterval(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHDP_BurstInterval, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DHDP_BurstInterval(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DHDP_BurstInterval, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DHDP_TestPacketPayloadLength(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHDP_TestPacketPayloadLength, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DHDP_TestPacketPayloadLength(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DHDP_TestPacketPayloadLength, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DHDP_PayloadEncoding(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHDP_PayloadEncoding, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DHDP_PayloadEncoding(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DHDP_PayloadEncoding, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DHDP_PayloadDataGen(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHDP_PayloadDataGen, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DHDP_PayloadDataGen(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DHDP_PayloadDataGen, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DHDP_PayloadType(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHDP_PayloadType, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DHDP_PayloadType(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DHDP_PayloadType, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DHDP_PriorityLevel(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHDP_PriorityLevel, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DHDP_PriorityLevel(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DHDP_PriorityLevel, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DHDP_ResultNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHDP_ResultNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHDPRt_SrcMACAddress(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHDPRt_SrcMACAddress, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHDPRt_DestMACAddress(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHDPRt_DestMACAddress, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHDPRt_PHYRate(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHDPRt_PHYRate, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHDPRt_BaudRate(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHDPRt_BaudRate, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHDPRt_SNR(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHDPRt_SNR, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHDPRt_PacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHDPRt_PacketsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHDPRt_Attenuation(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHDPRt_Attenuation, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHDP_DiagnosticsState_1161(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHDP_DiagnosticsState_1161, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DHDP_DiagnosticsState_1161(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DHDP_DiagnosticsState_1161, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DHDP_Interface_1163(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHDP_Interface_1163, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DHDP_Interface_1163(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DHDP_Interface_1163, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DHDP_SampleInterval(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHDP_SampleInterval, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DHDP_SampleInterval(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DHDP_SampleInterval, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DHDPN_CurrentStart(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHDPN_CurrentStart, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHDPN_CurrentEnd(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHDPN_CurrentEnd, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHDPN_NodeNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHDPN_NodeNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHDPNNt_MACAddress(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHDPNNt_MACAddress, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHDPNNt_BytesSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHDPNNt_BytesSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHDPNNt_BytesReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHDPNNt_BytesReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHDPNNt_PacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHDPNNt_PacketsSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHDPNNt_PacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHDPNNt_PacketsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHDPNNt_BroadcastPacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHDPNNt_BroadcastPacketsSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHDPNNt_BroadcastPacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHDPNNt_BroadcastPacketsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHDPNNt_MulticastPacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHDPNNt_MulticastPacketsSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHDPNNt_MulticastPacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHDPNNt_MulticastPacketsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHDPNNt_PacketsCrcErrored(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHDPNNt_PacketsCrcErrored, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHDPNNt_PacketsCrcErroredHost(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHDPNNt_PacketsCrcErroredHost, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHDPNNt_PacketsShortErrored(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHDPNNt_PacketsShortErrored, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHDPNNt_PacketsShortErroredHost(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHDPNNt_PacketsShortErroredHost, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHDPNNt_RxPacketsDropped(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHDPNNt_RxPacketsDropped, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHDPNNt_TxPacketsDropped(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHDPNNt_TxPacketsDropped, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHDPNNt_ControlRequestLocal(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHDPNNt_ControlRequestLocal, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHDPNNt_ControlReplyLocal(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHDPNNt_ControlReplyLocal, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHDPNNt_ControlRequestRemote(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHDPNNt_ControlRequestRemote, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHDPNNt_ControlReplyRemote(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHDPNNt_ControlReplyRemote, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHDPNNt_PacketsSentWire(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHDPNNt_PacketsSentWire, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHDPNNt_BroadcastPacketsSentWire(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHDPNNt_BroadcastPacketsSentWire, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHDPNNt_MulticastPacketsSentWire(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHDPNNt_MulticastPacketsSentWire, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHDPNNt_PacketsInternalControl(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHDPNNt_PacketsInternalControl, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHDPNNt_BroadcastPacketsInternalControl(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHDPNNt_BroadcastPacketsInternalControl, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHDPNNt_PacketsReceivedQueued(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHDPNNt_PacketsReceivedQueued, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHDPNNt_PacketsReceivedForwardUnknown(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHDPNNt_PacketsReceivedForwardUnknown, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHDPNNt_NodeUtilization(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHDPNNt_NodeUtilization, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHDPC_TimeStamp(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHDPC_TimeStamp, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHDPC_ChannelNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHDPC_ChannelNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHDPCCt_HostSrcMACAddress(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHDPCCt_HostSrcMACAddress, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHDPCCt_HostDestMACAddress(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHDPCCt_HostDestMACAddress, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHDPCCt_HPNASrcMACAddress(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHDPCCt_HPNASrcMACAddress, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHDPCCt_HPNADestMACAddress(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHDPCCt_HPNADestMACAddress, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHDPCCt_PHYRate(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHDPCCt_PHYRate, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHDPCCt_BaudRate(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHDPCCt_BaudRate, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHDPCCt_SNR(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHDPCCt_SNR, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHDPCCt_PacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHDPCCt_PacketsSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHDPCCt_PacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHDPCCt_PacketsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHDPCCt_LARQPacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHDPCCt_LARQPacketsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHDPCCt_FlowSpec(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHDPCCt_FlowSpec, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DM_InterfaceNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DM_InterfaceNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMIt_Enable_1211(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMIt_Enable_1211, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DMIt_Enable_1211(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DMIt_Enable_1211, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DMIt_Status(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMIt_Status, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMIt_Alias_1214(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMIt_Alias_1214, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DMIt_Alias_1214(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DMIt_Alias_1214, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DMIt_Name(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMIt_Name, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMIt_LastChange(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMIt_LastChange, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMIt_LowerLayers(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMIt_LowerLayers, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DMIt_LowerLayers(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DMIt_LowerLayers, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DMIt_Upstream(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMIt_Upstream, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMIt_MACAddress(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMIt_MACAddress, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMIt_FirmwareVersion(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMIt_FirmwareVersion, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMIt_MaxBitRate(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMIt_MaxBitRate, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMIt_MaxIngressBW(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMIt_MaxIngressBW, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMIt_MaxEgressBW(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMIt_MaxEgressBW, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMIt_HighestVersion(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMIt_HighestVersion, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMIt_CurrentVersion(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMIt_CurrentVersion, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMIt_NetworkCoordinator(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMIt_NetworkCoordinator, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMIt_NodeID(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMIt_NodeID, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMIt_MaxNodes(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMIt_MaxNodes, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMIt_PreferredNC(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMIt_PreferredNC, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DMIt_PreferredNC(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DMIt_PreferredNC, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DMIt_BackupNC(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMIt_BackupNC, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMIt_PrivacyEnabledSetting(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMIt_PrivacyEnabledSetting, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DMIt_PrivacyEnabledSetting(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DMIt_PrivacyEnabledSetting, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DMIt_PrivacyEnabled(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMIt_PrivacyEnabled, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMIt_FreqCapabilityMask(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMIt_FreqCapabilityMask, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMIt_FreqCurrentMaskSetting(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMIt_FreqCurrentMaskSetting, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DMIt_FreqCurrentMaskSetting(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DMIt_FreqCurrentMaskSetting, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DMIt_FreqCurrentMask(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMIt_FreqCurrentMask, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMIt_CurrentOperFreq(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMIt_CurrentOperFreq, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMIt_LastOperFreq(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMIt_LastOperFreq, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMIt_KeyPassphrase(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMIt_KeyPassphrase, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DMIt_KeyPassphrase(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DMIt_KeyPassphrase, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DMIt_TxPowerLimit(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMIt_TxPowerLimit, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DMIt_TxPowerLimit(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DMIt_TxPowerLimit, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DMIt_PowerCntlPhyTarget(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMIt_PowerCntlPhyTarget, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DMIt_PowerCntlPhyTarget(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DMIt_PowerCntlPhyTarget, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DMIt_BeaconPowerLimit(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMIt_BeaconPowerLimit, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DMIt_BeaconPowerLimit(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DMIt_BeaconPowerLimit, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DMIt_NetworkTabooMask(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMIt_NetworkTabooMask, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DMIt_NetworkTabooMask(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DMIt_NetworkTabooMask, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DMIt_TxBcastRate(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMIt_TxBcastRate, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DMIt_TxBcastRate(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DMIt_TxBcastRate, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DMIt_TxBcastPowerReduction(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMIt_TxBcastPowerReduction, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DMIt_TxBcastPowerReduction(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DMIt_TxBcastPowerReduction, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DMIt_QAM256Capable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMIt_QAM256Capable, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DMIt_QAM256Capable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DMIt_QAM256Capable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DMIt_PacketAggregationCapability(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMIt_PacketAggregationCapability, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DMIt_PacketAggregationCapability(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DMIt_PacketAggregationCapability, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DMIt_AssociatedDeviceNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMIt_AssociatedDeviceNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DMIt_AssociatedDeviceNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DMIt_AssociatedDeviceNumberOfEntries, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DMItS_BytesSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMItS_BytesSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMItS_BytesReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMItS_BytesReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMItS_PacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMItS_PacketsSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMItS_PacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMItS_PacketsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMItS_ErrorsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMItS_ErrorsSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMItS_ErrorsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMItS_ErrorsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMItS_UnicastPacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMItS_UnicastPacketsSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMItS_UnicastPacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMItS_UnicastPacketsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMItS_DiscardPacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMItS_DiscardPacketsSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMItS_DiscardPacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMItS_DiscardPacketsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMItS_MulticastPacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMItS_MulticastPacketsSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMItS_MulticastPacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMItS_MulticastPacketsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMItS_BroadcastPacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMItS_BroadcastPacketsSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMItS_BroadcastPacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMItS_BroadcastPacketsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMItS_UnknownProtoPacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMItS_UnknownProtoPacketsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMItQ_EgressNumFlows(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMItQ_EgressNumFlows, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMItQ_IngressNumFlows(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMItQ_IngressNumFlows, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMItQ_FlowStatsNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMItQ_FlowStatsNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMItQFt_FlowID(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMItQFt_FlowID, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMItQFt_PacketDA(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMItQFt_PacketDA, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMItQFt_MaxRate(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMItQFt_MaxRate, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMItQFt_MaxBurstSize(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMItQFt_MaxBurstSize, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMItQFt_LeaseTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMItQFt_LeaseTime, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMItQFt_LeaseTimeLeft(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMItQFt_LeaseTimeLeft, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMItQFt_FlowPackets(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMItQFt_FlowPackets, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMItAt_MACAddress(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMItAt_MACAddress, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMItAt_NodeID(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMItAt_NodeID, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMItAt_PreferredNC(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMItAt_PreferredNC, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMItAt_HighestVersion(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMItAt_HighestVersion, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMItAt_PHYTxRate(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMItAt_PHYTxRate, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMItAt_PHYRxRate(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMItAt_PHYRxRate, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMItAt_TxPowerControlReduction(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMItAt_TxPowerControlReduction, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMItAt_RxPowerLevel(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMItAt_RxPowerLevel, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMItAt_TxBcastRate(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMItAt_TxBcastRate, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMItAt_RxBcastPowerLevel(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMItAt_RxBcastPowerLevel, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMItAt_TxPackets(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMItAt_TxPackets, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMItAt_RxPackets(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMItAt_RxPackets, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMItAt_RxErroredAndMissedPackets(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMItAt_RxErroredAndMissedPackets, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMItAt_QAM256Capable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMItAt_QAM256Capable, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMItAt_PacketAggregationCapability(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMItAt_PacketAggregationCapability, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMItAt_RxSNR(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMItAt_RxSNR, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMItAt_Active(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DMItAt_Active, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DG_InterfaceNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DG_InterfaceNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGIt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGIt_Enable, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DGIt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DGIt_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DGIt_Status(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGIt_Status, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGIt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGIt_Alias, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DGIt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DGIt_Alias, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DGIt_Name(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGIt_Name, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGIt_LastChange(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGIt_LastChange, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGIt_LowerLayers(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGIt_LowerLayers, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DGIt_LowerLayers(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DGIt_LowerLayers, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DGIt_Upstream(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGIt_Upstream, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGIt_MACAddress(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGIt_MACAddress, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGIt_FirmwareVersion(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGIt_FirmwareVersion, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGIt_ConnectionType(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGIt_ConnectionType, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGIt_MaxTransmitRate(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGIt_MaxTransmitRate, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGIt_TargetDomainNames(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGIt_TargetDomainNames, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DGIt_TargetDomainNames(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DGIt_TargetDomainNames, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DGIt_DomainName(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGIt_DomainName, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGIt_DomainNameIdentifier(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGIt_DomainNameIdentifier, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGIt_DomainId(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGIt_DomainId, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGIt_DeviceId(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGIt_DeviceId, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGIt_MaxBitRate(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGIt_MaxBitRate, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGIt_NodeTypeDMCapable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGIt_NodeTypeDMCapable, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGIt_DMRequested(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGIt_DMRequested, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DGIt_DMRequested(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DGIt_DMRequested, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DGIt_IsDM(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGIt_IsDM, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGIt_NodeTypeSCCapable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGIt_NodeTypeSCCapable, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGIt_SCRequested(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGIt_SCRequested, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DGIt_SCRequested(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DGIt_SCRequested, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DGIt_IsSC(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGIt_IsSC, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGIt_StandardVersions(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGIt_StandardVersions, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGIt_MaxBandPlan(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGIt_MaxBandPlan, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGIt_MediumType(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGIt_MediumType, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGIt_TAIFG(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGIt_TAIFG, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGIt_NotchedAmateurRadioBands(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGIt_NotchedAmateurRadioBands, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGIt_PHYThroughputDiagnosticsEnable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGIt_PHYThroughputDiagnosticsEnable, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGIt_PerformanceMonitoringDiagnosticsEnable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGIt_PerformanceMonitoringDiagnosticsEnable, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGIt_SMMaskedBandNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGIt_SMMaskedBandNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGIt_NodeTypeDMConfig(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGIt_NodeTypeDMConfig, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGIt_NodeTypeDMStatus(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGIt_NodeTypeDMStatus, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGIt_NodeTypeSCStatus(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGIt_NodeTypeSCStatus, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGIt_AssociatedDeviceNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGIt_AssociatedDeviceNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGItD_DomainName(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGItD_DomainName, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DGItD_DomainName(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DGItD_DomainName, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DGItD_DomainNameIdentifier(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGItD_DomainNameIdentifier, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGItD_DomainId(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGItD_DomainId, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGItD_MACCycleDuration(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGItD_MACCycleDuration, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DGItD_MACCycleDuration(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DGItD_MACCycleDuration, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DGItD_SCDeviceId(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGItD_SCDeviceId, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DGItD_SCDeviceId(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DGItD_SCDeviceId, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DGItD_SCMACAddress(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGItD_SCMACAddress, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DGItD_SCMACAddress(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DGItD_SCMACAddress, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DGItD_ReregistrationTimePeriod(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGItD_ReregistrationTimePeriod, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DGItD_ReregistrationTimePeriod(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DGItD_ReregistrationTimePeriod, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DGItD_TopologyPeriodicInterval(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGItD_TopologyPeriodicInterval, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DGItD_TopologyPeriodicInterval(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DGItD_TopologyPeriodicInterval, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DGItD_MinSupportedBandplan(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGItD_MinSupportedBandplan, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DGItD_MinSupportedBandplan(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DGItD_MinSupportedBandplan, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DGItD_MaxSupportedBandplan(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGItD_MaxSupportedBandplan, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DGItD_MaxSupportedBandplan(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DGItD_MaxSupportedBandplan, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DGItS_ModesSupported(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGItS_ModesSupported, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGItS_ModeEnabled(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGItS_ModeEnabled, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DGItS_ModeEnabled(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DGItS_ModeEnabled, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DGItS_MICSize(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGItS_MICSize, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DGItS_MICSize(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DGItS_MICSize, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DGItS_Location(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGItS_Location, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGItSt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGItSt_Enable, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DGItSt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DGItSt_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DGItSt_BandNumber(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGItSt_BandNumber, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DGItSt_BandNumber(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DGItSt_BandNumber, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DGItSt_StartSubCarrier(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGItSt_StartSubCarrier, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DGItSt_StartSubCarrier(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DGItSt_StartSubCarrier, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DGItSt_StopSubCarrier(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGItSt_StopSubCarrier, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DGItSt_StopSubCarrier(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DGItSt_StopSubCarrier, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DGItS_BytesSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGItS_BytesSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGItS_BytesReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGItS_BytesReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGItS_PacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGItS_PacketsSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGItS_PacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGItS_PacketsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGItS_ErrorsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGItS_ErrorsSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGItS_ErrorsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGItS_ErrorsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGItS_UnicastPacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGItS_UnicastPacketsSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGItS_UnicastPacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGItS_UnicastPacketsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGItS_DiscardPacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGItS_DiscardPacketsSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGItS_DiscardPacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGItS_DiscardPacketsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGItS_MulticastPacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGItS_MulticastPacketsSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGItS_MulticastPacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGItS_MulticastPacketsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGItS_BroadcastPacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGItS_BroadcastPacketsSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGItS_BroadcastPacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGItS_BroadcastPacketsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGItS_UnknownProtoPacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGItS_UnknownProtoPacketsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGItS_MgmtBytesSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGItS_MgmtBytesSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGItS_MgmtBytesReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGItS_MgmtBytesReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGItS_MgmtPacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGItS_MgmtPacketsSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGItS_MgmtPacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGItS_MgmtPacketsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGItS_BlocksSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGItS_BlocksSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGItS_BlocksReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGItS_BlocksReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGItS_BlocksResent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGItS_BlocksResent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGItS_BlocksErrorsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGItS_BlocksErrorsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGItAt_MACAddress(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGItAt_MACAddress, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DGItAt_MACAddress(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DGItAt_MACAddress, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DGItAt_DeviceId(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGItAt_DeviceId, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGItAt_TxPhyRate(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGItAt_TxPhyRate, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DGItAt_TxPhyRate(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DGItAt_TxPhyRate, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DGItAt_RxPhyRate(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGItAt_RxPhyRate, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DGItAt_RxPhyRate(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DGItAt_RxPhyRate, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DGItAt_Active(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGItAt_Active, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DGItAt_Active(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DGItAt_Active, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DGDP_DiagnosticsState(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGDP_DiagnosticsState, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DGDP_DiagnosticsState(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DGDP_DiagnosticsState, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DGDP_Interface(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGDP_Interface, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DGDP_Interface(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DGDP_Interface, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DGDP_DiagnoseMACAddress(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGDP_DiagnoseMACAddress, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DGDP_DiagnoseMACAddress(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DGDP_DiagnoseMACAddress, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DGDP_PHYThroughputResultNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGDP_PHYThroughputResultNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGDPRt_DestinationMACAddress(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGDPRt_DestinationMACAddress, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DGDPRt_DestinationMACAddress(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DGDPRt_DestinationMACAddress, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DGDPRt_LinkState(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGDPRt_LinkState, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGDPRt_TxPhyRate(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGDPRt_TxPhyRate, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DGDPRt_TxPhyRate(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DGDPRt_TxPhyRate, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DGDPRt_RxPhyRate(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGDPRt_RxPhyRate, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DGDPRt_RxPhyRate(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DGDPRt_RxPhyRate, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DGDP_DiagnosticsState_1425(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGDP_DiagnosticsState_1425, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DGDP_DiagnosticsState_1425(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DGDP_DiagnosticsState_1425, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DGDP_Interface_1427(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGDP_Interface_1427, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DGDP_Interface_1427(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DGDP_Interface_1427, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DGDP_DiagnoseMACAddress_1429(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGDP_DiagnoseMACAddress_1429, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DGDP_DiagnoseMACAddress_1429(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DGDP_DiagnoseMACAddress_1429, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DGDP_SampleInterval(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGDP_SampleInterval, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DGDP_SampleInterval(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DGDP_SampleInterval, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DGDP_SNRGroupLength(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGDP_SNRGroupLength, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DGDP_SNRGroupLength(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DGDP_SNRGroupLength, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DGDPN_CurrentStart(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGDPN_CurrentStart, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGDPN_CurrentEnd(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGDPN_CurrentEnd, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DGDPN_CurrentEnd(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DGDPN_CurrentEnd, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DGDPN_NodeNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGDPN_NodeNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DGDPN_NodeNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DGDPN_NodeNumberOfEntries, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DGDPNNt_DestinationMACAddress(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGDPNNt_DestinationMACAddress, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGDPNNt_BytesSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGDPNNt_BytesSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGDPNNt_BytesReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGDPNNt_BytesReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGDPNNt_PacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGDPNNt_PacketsSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGDPNNt_PacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGDPNNt_PacketsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGDPNNt_ErrorsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGDPNNt_ErrorsSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGDPNNt_ErrorsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGDPNNt_ErrorsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGDPNNt_UnicastPacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGDPNNt_UnicastPacketsSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGDPNNt_UnicastPacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGDPNNt_UnicastPacketsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGDPNNt_DiscardPacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGDPNNt_DiscardPacketsSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGDPNNt_DiscardPacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGDPNNt_DiscardPacketsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGDPNNt_MulticastPacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGDPNNt_MulticastPacketsSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGDPNNt_MulticastPacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGDPNNt_MulticastPacketsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGDPNNt_BroadcastPacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGDPNNt_BroadcastPacketsSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGDPNNt_BroadcastPacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGDPNNt_BroadcastPacketsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGDPNNt_UnknownProtoPacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGDPNNt_UnknownProtoPacketsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGDPNNt_MgmtBytesSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGDPNNt_MgmtBytesSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGDPNNt_MgmtBytesReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGDPNNt_MgmtBytesReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGDPNNt_MgmtPacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGDPNNt_MgmtPacketsSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGDPNNt_MgmtPacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGDPNNt_MgmtPacketsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGDPNNt_BlocksSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGDPNNt_BlocksSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGDPNNt_BlocksReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGDPNNt_BlocksReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGDPNNt_BlocksResent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGDPNNt_BlocksResent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGDPNNt_BlocksErrorsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGDPNNt_BlocksErrorsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGDPC_TimeStamp(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGDPC_TimeStamp, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGDPC_ChannelNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGDPC_ChannelNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DGDPC_ChannelNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DGDPC_ChannelNumberOfEntries, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DGDPCCt_DestinationMACAddress(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGDPCCt_DestinationMACAddress, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGDPCCt_SNR(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DGDPCCt_SNR, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DH_InterfaceNumberOfEntries_1469(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DH_InterfaceNumberOfEntries_1469, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHIt_Enable_1470(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHIt_Enable_1470, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DHIt_Enable_1470(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DHIt_Enable_1470, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DHIt_Status_1472(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHIt_Status_1472, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHIt_Alias_1473(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHIt_Alias_1473, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DHIt_Alias_1473(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DHIt_Alias_1473, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DHIt_Name_1475(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHIt_Name_1475, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHIt_LastChange_1476(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHIt_LastChange_1476, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHIt_LowerLayers_1477(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHIt_LowerLayers_1477, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DHIt_LowerLayers_1477(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DHIt_LowerLayers_1477, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DHIt_Upstream_1479(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHIt_Upstream_1479, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHIt_MACAddress_1480(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHIt_MACAddress_1480, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHIt_LogicalNetwork(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHIt_LogicalNetwork, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DHIt_LogicalNetwork(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DHIt_LogicalNetwork, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DHIt_Version(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHIt_Version, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHIt_FirmwareVersion_1484(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHIt_FirmwareVersion_1484, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHIt_ForceCCo(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHIt_ForceCCo, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DHIt_ForceCCo(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DHIt_ForceCCo, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DHIt_NetworkPassword(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHIt_NetworkPassword, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DHIt_NetworkPassword(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DHIt_NetworkPassword, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DHIt_OtherNetworksPresent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHIt_OtherNetworksPresent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHIt_MaxBitRate_1490(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHIt_MaxBitRate_1490, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHIt_AssociatedDeviceNumberOfEntries_1491(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHIt_AssociatedDeviceNumberOfEntries_1491, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHItS_BytesSent_1492(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHItS_BytesSent_1492, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHItS_BytesReceived_1493(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHItS_BytesReceived_1493, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHItS_PacketsSent_1494(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHItS_PacketsSent_1494, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHItS_PacketsReceived_1495(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHItS_PacketsReceived_1495, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHItS_ErrorsSent_1496(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHItS_ErrorsSent_1496, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHItS_ErrorsReceived_1497(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHItS_ErrorsReceived_1497, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHItS_UnicastPacketsSent_1498(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHItS_UnicastPacketsSent_1498, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHItS_UnicastPacketsReceived_1499(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHItS_UnicastPacketsReceived_1499, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHItS_DiscardPacketsSent_1500(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHItS_DiscardPacketsSent_1500, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHItS_DiscardPacketsReceived_1501(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHItS_DiscardPacketsReceived_1501, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHItS_MulticastPacketsSent_1502(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHItS_MulticastPacketsSent_1502, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHItS_MulticastPacketsReceived_1503(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHItS_MulticastPacketsReceived_1503, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHItS_BroadcastPacketsSent_1504(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHItS_BroadcastPacketsSent_1504, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHItS_BroadcastPacketsReceived_1505(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHItS_BroadcastPacketsReceived_1505, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHItS_UnknownProtoPacketsReceived_1506(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHItS_UnknownProtoPacketsReceived_1506, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHItS_MPDUTxAck(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHItS_MPDUTxAck, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHItS_MPDUTxCol(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHItS_MPDUTxCol, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHItS_MPDUTxFailed(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHItS_MPDUTxFailed, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHItS_MPDURxAck(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHItS_MPDURxAck, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHItS_MPDURxFailed(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHItS_MPDURxFailed, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHItAt_MACAddress_1512(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHItAt_MACAddress_1512, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHItAt_TxPhyRate(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHItAt_TxPhyRate, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHItAt_RxPhyRate(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHItAt_RxPhyRate, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHItAt_SNRPerTone(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHItAt_SNRPerTone, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHItAt_AvgAttenuation(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHItAt_AvgAttenuation, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHItAt_EndStationMACs(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHItAt_EndStationMACs, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHItAt_Active_1518(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DHItAt_Active_1518, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DU_InterfaceNumberOfEntries_1519(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DU_InterfaceNumberOfEntries_1519, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUIt_Enable_1520(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUIt_Enable_1520, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DUIt_Enable_1520(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DUIt_Enable_1520, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DUIt_Status_1522(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUIt_Status_1522, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUIt_Alias_1523(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUIt_Alias_1523, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DUIt_Alias_1523(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DUIt_Alias_1523, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DUIt_Name_1525(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUIt_Name_1525, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUIt_LastChange_1526(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUIt_LastChange_1526, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUIt_LowerLayers_1527(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUIt_LowerLayers_1527, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DUIt_LowerLayers_1527(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DUIt_LowerLayers_1527, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DUIt_Upstream_1529(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUIt_Upstream_1529, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUIt_MACAddress_1530(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUIt_MACAddress_1530, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUIt_FirmwareVersion(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUIt_FirmwareVersion, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUIt_MaxBitRate_1532(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUIt_MaxBitRate_1532, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUIt_NodeType(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUIt_NodeType, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DUIt_NodeType(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DUIt_NodeType, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DUIt_LogicalNetwork(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUIt_LogicalNetwork, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DUIt_LogicalNetwork(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DUIt_LogicalNetwork, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DUIt_EncryptionMethod(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUIt_EncryptionMethod, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DUIt_EncryptionMethod(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DUIt_EncryptionMethod, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DUIt_EncryptionKey(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUIt_EncryptionKey, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DUIt_EncryptionKey(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DUIt_EncryptionKey, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DUIt_PowerBackoffEnabled(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUIt_PowerBackoffEnabled, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DUIt_PowerBackoffEnabled(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DUIt_PowerBackoffEnabled, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DUIt_PowerBackoffMechanismActive(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUIt_PowerBackoffMechanismActive, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUIt_EstApplicationThroughput(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUIt_EstApplicationThroughput, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUIt_ActiveNotchEnable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUIt_ActiveNotchEnable, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DUIt_ActiveNotchEnable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DUIt_ActiveNotchEnable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DUIt_ActiveNotchNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUIt_ActiveNotchNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUIt_AssociatedDeviceNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUIt_AssociatedDeviceNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUIt_BridgeForNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUIt_BridgeForNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUItS_BytesSent_1550(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUItS_BytesSent_1550, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUItS_BytesReceived_1551(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUItS_BytesReceived_1551, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUItS_PacketsSent_1552(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUItS_PacketsSent_1552, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUItS_PacketsReceived_1553(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUItS_PacketsReceived_1553, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUItS_ErrorsSent_1554(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUItS_ErrorsSent_1554, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUItS_ErrorsReceived_1555(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUItS_ErrorsReceived_1555, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUItS_UnicastPacketsSent_1556(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUItS_UnicastPacketsSent_1556, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUItS_UnicastPacketsReceived_1557(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUItS_UnicastPacketsReceived_1557, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUItS_DiscardPacketsSent_1558(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUItS_DiscardPacketsSent_1558, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUItS_DiscardPacketsReceived_1559(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUItS_DiscardPacketsReceived_1559, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUItS_MulticastPacketsSent_1560(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUItS_MulticastPacketsSent_1560, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUItS_MulticastPacketsReceived_1561(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUItS_MulticastPacketsReceived_1561, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUItS_BroadcastPacketsSent_1562(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUItS_BroadcastPacketsSent_1562, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUItS_BroadcastPacketsReceived_1563(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUItS_BroadcastPacketsReceived_1563, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUItS_UnknownProtoPacketsReceived_1564(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUItS_UnknownProtoPacketsReceived_1564, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUItAt_MACAddress(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUItAt_MACAddress, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUItAt_Port(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUItAt_Port, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUItAt_LogicalNetwork(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUItAt_LogicalNetwork, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUItAt_PhyTxThroughput(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUItAt_PhyTxThroughput, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUItAt_PhyRxThroughput(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUItAt_PhyRxThroughput, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUItAt_RealPhyRxThroughput(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUItAt_RealPhyRxThroughput, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUItAt_EstimatedPLR(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUItAt_EstimatedPLR, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUItAt_MeanEstimatedAtt(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUItAt_MeanEstimatedAtt, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUItAt_SmartRouteIntermediatePLCMAC(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUItAt_SmartRouteIntermediatePLCMAC, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUItAt_DirectRoute(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUItAt_DirectRoute, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUItAt_Active(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUItAt_Active, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUItAt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUItAt_Enable, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DUItAt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DUItAt_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DUItAt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUItAt_Alias, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DUItAt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DUItAt_Alias, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DUItAt_StartFreq(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUItAt_StartFreq, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DUItAt_StartFreq(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DUItAt_StartFreq, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DUItAt_StopFreq(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUItAt_StopFreq, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DUItAt_StopFreq(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DUItAt_StopFreq, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DUItAt_Depth(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUItAt_Depth, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DUItAt_Depth(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DUItAt_Depth, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DUItBt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUItBt_Alias, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DUItBt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DUItBt_Alias, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DUItBt_MACAddress(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUItBt_MACAddress, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUItBt_Port(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUItBt_Port, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUDI_DiagnosticsState(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUDI_DiagnosticsState, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DUDI_DiagnosticsState(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DUDI_DiagnosticsState, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DUDI_Type(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUDI_Type, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DUDI_Type(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DUDI_Type, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DUDI_Interface(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUDI_Interface, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DUDI_Interface(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DUDI_Interface, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DUDI_Port(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUDI_Port, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DUDI_Port(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DUDI_Port, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DUDI_Measurements(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUDI_Measurements, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUDI_RxGain(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUDI_RxGain, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWX_Charter_BS_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LBD_CONFIG_ENABLE, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWX_Charter_BS_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(LBD_CONFIG_ENABLE, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(LBD);
		if(ret)
		{
			return (-1);
		}
	}
	ret = doBandSteeringFuncs();
	if(ret)
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
/*int get_DWX_Charter_BS_MatchingSSID(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LBD_CONFIG_MATCHINGSSID, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWX_Charter_BS_MatchingSSID(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(LBD_CONFIG_MATCHINGSSID, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(LBD);
		if(ret)
		{
			return (-1);
		}
	}
	ret = doBandSteeringFuncs();
	if(ret)
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}*/
int get_DWX_Charter_BS_PHYBasedPrioritization(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LBD_CONFIG_PHYBASEDPROIORITIZATION, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWX_Charter_BS_PHYBasedPrioritization(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(LBD_CONFIG_PHYBASEDPROIORITIZATION, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(LBD);
		if(ret)
		{
			return (-1);
		}
	}
	ret = doBandSteeringFuncs();
	if(ret)
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWX_Charter_BS_AgeLimit(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LBD_CONFIG_AGELIMIT, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWX_Charter_BS_AgeLimit(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(LBD_CONFIG_AGELIMIT, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(LBD);
		if(ret)
		{
			return (-1);
		}
	}
	ret = doBandSteeringFuncs();
	if(ret)
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWX_Charter_BSS_IncludeOutOfNetwork(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LBD_STADB_INCLUDEOUTOFNETWORK, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWX_Charter_BSS_IncludeOutOfNetwork(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(LBD_STADB_INCLUDEOUTOFNETWORK, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(LBD);
		if(ret)
		{
			return (-1);
		}
	}
	ret = doBandSteeringFuncs();
	if(ret)
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWX_Charter_BSS_MarkAdvClientAsDualBand(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LBD_STADB_MARKADVCLIENTSDUALBAND, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWX_Charter_BSS_MarkAdvClientAsDualBand(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(LBD_STADB_MARKADVCLIENTSDUALBAND, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(LBD);
		if(ret)
		{
			return (-1);
		}
	}
	ret = doBandSteeringFuncs();
	if(ret)
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWX_Charter_BSS_AgingSizeThreshold(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LBD_STADB_AGINGSIZETHRESHOLD, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWX_Charter_BSS_AgingSizeThreshold(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(LBD_STADB_AGINGSIZETHRESHOLD, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(LBD);
		if(ret)
		{
			return (-1);
		}
	}
	ret = doBandSteeringFuncs();
	if(ret)
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWX_Charter_BSS_AgingFrequency(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LBD_STADB_AGINGFREQUENCY, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWX_Charter_BSS_AgingFrequency(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(LBD_STADB_AGINGFREQUENCY, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(LBD);
		if(ret)
		{
			return (-1);
		}
	}
	ret = doBandSteeringFuncs();
	if(ret)
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}

int get_DWX_Charter_BSS_OutOfNetworkMaxAge(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LBD_STADB_OUTOFNETWORKMAXAGE, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWX_Charter_BSS_OutOfNetworkMaxAge(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(LBD_STADB_OUTOFNETWORKMAXAGE, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(LBD);
		if(ret)
		{
			return (-1);
		}
	}
	ret = doBandSteeringFuncs();
	if(ret)
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}

int get_DWX_Charter_BSS_InNetworkMaxAge(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LBD_STADB_INNETWORKMAXAGE, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWX_Charter_BSS_InNetworkMaxAge(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(LBD_STADB_INNETWORKMAXAGE, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(LBD);
		if(ret)
		{
			return (-1);
		}
	}
	ret = doBandSteeringFuncs();
	if(ret)
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}

int get_DWX_Charter_BSS_NumRemoteBSSes(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LBD_STADB_NUMREMOTEBSSES, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWX_Charter_BSS_NumRemoteBSSes(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(LBD_STADB_NUMREMOTEBSSES, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(LBD);
		if(ret)
		{
			return (-1);
		}
	}
	ret = doBandSteeringFuncs();
	if(ret)
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}

int get_DWX_Charter_BSS_PopulateNonServingPHYInfo(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LBD_STADB_POPULATENONSERVINGPHYINFO, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWX_Charter_BSS_PopulateNonServingPHYInfo(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(LBD_STADB_POPULATENONSERVINGPHYINFO, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(LBD);
		if(ret)
		{
			return (-1);
		}
	}
	ret = doBandSteeringFuncs();
	if(ret)
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWX_Charter_BSI_RSSISteeringPoint_DG(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LBD_IDLESTEER_RSSISTEERINGPOINT_DG, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWX_Charter_BSI_RSSISteeringPoint_DG(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(LBD_IDLESTEER_RSSISTEERINGPOINT_DG, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(LBD);
		if(ret)
		{
			return (-1);
		}
	}
	ret = doBandSteeringFuncs();
	if(ret)
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWX_Charter_BSI_RSSISteeringPoint_UG(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LBD_IDLESTEER_RSSISTEERINGPOINT_UG, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWX_Charter_BSI_RSSISteeringPoint_UG(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(LBD_IDLESTEER_RSSISTEERINGPOINT_UG, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(LBD);
		if(ret)
		{
			return (-1);
		}
	}
	ret = doBandSteeringFuncs();
	if(ret)
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWX_Charter_BSI_NormalInactTimeout(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LBD_IDLESTEER_NORMALINACTTIMEOUT, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWX_Charter_BSI_NormalInactTimeout(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(LBD_IDLESTEER_NORMALINACTTIMEOUT, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(LBD);
		if(ret)
		{
			return (-1);
		}
	}
	ret = doBandSteeringFuncs();
	if(ret)
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWX_Charter_BSI_OverloadInactTimeout(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LBD_IDLESTEER_OVERLOADINACTTIMEOUT, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWX_Charter_BSI_OverloadInactTimeout(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(LBD_IDLESTEER_OVERLOADINACTTIMEOUT, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(LBD);
		if(ret)
		{
			return (-1);
		}
	}
	ret = doBandSteeringFuncs();
	if(ret)
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWX_Charter_BSI_InactCheckInterval(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LBD_IDLESTEER_INACTCHECKINTERVAL, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWX_Charter_BSI_InactCheckInterval(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(LBD_IDLESTEER_INACTCHECKINTERVAL, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(LBD);
		if(ret)
		{
			return (-1);
		}
	}
	ret = doBandSteeringFuncs();
	if(ret)
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWX_Charter_BSI_AuthAllow(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LBD_IDLESTEER_AUTHALLOW, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWX_Charter_BSI_AuthAllow(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(LBD_IDLESTEER_AUTHALLOW, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(LBD);
		if(ret)
		{
			return (-1);
		}
	}
	ret = doBandSteeringFuncs();
	if(ret)
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWX_Charter_BSA_TxRateXingThreshold_UG(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LBD_ACTIVESTEER_TXRATEXINGTHRESHOLD_UG, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWX_Charter_BSA_TxRateXingThreshold_UG(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(LBD_ACTIVESTEER_TXRATEXINGTHRESHOLD_UG, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(LBD);
		if(ret)
		{
			return (-1);
		}
	}
	ret = doBandSteeringFuncs();
	if(ret)
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWX_Charter_BSA_RateRSSIXingThreshold_UG(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LBD_ACTIVESTEER_RATERSSIXINGTHRESHOLD_UG, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWX_Charter_BSA_RateRSSIXingThreshold_UG(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(LBD_ACTIVESTEER_RATERSSIXINGTHRESHOLD_UG, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(LBD);
		if(ret)
		{
			return (-1);
		}
	}
	ret = doBandSteeringFuncs();
	if(ret)
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWX_Charter_BSA_TxRateXingThreshold_DG(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LBD_ACTIVESTEER_TXRATEXINGTHRESHOLD_DG, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWX_Charter_BSA_TxRateXingThreshold_DG(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(LBD_ACTIVESTEER_TXRATEXINGTHRESHOLD_DG, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(LBD);
		if(ret)
		{
			return (-1);
		}
	}
	ret = doBandSteeringFuncs();
	if(ret)
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWX_Charter_BSA_RateRSSIXingThreshold_DG(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LBD_ACTIVESTEER_RATERSSIXINGTHRESHOLD_DG, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWX_Charter_BSA_RateRSSIXingThreshold_DG(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(LBD_ACTIVESTEER_RATERSSIXINGTHRESHOLD_DG, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(LBD);
		if(ret)
		{
			return (-1);
		}
	}
	ret = doBandSteeringFuncs();
	if(ret)
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWX_Charter_BSO_MUAvgPeriod(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LBD_OFFLOAD_MUAVGPERIOD, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWX_Charter_BSO_MUAvgPeriod(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(LBD_OFFLOAD_MUAVGPERIOD, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(LBD);
		if(ret)
		{
			return (-1);
		}
	}
	ret = doBandSteeringFuncs();
	if(ret)
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWX_Charter_BSO_MUOverloadThreshold_W2(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LBD_OFFLOAD_MUOVERLOADTHRESHOLD_W2, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWX_Charter_BSO_MUOverloadThreshold_W2(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(LBD_OFFLOAD_MUOVERLOADTHRESHOLD_W2, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(LBD);
		if(ret)
		{
			return (-1);
		}
	}
	ret = doBandSteeringFuncs();
	if(ret)
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWX_Charter_BSO_MUOverloadThreshold_W5(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LBD_OFFLOAD_MUOVERLOADTHRESHOLD_W5, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWX_Charter_BSO_MUOverloadThreshold_W5(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(LBD_OFFLOAD_MUOVERLOADTHRESHOLD_W5, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(LBD);
		if(ret)
		{
			return (-1);
		}
	}
	ret = doBandSteeringFuncs();
	if(ret)
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWX_Charter_BSO_MUSafetyThreshold_W2(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LBD_OFFLOAD_MUSAFETYTHRESHOLD_W2, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWX_Charter_BSO_MUSafetyThreshold_W2(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(LBD_OFFLOAD_MUSAFETYTHRESHOLD_W2, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(LBD);
		if(ret)
		{
			return (-1);
		}
	}
	ret = doBandSteeringFuncs();
	if(ret)
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWX_Charter_BSO_MUSafetyThreshold_W5(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LBD_OFFLOAD_MUSAFETYTHRESHOLD_W5, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWX_Charter_BSO_MUSafetyThreshold_W5(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(LBD_OFFLOAD_MUSAFETYTHRESHOLD_W5, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(LBD);
		if(ret)
		{
			return (-1);
		}
	}
	ret = doBandSteeringFuncs();
	if(ret)
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWX_Charter_BSO_OffloadingMinRSSI(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LBD_OFFLOAD_OFFLOADINGMINRSSI, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWX_Charter_BSO_OffloadingMinRSSI(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(LBD_OFFLOAD_OFFLOADINGMINRSSI, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(LBD);
		if(ret)
		{
			return (-1);
		}
	}
	ret = doBandSteeringFuncs();
	if(ret)
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWX_Charter_BSI_ENABLEW2(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LBD_IAS_ENABLEW2, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWX_Charter_BSI_ENABLEW2(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(LBD_IAS_ENABLEW2, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(LBD);
		if(ret)
		{
			return (-1);
		}
	}
	ret = doBandSteeringFuncs();
	if(ret)
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWX_Charter_BSI_ENABLEW5(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LBD_IAS_ENABLEW5, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWX_Charter_BSI_ENABLEW5(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(LBD_IAS_ENABLEW5, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(LBD);
		if(ret)
		{
			return (-1);
		}
	}
	ret = doBandSteeringFuncs();
	if(ret)
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWX_Charter_BSI_MAXPOLLUTIONTIME(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LBD_IAS_MAXPOLLUTIONTIME, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWX_Charter_BSI_MAXPOLLUTIONTIM(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(LBD_IAS_MAXPOLLUTIONTIME, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(LBD);
		if(ret)
		{
			return (-1);
		}
	}
	ret = doBandSteeringFuncs();
	if(ret)
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWX_Charter_BSI_USEBESTEFFORT(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LBD_IAS_USEBESTEFFORT, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWX_Charter_BSI_USEBESTEFFORT(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(LBD_IAS_USEBESTEFFORT, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(LBD);
		if(ret)
		{
			return (-1);
		}
	}
	ret = doBandSteeringFuncs();
	if(ret)
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWX_Charter_BSS_SteeringProhibitTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LBD_STEEREXEC_STEERINGPROHIBITTIME, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWX_Charter_BSS_SteeringProhibitTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(LBD_STEEREXEC_STEERINGPROHIBITTIME, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(LBD);
		if(ret)
		{
			return (-1);
		}
	}
	ret = doBandSteeringFuncs();
	if(ret)
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWX_Charter_BSS_BTMSteeringProhibitShortTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LBD_STEEREXEC_BTMSTEERINGPROHIBITSHORTTIME, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWX_Charter_BSS_BTMSteeringProhibitShortTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(LBD_STEEREXEC_BTMSTEERINGPROHIBITSHORTTIME, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(LBD);
		if(ret)
		{
			return (-1);
		}
	}
	ret = doBandSteeringFuncs();
	if(ret)
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWX_Charter_BSS_TSteering(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LBD_STEEREXEC_TSTEERING, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWX_Charter_BSS_TSteering(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(LBD_STEEREXEC_TSTEERING, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(LBD);
		if(ret)
		{
			return (-1);
		}
	}
	ret = doBandSteeringFuncs();
	if(ret)
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWX_Charter_BSS_InitialAuthRejCoalesceTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LBD_STEEREXEC_INITIALAUTHREJCOALESCETIME, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWX_Charter_BSS_InitialAuthRejCoalesceTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(LBD_STEEREXEC_INITIALAUTHREJCOALESCETIME, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(LBD);
		if(ret)
		{
			return (-1);
		}
	}
	ret = doBandSteeringFuncs();
	if(ret)
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}

int get_DWX_Charter_BSS_AuthRejMax(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LBD_STEEREXEC_AUTHREJMAX, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWX_Charter_BSS_AuthRejMax(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(LBD_STEEREXEC_AUTHREJMAX, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(LBD);
		if(ret)
		{
			return (-1);
		}
	}
	ret = doBandSteeringFuncs();
	if(ret)
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWX_Charter_BSS_SteeringUnfriendlyTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LBD_STEEREXEC_STEERINGUNFRIENDLYTIME, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWX_Charter_BSS_SteeringUnfriendlyTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(LBD_STEEREXEC_STEERINGUNFRIENDLYTIME, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(LBD);
		if(ret)
		{
			return (-1);
		}
	}
	ret = doBandSteeringFuncs();
	if(ret)
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWX_Charter_BSS_MaxSteeringUnfriendly(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LBD_STEEREXEC_MAXSTEERINGUNFRIENDLY, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWX_Charter_BSS_MaxSteeringUnfriendly(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(LBD_STEEREXEC_MAXSTEERINGUNFRIENDLY, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(LBD);
		if(ret)
		{
			return (-1);
		}
	}
	ret = doBandSteeringFuncs();
	if(ret)
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWX_Charter_BSS_TargetLowRSSIThreshold_W2(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LBD_STEEREXEC_TARGETLOWRSSITHRESHOLDW2, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWX_Charter_BSS_TargetLowRSSIThreshold_W2(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(LBD_STEEREXEC_TARGETLOWRSSITHRESHOLDW2, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(LBD);
		if(ret)
		{
			return (-1);
		}
	}
	ret = doBandSteeringFuncs();
	if(ret)
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWX_Charter_BSS_TargetLowRSSIThreshold_W5(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LBD_STEEREXEC_TARGETLOWRSSITHRESHOLDW5, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWX_Charter_BSS_TargetLowRSSIThreshold_W5(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(LBD_STEEREXEC_TARGETLOWRSSITHRESHOLDW5, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(LBD);
		if(ret)
		{
			return (-1);
		}
	}
	ret = doBandSteeringFuncs();
	if(ret)
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWX_Charter_BSS_BlacklistTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LBD_STEEREXEC_BLACKLISTTIME, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWX_Charter_BSS_BlacklistTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(LBD_STEEREXEC_BLACKLISTTIME, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(LBD);
		if(ret)
		{
			return (-1);
		}
	}
	ret = doBandSteeringFuncs();
	if(ret)
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWX_Charter_BSS_BTMResponseTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LBD_STEEREXEC_BTMRESPONSETIME, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWX_Charter_BSS_BTMResponseTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(LBD_STEEREXEC_BTMRESPONSETIME, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(LBD);
		if(ret)
		{
			return (-1);
		}
	}
	ret = doBandSteeringFuncs();
	if(ret)
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWX_Charter_BSS_BTMAssociationTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LBD_STEEREXEC_BTMASSOCIATIONTIME, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWX_Charter_BSS_BTMAssociationTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(LBD_STEEREXEC_BTMASSOCIATIONTIME, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(LBD);
		if(ret)
		{
			return (-1);
		}
	}
	ret = doBandSteeringFuncs();
	if(ret)
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWX_Charter_BSS_BTMAlsoBlacklist(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LBD_STEEREXEC_BTMALSOBLACKLIST, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWX_Charter_BSS_BTMAlsoBlacklist(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(LBD_STEEREXEC_BTMALSOBLACKLIST, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(LBD);
		if(ret)
		{
			return (-1);
		}
	}
	ret = doBandSteeringFuncs();
	if(ret)
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWX_Charter_BSS_BTMUnfriendlyTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LBD_STEEREXEC_BTMUNFRIENDLYTIME, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWX_Charter_BSS_BTMUnfriendlyTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(LBD_STEEREXEC_BTMUNFRIENDLYTIME, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(LBD);
		if(ret)
		{
			return (-1);
		}
	}
	ret = doBandSteeringFuncs();
	if(ret)
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWX_Charter_BSS_MaxBTMUnfriendly(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LBD_STEEREXEC_MAXBTMUNFRIENDLY, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWX_Charter_BSS_MaxBTMUnfriendly(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(LBD_STEEREXEC_MAXBTMUNFRIENDLY, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(LBD);
		if(ret)
		{
			return (-1);
		}
	}
	ret = doBandSteeringFuncs();
	if(ret)
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWX_Charter_BSS_MaxBTMActiveUnfriendly(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LBD_STEEREXEC_MAXBTMACTIVEUNFRIENDLY, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWX_Charter_BSS_MaxBTMActiveUnfriendly(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(LBD_STEEREXEC_MAXBTMACTIVEUNFRIENDLY, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(LBD);
		if(ret)
		{
			return (-1);
		}
	}
	ret = doBandSteeringFuncs();
	if(ret)
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWX_Charter_BSS_MinRSSIBestEffort(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LBD_STEEREXEC_MINRSSIBESTEFFORT, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWX_Charter_BSS_MinRSSIBestEffort(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(LBD_STEEREXEC_MINRSSIBESTEFFORT, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(LBD);
		if(ret)
		{
			return (-1);
		}
	}
	ret = doBandSteeringFuncs();
	if(ret)
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWX_Charter_BSS_StartInBTMActiveState(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LBD_STEEREXEC_STARTINBTMACTIVESTATE, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWX_Charter_BSS_StartInBTMActiveState(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(LBD_STEEREXEC_STARTINBTMACTIVESTATE, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(LBD);
		if(ret)
		{
			return (-1);
		}
	}
	ret = doBandSteeringFuncs();
	if(ret)
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWX_Charter_BSS_LowRSSIXingThreshold(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LBD_STEEREXEC_LOWRSSIXINGTHRESHOLD, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWX_Charter_BSS_LowRSSIXingThreshold(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(LBD_STEEREXEC_LOWRSSIXINGTHRESHOLD, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(LBD);
		if(ret)
		{
			return (-1);
		}
	}
	ret = doBandSteeringFuncs();
	if(ret)
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWX_Charter_BSS_Delay24GProbeRSSIThreshold(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LBD_STEEREXEC_DELAY24GPROBERSSITHRESHOLD, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWX_Charter_BSS_Delay24GProbeRSSIThreshold(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(LBD_STEEREXEC_DELAY24GPROBERSSITHRESHOLD, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(LBD);
		if(ret)
		{
			return (-1);
		}
	}
	ret = doBandSteeringFuncs();
	if(ret)
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWX_Charter_BSS_Delay24GProbeTimeWindow(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LBD_STEEREXEC_DELAY24GPROBETIMEWINDOW, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWX_Charter_BSS_Delay24GProbeTimeWindowd(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(LBD_STEEREXEC_DELAY24GPROBETIMEWINDOW, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(LBD);
		if(ret)
		{
			return (-1);
		}
	}
	ret = doBandSteeringFuncs();
	if(ret)
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWX_Charter_BSS_Delay24GProbeMinReqCount(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LBD_STEEREXEC_DELAY24GPROBEMINREQCOUNT, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWX_Charter_BSS_Delay24GProbeMinReqCount(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(LBD_STEEREXEC_DELAY24GPROBEMINREQCOUNT, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(LBD);
		if(ret)
		{
			return (-1);
		}
	}
	ret = doBandSteeringFuncs();
	if(ret)
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWX_Charter_BSS_RSSIDiff_EstW5FromW2(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LBD_ESTIMATOR_ADV_RSSIDIFF_ESTW5FROMW2, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWX_Charter_BSS_RSSIDiff_EstW5FromW2(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(LBD_ESTIMATOR_ADV_RSSIDIFF_ESTW5FROMW2, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(LBD);
		if(ret)
		{
			return (-1);
		}
	}
	ret = doBandSteeringFuncs();
	if(ret)
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWX_Charter_BSS_RSSIDiff_EstW2FromW5(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LBD_ESTIMATOR_ADV_RSSIDIFF_ESTW2FROMW5, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWX_Charter_BSS_RSSIDiff_EstW2FromW5(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(LBD_ESTIMATOR_ADV_RSSIDIFF_ESTW2FROMW5, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(LBD);
		if(ret)
		{
			return (-1);
		}
	}
	ret = doBandSteeringFuncs();
	if(ret)
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWX_Charter_BSS_ProbeCountThreshold(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LBD_ESTIMATOR_ADV_PROBECOUNTTHRESHOLD, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWX_Charter_BSS_ProbeCountThreshold(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(LBD_ESTIMATOR_ADV_PROBECOUNTTHRESHOLD, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(LBD);
		if(ret)
		{
			return (-1);
		}
	}
	ret = doBandSteeringFuncs();
	if(ret)
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWX_Charter_BSS_StatsSampleInterval(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LBD_ESTIMATOR_ADV_STATSSAMPLEINTERVAL, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWX_Charter_BSS_StatsSampleInterval(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(LBD_ESTIMATOR_ADV_STATSSAMPLEINTERVAL, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(LBD);
		if(ret)
		{
			return (-1);
		}
	}
	ret = doBandSteeringFuncs();
	if(ret)
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWX_Charter_BSS_11kProhibitTimeShort(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LBD_ESTIMATOR_ADV_11KPROHIBITTIMESHORT, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWX_Charter_BSS_11kProhibitTimeShort(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(LBD_ESTIMATOR_ADV_11KPROHIBITTIMESHORT, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(LBD);
		if(ret)
		{
			return (-1);
		}
	}
	ret = doBandSteeringFuncs();
	if(ret)
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWX_Charter_BSS_11kProhibitTimeLong(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LBD_ESTIMATOR_ADV_11KPROHIBITTIMELONG, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWX_Charter_BSS_11kProhibitTimeLong(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(LBD_ESTIMATOR_ADV_11KPROHIBITTIMELONG, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(LBD);
		if(ret)
		{
			return (-1);
		}
	}
	ret = doBandSteeringFuncs();
	if(ret)
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}

int get_DWX_Charter_BSS_PhyRateScalingForAirtime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LBD_ESTIMATOR_ADV_PHYRATESCALINGFORAIRTIME, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWX_Charter_BSS_PhyRateScalingForAirtime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(LBD_ESTIMATOR_ADV_PHYRATESCALINGFORAIRTIME, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(LBD);
		if(ret)
		{
			return (-1);
		}
	}
	ret = doBandSteeringFuncs();
	if(ret)
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWX_Charter_BSS_EnableContinuousThroughput(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LBD_ESTIMATOR_ADV_ENABLECONTINUOUSTHROUGHPUT, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWX_Charter_BSS_EnableContinuousThroughput(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(LBD_ESTIMATOR_ADV_ENABLECONTINUOUSTHROUGHPUT, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(LBD);
		if(ret)
		{
			return (-1);
		}
	}
	ret = doBandSteeringFuncs();
	if(ret)
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWX_Charter_BSS_BcnrptActiveDuration(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LBD_ESTIMATOR_ADV_BCNRPTACTIVEDURATION, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWX_Charter_BSS_BcnrptActiveDuration(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(LBD_ESTIMATOR_ADV_BCNRPTACTIVEDURATION, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(LBD);
		if(ret)
		{
			return (-1);
		}
	}
	ret = doBandSteeringFuncs();
	if(ret)
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWX_Charter_BSS_BcnrptPassiveDuration(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LBD_ESTIMATOR_ADV_BCNRPTPASSIVEDURATION, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWX_Charter_BSS_BcnrptPassiveDuration(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(LBD_ESTIMATOR_ADV_BCNRPTPASSIVEDURATION, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(LBD);
		if(ret)
		{
			return (-1);
		}
	}
	ret = doBandSteeringFuncs();
	if(ret)
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWX_Charter_BSS_FastPollutionDetectBufSize(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LBD_ESTIMATOR_ADV_FASTPOLLUTIONDETECTBUFSIZE, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWX_Charter_BSS_FastPollutionDetectBufSize(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(LBD_ESTIMATOR_ADV_FASTPOLLUTIONDETECTBUFSIZE, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(LBD);
		if(ret)
		{
			return (-1);
		}
	}
	ret = doBandSteeringFuncs();
	if(ret)
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWX_Charter_BSS_NormalPollutionDetectBufSize(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LBD_ESTIMATOR_ADV_NORMALPOLLUTIONDETECTBUFSIZE, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWX_Charter_BSS_NormalPollutionDetectBufSize(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(LBD_ESTIMATOR_ADV_NORMALPOLLUTIONDETECTBUFSIZE, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(LBD);
		if(ret)
		{
			return (-1);
		}
	}
	ret = doBandSteeringFuncs();
	if(ret)
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWX_Charter_BSS_PollutionDetectThreshold(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LBD_ESTIMATOR_ADV_POLLUTIONDETECTTHRESHOLD, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWX_Charter_BSS_PollutionDetectThreshold(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(LBD_ESTIMATOR_ADV_POLLUTIONDETECTTHRESHOLD, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(LBD);
		if(ret)
		{
			return (-1);
		}
	}
	ret = doBandSteeringFuncs();
	if(ret)
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWX_Charter_BSS_PollutionClearThreshold(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LBD_ESTIMATOR_ADV_POLLUTIONCLEARTHRESHOLD, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWX_Charter_BSS_PollutionClearThreshold(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(LBD_ESTIMATOR_ADV_POLLUTIONCLEARTHRESHOLD, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(LBD);
		if(ret)
		{
			return (-1);
		}
	}
	ret = doBandSteeringFuncs();
	if(ret)
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWX_Charter_BSS_InterferenceAgeLimit(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LBD_ESTIMATOR_ADV_INTERFERENCEAGELIMIT, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWX_Charter_BSS_InterferenceAgeLimit(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(LBD_ESTIMATOR_ADV_INTERFERENCEAGELIMIT, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(LBD);
		if(ret)
		{
			return (-1);
		}
	}
	ret = doBandSteeringFuncs();
	if(ret)
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWX_Charter_BSS_IASLowRSSIThreshold(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LBD_ESTIMATOR_ADV_IASLOWRSSITHRESHOLD, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWX_Charter_BSS_IASLowRSSIThreshold(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(LBD_ESTIMATOR_ADV_IASLOWRSSITHRESHOLD, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(LBD);
		if(ret)
		{
			return (-1);
		}
	}
	ret = doBandSteeringFuncs();
	if(ret)
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWX_Charter_BSS_IASMaxRateFactor(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LBD_ESTIMATOR_ADV_IASMAXRATEFACTOR, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWX_Charter_BSS_IASMaxRateFactor(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(LBD_ESTIMATOR_ADV_IASMAXRATEFACTOR, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(LBD);
		if(ret)
		{
			return (-1);
		}
	}
	ret = doBandSteeringFuncs();
	if(ret)
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWX_Charter_BSS_IASMinDeltaBytes(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LBD_ESTIMATOR_ADV_IASMINDELTABYTES, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWX_Charter_BSS_IASMinDeltaBytes(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(LBD_ESTIMATOR_ADV_IASMINDELTABYTES, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(LBD);
		if(ret)
		{
			return (-1);
		}
	}
	ret = doBandSteeringFuncs();
	if(ret)
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWX_Charter_BSS_IASMinDeltaPackets(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LBD_ESTIMATOR_ADV_IASMINDELTAPACKETS, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWX_Charter_BSS_IASMinDeltaPackets(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(LBD_ESTIMATOR_ADV_IASMINDELTAPACKETS, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(LBD);
		if(ret)
		{
			return (-1);
		}
	}
	ret = doBandSteeringFuncs();
	if(ret)
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWX_Charter_BSD_EnableLog(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LBD_DIAGLOG_ENABLELOG, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWX_Charter_BSD_EnableLog(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(LBD_DIAGLOG_ENABLELOG, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(LBD);
		if(ret)
		{
			return (-1);
		}
	}
	ret = doBandSteeringFuncs();
	if(ret)
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWX_Charter_BSD_LogServerIP(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LBD_DIAGLOG_LOGSERVERIP, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWX_Charter_BSD_LogServerIP(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (isValidIP(value) == 0)
		return -2;

	ret = do_uci_set(LBD_DIAGLOG_LOGSERVERIP, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(LBD);
		if(ret)
		{
			return (-1);
		}
	}
	ret = doBandSteeringFuncs();
	if(ret)
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWX_Charter_BSD_LogServerPort(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LBD_DIAGLOG_LOGSERVERPORT, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWX_Charter_BSD_LogServerPort(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (atoi(value) < 0 || atoi(value) > 65535)
		return -2;

	ret = do_uci_set(LBD_DIAGLOG_LOGSERVERPORT, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(LBD);
		if(ret)
		{
			return (-1);
		}
	}
	ret = doBandSteeringFuncs();
	if(ret)
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWX_Charter_BSD_LogLevelWlanIF(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LBD_DIAGLOG_LOGLEVELWLANIF, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWX_Charter_BSD_LogLevelWlanIF(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(LBD_DIAGLOG_LOGLEVELWLANIF, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(LBD);
		if(ret)
		{
			return (-1);
		}
	}
	ret = doBandSteeringFuncs();
	if(ret)
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWX_Charter_BSD_LogLevelBandMon(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LBD_DIAGLOG_LOGLEVELBANDMON, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWX_Charter_BSD_LogLevelBandMon(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(LBD_DIAGLOG_LOGLEVELBANDMON, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(LBD);
		if(ret)
		{
			return (-1);
		}
	}
	ret = doBandSteeringFuncs();
	if(ret)
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWX_Charter_BSD_LogLevelStaDB(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LBD_DIAGLOG_LOGLEVELSTADB, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWX_Charter_BSD_LogLevelStaDB(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(LBD_DIAGLOG_LOGLEVELSTADB, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(LBD);
		if(ret)
		{
			return (-1);
		}
	}
	ret = doBandSteeringFuncs();
	if(ret)
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWX_Charter_BSD_LogLevelSteerExec(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LBD_DIAGLOG_LOGLEVELSTEEREXEC, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWX_Charter_BSD_LogLevelSteerExec(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(LBD_DIAGLOG_LOGLEVELSTEEREXEC, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(LBD);
		if(ret)
		{
			return (-1);
		}
	}
	ret = doBandSteeringFuncs();
	if(ret)
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWX_Charter_BSD_LogLevelStaMon(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LBD_DIAGLOG_LOGLEVELSTAMON, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWX_Charter_BSD_LogLevelStaMon(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(LBD_DIAGLOG_LOGLEVELSTAMON, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(LBD);
		if(ret)
		{
			return (-1);
		}
	}
	ret = doBandSteeringFuncs();
	if(ret)
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWX_Charter_BSD_LogLevelEstimator(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LBD_DIAGLOG_LOGLEVELESTIMATOR, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWX_Charter_BSD_LogLevelEstimator(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(LBD_DIAGLOG_LOGLEVELESTIMATOR, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(LBD);
		if(ret)
		{
			return (-1);
		}
	}
	ret = doBandSteeringFuncs();
	if(ret)
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWX_Charter_BSD_LogLevelDiagLog(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LBD_DIAGLOG_LOGLEVELDIAGLOG, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWX_Charter_BSD_LogLevelDiagLog(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(LBD_DIAGLOG_LOGLEVELDIAGLOG, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(LBD);
		if(ret)
		{
			return (-1);
		}
	}
	ret = doBandSteeringFuncs();
	if(ret)
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWX_Charter_BSA_LowRSSIAPSteerThreshold_CAP(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LBD_APSTEER_LOWRSSIAPSTEERTHRESHOLD_CAP, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWX_Charter_BSA_LowRSSIAPSteerThreshold_CAP(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(LBD_APSTEER_LOWRSSIAPSTEERTHRESHOLD_CAP, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(LBD);
		if(ret)
		{
			return (-1);
		}
	}
	ret = doBandSteeringFuncs();
	if(ret)
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWX_Charter_BSA_LowRSSIAPSteerThreshold_RE(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LBD_APSTEER_LOWRSSIAPSTEERTHRESHOLD_RE, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWX_Charter_BSA_LowRSSIAPSteerThreshold_RE(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(LBD_APSTEER_LOWRSSIAPSTEERTHRESHOLD_RE, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(LBD);
		if(ret)
		{
			return (-1);
		}
	}
	ret = doBandSteeringFuncs();
	if(ret)
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWX_Charter_BSA_APSteerToRootMinRSSIIncThreshold(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LBD_APSTEER_APSTEERTOROOTMINRSSIINCTHRESHOLD, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWX_Charter_BSA_APSteerToRootMinRSSIIncThreshold(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(LBD_APSTEER_APSTEERTOROOTMINRSSIINCTHRESHOLD, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(LBD);
		if(ret)
		{
			return (-1);
		}
	}
	ret = doBandSteeringFuncs();
	if(ret)
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWX_Charter_BSA_APSteerToLeafMinRSSIIncThreshold(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LBD_APSTEER_APSTEERTOLEAFMINRSSIINCTHRESHOLD, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWX_Charter_BSA_APSteerToLeafMinRSSIIncThreshold(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(LBD_APSTEER_APSTEERTOLEAFMINRSSIINCTHRESHOLD, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(LBD);
		if(ret)
		{
			return (-1);
		}
	}
	ret = doBandSteeringFuncs();
	if(ret)
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWX_Charter_BSA_APSteerToPeerMinRSSIIncThreshold(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LBD_APSTEER_APSTEERTOPEERMINRSSIINCTHRESHOLD, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWX_Charter_BSA_APSteerToPeerMinRSSIIncThreshold(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(LBD_APSTEER_APSTEERTOPEERMINRSSIINCTHRESHOLD, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(LBD);
		if(ret)
		{
			return (-1);
		}
	}
	ret = doBandSteeringFuncs();
	if(ret)
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWX_Charter_BSA_DownlinkRSSIThreshold_W5(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LBD_APSTEER_DOWNLINKRSSITHRESHOLD_W5, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWX_Charter_BSA_DownlinkRSSIThreshold_W5(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(LBD_APSTEER_DOWNLINKRSSITHRESHOLD_W5, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(LBD);
		if(ret)
		{
			return (-1);
		}
	}
	ret = doBandSteeringFuncs();
	if(ret)
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWX_Charter_BSS_RSSIMeasureSamples_W2(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LBD_STAMONITOR_ADV_RSSIMEASURESAMPLES_W2, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWX_Charter_BSS_RSSIMeasureSamples_W2(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(LBD_STAMONITOR_ADV_RSSIMEASURESAMPLES_W2, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(LBD);
		if(ret)
		{
			return (-1);
		}
	}
	ret = doBandSteeringFuncs();
	if(ret)
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWX_Charter_BSS_RSSIMeasureSamples_W5(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LBD_STAMONITOR_ADV_RSSIMEASURESAMPLES_W5, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWX_Charter_BSS_RSSIMeasureSamples_W5(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(LBD_STAMONITOR_ADV_RSSIMEASURESAMPLES_W5, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(LBD);
		if(ret)
		{
			return (-1);
		}
	}
	ret = doBandSteeringFuncs();
	if(ret)
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWX_Charter_BSS_MinTxRateIncreaseThreshold(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LBD_STEERALG_ADV_MINTXRATEINCREASETHRESHOLD, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWX_Charter_BSS_MinTxRateIncreaseThreshold(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(LBD_STEERALG_ADV_MINTXRATEINCREASETHRESHOLD, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(LBD);
		if(ret)
		{
			return (-1);
		}
	}
	ret = doBandSteeringFuncs();
	if(ret)
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWX_Charter_BSS_MaxSteeringTargetCount(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LBD_STEERALG_ADV_MAXSTEERINGTARGETCOUNT, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWX_Charter_BSS_MaxSteeringTargetCount(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(LBD_STEERALG_ADV_MAXSTEERINGTARGETCOUNT, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(LBD);
		if(ret)
		{
			return (-1);
		}
	}
	ret = doBandSteeringFuncs();
	if(ret)
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWX_Charter_BSB_ProbeCountThreshold(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LBD_BANDMONITOR_ADV_PROBECOUNTTHRESHOLD, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWX_Charter_BSB_ProbeCountThreshold(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(LBD_BANDMONITOR_ADV_PROBECOUNTTHRESHOLD, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(LBD);
		if(ret)
		{
			return (-1);
		}
	}
	ret = doBandSteeringFuncs();
	if(ret)
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWX_Charter_BSB_MUCheckInterval_W2(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LBD_BANDMONITOR_ADV_MUCHECKINTERVAL_W2, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWX_Charter_BSB_MUCheckInterval_W2(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(LBD_BANDMONITOR_ADV_MUCHECKINTERVAL_W2, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(LBD);
		if(ret)
		{
			return (-1);
		}
	}
	ret = doBandSteeringFuncs();
	if(ret)
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWX_Charter_BSB_MUCheckInterval_W5(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LBD_BANDMONITOR_ADV_MUCHECKINTERVAL_W5, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWX_Charter_BSB_MUCheckInterval_W5(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(LBD_BANDMONITOR_ADV_MUCHECKINTERVAL_W5, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(LBD);
		if(ret)
		{
			return (-1);
		}
	}
	ret = doBandSteeringFuncs();
	if(ret)
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWX_Charter_BSB_MUReportPeriod(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LBD_BANDMONITOR_ADV_MUREPORTPERIOD, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWX_Charter_BSB_MUReportPeriod(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(LBD_BANDMONITOR_ADV_MUREPORTPERIOD, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(LBD);
		if(ret)
		{
			return (-1);
		}
	}
	ret = doBandSteeringFuncs();
	if(ret)
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWX_Charter_BSB_LoadBalancingAllowedMaxPeriod(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LBD_BANDMONITOR_ADV_LOADBALANCINGALLOWEDMAXPERIOD, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWX_Charter_BSB_LoadBalancingAllowedMaxPeriod(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(LBD_BANDMONITOR_ADV_LOADBALANCINGALLOWEDMAXPERIOD, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(LBD);
		if(ret)
		{
			return (-1);
		}
	}
	ret = doBandSteeringFuncs();
	if(ret)
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWX_Charter_BSB_NumRemoteChannels(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(LBD_BANDMONITOR_ADV_NUMREMOTECHANNELS, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWX_Charter_BSB_NumRemoteChannels(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(LBD_BANDMONITOR_ADV_NUMREMOTECHANNELS, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(LBD);
		if(ret)
		{
			return (-1);
		}
	}
	ret = doBandSteeringFuncs();
	if(ret)
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DW_RadioNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DW_RadioNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}*/;

	/*int number = 0;
	int find = 0;
	
	find = do_uci_get(WIFI0_DISABLED, value);

	if(!find)
	{
		number++;
	}
	
	find = do_uci_get(WIFI1_DISABLED, value);
	if(!find)
	{
		number++;
	}

	sprintf(value, "%d", number);*/
	strcpy(value, "2"); //2.4G and 5G
	
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DW_SSIDNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DW_SSIDNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}*/

	sprintf(value, "%d", WIFI_MAX_INSTANCE_NUM);
	
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DW_AccessPointNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DW_AccessPointNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}*/

	sprintf(value, "%d", WIFI_MAX_INSTANCE_NUM);
	
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DW_EndPointNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DW_EndPointNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "1"); //always 1, menas one repeater
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWRt_Enable(char * path_name, char *value)
{
	int ret = 0;
	/*ret = do_uci_get(DWRt_Enable, value);
	if(ret)
	{
		return -1;
	}*/
	char buff[128] = {0};
	char tmp[128] = {0};
	char *p = parseTemplate(path_name, ".Radio.");

	if (p == NULL)
		return -1;
	
	sprintf(buff, "wireless.radio%d.disabled", getWiFiRadioUciNum(p));

	tr_log(LOG_DEBUG,"buff [%s]",buff);

	ret = do_uci_get(buff, tmp);
	if(ret)
	{
		//return -1;
		strcpy(value, "1"); // disabled VALUE only 1 and NULL
	}

	if(atoi(tmp) == 1)
	{
		strcpy(value, "0");
	}
	#if 0
	else
	{
		strcpy(value, "1");
	}
	#endif
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWRt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DWRt_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char buff[128] = {0};
	char *p = parseTemplate(path_name, ".Radio.");

	if (p == NULL)
		return -1;

	sprintf(buff, "wireless.wifi%d.disabled", getWiFiRadioUciNum(p));
	
	if(atoi(value) == 1)
	{
		ret = do_uci_set(buff, "0");
	}
	else if(atoi(value) == 0)
	{
		ret = do_uci_set(buff, "1");
	}
	else
	{
		return (-1);
	}	

	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("wireless");
		if(ret)
		{
			return (-1);
		}
		//ret = 1; //means need to reboot for taking effect
		doWifiReload(atoi(p));
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWRt_Status(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWRt_Status, value);
	if(ret)
	{
		return -1;
	}*/
	char buff[128] = {0};
	char tmp[128] = {0};
	char *p = parseTemplate(path_name, ".Radio.");

	if (p == NULL)
		return -1;
	
	sprintf(buff, "wireless.wifi%d.disabled", getWiFiRadioUciNum(p));
	
	ret = do_uci_get(buff, tmp);
	if(ret)
	{
		return -1;
	}
	
	if(atoi(tmp) == 1)
	{
		strcpy(value, "Down");
	}
	else
	{
		strcpy(value, "Up");
	}
	
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWRt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWRt_Alias, value);
	if(ret)
	{
		return -1;
	}*/
	ret = 1; //getting from tr.xml
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWRt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (!isalpha(value[0]))
		return -2;
	
	if (strlen(value) > 64)
		return -2;
	
	/*ret = do_uci_set(DWRt_Alias, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//set to tr.xml
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWRt_Name(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWRt_Name, value);
	if(ret)
	{
		return -1;
	}*/
	char buff[128] = {0};
	int type;
	char *p = parseTemplate(path_name, ".Radio.");

	if (p == NULL)
		return -1;
	
	type = getWiFiRadioType(p);

	if(type == 5)
	{
		ret = do_uci_get("wireless.wla.device", value);
	}
	else if(type == 24)
	{
		ret = do_uci_get("wireless.wlg.device", value);
	}

	if(ret)
	{
		return -1;
	}	
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWRt_LastChange(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWRt_LastChange, value);
	if(ret)
	{
		return -1;
	}*/
	getInterfaceLastChangeTime(value);
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWRt_LowerLayers(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWRt_LowerLayers, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, ""); //Since Radio is a layer 1 interface, it is expected that?LowerLayers?will not be used.
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWRt_LowerLayers(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DWRt_LowerLayers, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't do anything
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWRt_Upstream(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWRt_Upstream, value);
	if(ret)
	{
		return -1;
	}*/

	strcpy(value, "0");//Upstream will be false for all LAN interface.
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWRt_MaxBitRate(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWRt_MaxBitRate, value);
	if(ret)
	{
		return -1;
	}*/
	char buff[128] = {0};
	int type;
	char *p = parseTemplate(path_name, ".Radio.");
	
	if (p == NULL)
		return -1;
		
	type = getWiFiRadioType(p);


	if(type == 5)
	{
		strcpy(value, "1733");
	}
	else if(type == 24)
	{
		strcpy(value, "800");
	}

	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWRt_SupportedFrequencyBands(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWRt_SupportedFrequencyBands, value);
	if(ret)
	{
		return -1;
	}*/
	char buff[128] = {0};
	int type;
	char *p = parseTemplate(path_name, ".Radio.");

	if (p == NULL)
		return -1;

	type = getWiFiRadioType(p);

	if(type == 5)
	{
		strcpy(value, "5GHz");
	}
	else if(type == 24)
	{
		strcpy(value, "2.4GHz");
	}

	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWRt_OperatingFrequencyBand(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWRt_OperatingFrequencyBand, value);
	if(ret)
	{
		return -1;
	}*/
	char buff[128] = {0};
	char *p = parseTemplate(path_name, ".Radio.");

	if (p == NULL)
		return -1;

	sprintf(buff, "wireless.wifi%d.mode", getWiFiRadioUciNum(p));
	
	ret = do_uci_get(buff, value);

	p = strstr(value, "_");
	if(p != NULL)
	{
		*p = '.';
	}

	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWRt_OperatingFrequencyBand(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DWRt_OperatingFrequencyBand, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set	
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWRt_SupportedStandards(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWRt_SupportedStandards, value);
	if(ret)
	{
		return -1;
	}*/
	char buff[128] = {0};
	int type;
	char *p = parseTemplate(path_name, ".Radio.");

	if (p == NULL)
		return -1;
	
	type = getWiFiRadioType(p);

	if(type == 5)	
	{
		strcpy(value, "a,n,ac");
	}
	else if(type == 24)
	{
		strcpy(value, "b,g,n");
	}	
	
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWRt_OperatingStandards(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWRt_OperatingStandards, value);
	if(ret)
	{
		return -1;
	}*/
	char path[128] = {0};
	char buff[32] = {0};
 	char pure_n[32] = {0};
	char pure11ac[32] = {0};
	char *p = parseTemplate(path_name, ".Radio.");

	if (p == NULL)
		return -1;

	strcpy(pure_n, "0");
	sprintf(path, "wireless.radio%d.hwmode", getWiFiRadioUciNum(p));
	ret = do_uci_get(path, buff);
	//ret = do_uci_get("wireless.wlg.puren", pure_n);
	//ret = do_uci_get("wireless.wla.pure11ac", pure11ac);

	if(!strcmp(buff, "11b"))
		strcpy(value, "b");
	else if(!strcmp(buff, "11bg"))
		strcpy(value, "b,g");
	else if(!strcmp(buff, "11g"))
		strcpy(value, "g");
	else if(!strcmp(buff, "11a"))
		strcpy(value, "a");
	//else if(!strcmp(buff, "11ng") && !strcmp(pure_n, "0"))
	else if(!strcmp(buff, "11ng"))
		strcpy(value, "b,g,n");
	else if(!strcmp(buff, "11na"))
		strcpy(value, "n,a");
	//else if(!strcmp(buff, "11ac")  && !strcmp(pure11ac, "1"))
	else if(!strcmp(buff, "11ac"))
		strcpy(value, "ac");
	//else if(!strcmp(buff, "11ac")  && !strcmp(pure11ac, "0"))
		//strcpy(value, "ac,n,a");
	//else if(!strcmp(buff, "11ng") && !strcmp(pure_n, "1"))
		//strcpy(value, "n");
	  
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWRt_OperatingStandards(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DWRt_OperatingStandards, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char buff[128] = {0};
	char tmp[128] = {0};
	char *pure_n = "0";
	char *pure11ac = "0";
	int type;
	char *p = parseTemplate(path_name, ".Radio.");

	if (p == NULL)
		return -1;

	type = getWiFiRadioType(p);

	sprintf(buff, "wireless.wifi%d.hwmode", getWiFiRadioUciNum(p));

	if(type == 24)
	{
		if(!strcasecmp(value, "b"))
		{
			strcpy(tmp, "11b");
		}
		else if(!strcasecmp(value, "g"))
		{
			strcpy(tmp, "11g");
		}
		else if(!strcasecmp(value, "n"))
		{
			strcpy(tmp, "11ng");
			pure_n = "1";
		}
		else if(!strcasecmp(value, "b,g") || !strcasecmp(value, "g,b"))
		{
			strcpy(tmp, "11bg");
		}
		else if(!strcasecmp(value, "n,g") || !strcasecmp(value, "g,n"))
		{
			strcpy(tmp, "11ng");
		}
		else
			return -2;
	}
	else if(type == 5)
	{
		if(!strcasecmp(value, "a"))
		{
			strcpy(tmp, "11a");
		}
		else if(!strcasecmp(value, "n,a") || !strcasecmp(value, "a,n"))
		{
			strcpy(tmp, "11na");
		}		
		else if(!strcasecmp(value, "ac"))
		{
			strcpy(tmp, "11ac");
			pure11ac = "1";
		}
		else if(!strcasecmp(value, "ac,n,a") || !strcasecmp(value, "ac,a,n") 
			 || !strcasecmp(value, "n,ac,a") || !strcasecmp(value, "n,a,ac") 
			 || !strcasecmp(value, "a,n,ac") || !strcasecmp(value, "a,ac,n"))
		{
			strcpy(tmp, "11ac");
			pure11ac = "0";
		}
		else
			return -2;
	}

	ret = do_uci_set(buff, tmp);
	
	if(type == 24) //don't care guest_zone puren value
	{
		ret = do_uci_set("wireless.wlg.puren", pure_n);
	}
	else if(type == 5)
	{
		ret = do_uci_set("wireless.wla.pure11ac", pure11ac);
	}
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("wireless");
		if(ret)
		{
			return (-1);
		}
		//ret = 1; //means need to reboot for taking effect
		doWifiReload(atoi(p));
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWRt_PossibleChannels(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWRt_PossibleChannels, value);
	if(ret)
	{
		return -1;
	}*/
	char buff[128] = {0};
	int type;
	char *p = parseTemplate(path_name, ".Radio.");

	if (p == NULL)
		return -1;

	type = getWiFiRadioType(p);

	if(type == 5)
	{
		sprintf(value, "36-165");
	}
	else if(type == 24)
	{
		sprintf(value, "1-11");
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWRt_ChannelsInUse(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWRt_ChannelsInUse, value);
	if(ret)
	{
		return -1;
	}*/
	char buff[128] = {0};
	int type;
	char *p = parseTemplate(path_name, ".Radio.");

	if (p == NULL)
		return -1;

	type = getWiFiRadioType(p);

	if(type == 5)
	{
		sprintf(value, "36-165");
	}
	else if(type == 24)
	{
		sprintf(value, "1-11");
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWRt_Channel(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWRt_Channel, value);
	if(ret)
	{
		return -1;
	}*/
	char path[128] = {0};
	char buff[128] = {0};
	char *p = parseTemplate(path_name, ".Radio.");

	if (p == NULL)
		return -1;

	sprintf(path, "wireless.radio%d.channel", getWiFiRadioUciNum(p));
	ret = do_uci_get(path, buff);

	strcpy(value,buff);

	#if 0
	if(getWiFiRadioUciNum(p)==0)
	{
		/*5G*/ 
		ret = do_uci_get("detection.@curchan[0].5G", value);
		if(ret)
		{
			return -1;
		}
		tr_log(LOG_DEBUG,"get value 5G= [%s]",value);
	}
	if(getWiFiRadioUciNum(p)==1)
	{
		/*2.4G*/
		ret = do_uci_get("detection.@curchan[0].2_4G", value);
		if(ret)
		{
			return -1;
		}		
		tr_log(LOG_DEBUG,"get value 2.4G=[%s]",value);
	}
	#if 0
	sprintf(buff, "wireless.wifi%d.channel", getWiFiRadioUciNum(p));
	
	ret = do_uci_get(buff, value);
	if(ret)
	{
		return -1;
	}

	//for auto channel, to get the current using channel
	if (strcasecmp(value, "auto") == 0){
		FILE *fd = NULL;
		char cmd[128] = {0};
		char line[128] = {0};
		char *ptr = NULL, *ptr2 = NULL;
			
		sprintf(cmd, "iwlist ath%d channel | grep 'Current Frequency' | sed 's/(//g' | sed 's/)//g'", getWiFiRadioUciNum(p));
		if ((fd = popen(cmd, "r")) != NULL){
			if (fgets(line,sizeof(line)-1,fd)){
				if ((ptr = strstr(line, "Channel")) != NULL){
					sscanf(ptr, "%*s %s", value);
					if ((ptr2 = strstr(value, "\n")) != NULL)
						*ptr2 = '\0';
				}
			}
			pclose(fd);
		}
	}
	#endif
	#endif
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWRt_Channel(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DWRt_Channel, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char buff[128] = {0};
	int type;
	char *p = parseTemplate(path_name, ".Radio.");

	if (p == NULL)
		return -1;

	type = getWiFiRadioType(p);

	if(type == 5)
	{
		if(!(atoi(value) >= 36 && atoi(value) <= 165) && strcasecmp(value, "auto"))
		{
			return -2;
		}
	}
	else if(type == 24)
	{
		if(!(atoi(value) >= 1 && atoi(value) <= 11) && strcasecmp(value, "auto"))
		{
			return -2;
		}
	}
	
	sprintf(buff, "wireless.wifi%d.channel", getWiFiRadioUciNum(p));

	if(!strcasecmp(value, "auto"))
	{
		strcpy(value, "auto");
	}
	ret = do_uci_set(buff, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("wireless");
		if(ret)
		{
			return (-1);
		}
		//ret = 1; //means need to reboot for taking effect
		doWifiReload(atoi(p));
	}	
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWRt_AutoChannelSupported(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWRt_AutoChannelSupported, value);
	if(ret)
	{
		return -1;
	}*/

	strcpy(value, "1");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWRt_AutoChannelEnable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWRt_AutoChannelEnable, value);
	if(ret)
	{
		return -1;
	}*/
	char buff[128] = {0};
	char tmp[128] = {0};
	char *p = parseTemplate(path_name, ".Radio.");

	if (p == NULL)
		return -1;
	
	sprintf(buff, "wireless.wifi%d.channel", getWiFiRadioUciNum(p));
	
	ret = do_uci_get(buff, tmp);
	if(ret)
	{
		return -1;
	}

	if(strcmp(tmp, "auto") != 0)
	{
		strcpy(value, "0");
	}
	else
	{
		strcpy(value, "1");
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWRt_AutoChannelEnable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DWRt_AutoChannelEnable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char buff[128] = {0};
	char tmp[128] = {0};
	const struct iwinfo_ops *iw;
	int ch;
	char *p = parseTemplate(path_name, ".Radio.");

	if (p == NULL)
		return -1;

	sprintf(buff, "wireless.wifi%d.channel", getWiFiRadioUciNum(p));

	if(atoi(value) == 1)
	{
		ret = do_uci_set(buff, "auto");
	}
	else if(atoi(value) == 0) //to set current channel value
	{
		sprintf(tmp, "ath%d", getWiFiRadioUciNum(p));
		iw = iwinfo_backend(tmp);
		if (!iw)
		{
			tr_log(LOG_DEBUG,"No such wireless device: %s\n",tmp);
		}
		else
		{
			if (iw->channel(tmp, &ch))
			{
				ch = -1;
			}
			if (ch <= 0)
			{
				ret = do_uci_set(buff, "auto");
			}
			else
			{
				snprintf(tmp, sizeof(tmp), "%d", ch);
				ret = do_uci_set(buff, tmp);
			}
		}
		iwinfo_finish();	
	}
	else
	{
		return (-1);
	}
		

	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("wireless");
		if(ret)
		{
			return (-1);
		}
		//ret = 1; //means need to reboot for taking effect
		doWifiReload(atoi(p));
	}	
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWRt_AutoChannelRefreshPeriod(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWRt_AutoChannelRefreshPeriod, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "0");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWRt_AutoChannelRefreshPeriod(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DWRt_AutoChannelRefreshPeriod, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWRt_OperatingChannelBandwidth(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWRt_OperatingChannelBandwidth, value);
	if(ret)
	{
		return -1;
	}*/
	char buff[128] = {0};
	char buff1[128] = {0};
	char tmp[128] = {0};
	char tmp1[128] = {0};
	char *p = parseTemplate(path_name, ".Radio.");

	if (p == NULL)
		return -1;
	
	sprintf(buff, "wireless.wifi%d.htmode", getWiFiRadioUciNum(p));
	sprintf(buff1, "wireless.wifi%d.chbandwh", getWiFiRadioUciNum(p));
	ret = do_uci_get(buff, tmp);
	ret = do_uci_get(buff1, tmp1);
	if(ret)
	{
		return -1;
	}

	if(strcmp(tmp, "HT80") == 0)
	{
		if (atoi(tmp1) == 4)
			strcpy(value, "Auto");
		else //buff1 value is 3
			strcpy(value, "80MHz");
	}
	else if(strstr(tmp, "HT40") != NULL)
	{
		if (atoi(p) == 1) //5G
			strcpy(value, "40MHz");
		else{ //2.4G
			if (atoi(tmp1) == 0)
				strcpy(value, "Auto");
			else //buff1 value is 2
				strcpy(value, "40MHz");
		}
	}
	else if(strcmp(tmp, "HT20") == 0)
	{
		strcpy(value, "20MHz");
	}
	else if(strcmp(tmp, "HT160") == 0)
	{
		strcpy(value, "160MHz"); //tmp1 is 5
	}
	else if(strcmp(tmp, "HT80_80") == 0)
	{
		strcpy(value, "80+80MHz"); //tmp1 is 6
	}
		
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWRt_OperatingChannelBandwidth(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DWRt_OperatingChannelBandwidth, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char buff[128] = {0};
	char buff1[128] = {0};
	char tmp[128] = {0};
	char *p = parseTemplate(path_name, ".Radio.");

	if (p == NULL)
		return -1;
	
	sprintf(buff, "wireless.wifi%d.htmode", getWiFiRadioUciNum(p));
	sprintf(buff1, "wireless.wifi%d.chbandwh", getWiFiRadioUciNum(p));

	if(strcasecmp(value, "auto") == 0)
	{
		if(atoi(p) == 1)
		{
			ret = do_uci_set(buff, "HT80");
			ret = do_uci_set(buff1, "4");
		}
		else if(atoi(p) == 2)
		{
			ret = do_uci_set(buff, "HT40");
			ret = do_uci_set(buff1, "0");
		}
	}
	else if(strcasecmp(value, "80MHz") == 0)
	{
		if(atoi(p) == 1){
			ret = do_uci_set(buff, "HT80");
			ret = do_uci_set(buff1, "3");
		}
		else //2.4G not support 80MHz
			return -1;
	}
	else if(strcasecmp(value, "40MHz") == 0)
	{
		ret = do_uci_set(buff, "HT40");
		ret = do_uci_set(buff1, "2");
	}
	else if(strcasecmp(value, "20MHz") == 0)
	{
		ret = do_uci_set(buff, "HT20");
		ret = do_uci_set(buff1, "1");
	}
	else if(strcasecmp(value, "160MHz") == 0)
	{
		ret = do_uci_set(buff, "HT160");
		ret = do_uci_set(buff1, "5");
	}
	else if(strcasecmp(value, "80+80MHz") == 0)
	{
		ret = do_uci_set(buff, "HT80_80");
		ret = do_uci_set(buff1, "6");
	}
	else
	{
		return -2;
	}

	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("wireless");
		if(ret)
		{
			return (-1);
		}
		//ret = 1; //means need to reboot for taking effect
		doWifiReload(atoi(p));
	}		
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWRt_CurrentOperatingChannelBandwidth(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWRt_CurrentOperatingChannelBandwidth, value);
	if(ret)
	{
		return -1;
	}*/
	char buff[128] = {0};
	char buff1[128] = {0};
	char tmp[128] = {0};
	char tmp1[128] = {0};
	char *p = parseTemplate(path_name, ".Radio.");

	if (p == NULL)
		return -1;
	
	sprintf(buff, "wireless.wifi%d.htmode", getWiFiRadioUciNum(p));
	ret = do_uci_get(buff, tmp);
	if(ret)
	{
		return -1;
	}

	if(strcmp(tmp, "HT80") == 0)
	{
		strcpy(value, "80MHz");
	}
	else if(strstr(tmp, "HT40") != NULL)
	{
		strcpy(value, "40MHz");
	}
	else if(strcmp(tmp, "HT20") == 0)
	{
		strcpy(value, "20MHz");
	}
	else if(strcmp(tmp, "HT160") == 0)
	{
		strcpy(value, "160MHz");
	}
	else if(strcmp(tmp, "HT80_80") == 0)
	{
		strcpy(value, "80MHz");
	}
	else
		strcpy(value, "40MHz");
		
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWRt_ExtensionChannel(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWRt_ExtensionChannel, value);
	if(ret)
	{
		return -1;
	}*/
	char buff[128] = {0};
	char tmp[128] = {0};
	char *p = parseTemplate(path_name, ".Radio.");

	if (p == NULL)
		return -1;
	
	sprintf(buff, "wireless.wifi%d.htmode", getWiFiRadioUciNum(p));

	ret = do_uci_get(buff, tmp);
	if(ret)
	{
		return -1;
	}	

	if(!strcmp(tmp, "HT40+"))
	{
		strcpy(value, "AboveControlChannel");
	}
	else if(!strcmp(tmp, "HT40-")) 
	{
		strcpy(value, "BelowControlChannel");
	}
	else
	{
		strcpy(value, "Auto");
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWRt_ExtensionChannel(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DWRt_ExtensionChannel, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char buff[128] = {0};
	char tmp[128] = {0};
	char *p = parseTemplate(path_name, ".Radio.");

	if (p == NULL)
		return -1;
	
	sprintf(buff, "wireless.wifi%d.htmode", getWiFiRadioUciNum(p));

	ret = do_uci_get(buff, tmp);
	if(ret)
	{
		return -1;
	}	

	if(strstr(tmp, "HT40") != NULL)
	{
		if(strcasecmp(value, "AboveControlChannel") == 0)
		{
			ret = do_uci_set(buff, "HT40+");	
		}
		else if(strcasecmp(value, "BelowControlChannel") == 0)
		{
			ret = do_uci_set(buff, "HT40-");	
		}
		else if(strcasecmp(value, "auto") == 0)
		{
			ret = do_uci_set(buff, "HT40");	
		}
		else
		{
			return -2;
		}				
	}
	else
	{
		return -1;
	}	

	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("wireless");
		if(ret)
		{
			return (-1);
		}
		//ret = 1; //means need to reboot for taking effect
		doWifiReload(atoi(p));
	}	
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWRt_GuardInterval(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWRt_GuardInterval, value);
	if(ret)
	{
		return -1;
	}*/
	char buff[128] = {0};
	char tmp[128] = {0};
	int type;
	char *p = parseTemplate(path_name, ".Radio.");

	if (p == NULL)
		return -1;

	type = getWiFiRadioType(p);

	if(type == 5)
	{
		strcpy(buff, "wireless.wla.shortgi");
	}
	else if(type == 24)
	{
		strcpy(buff, "wireless.wlg.shortgi");
	}
	else
	{
		return -1;
	}

	ret = do_uci_get(buff, tmp);
	if(ret)
	{
		return -1;
	}

	if(atoi(tmp) == 1)
	{
		strcpy(value, "400nsec");
	}
	else
	{
		strcpy(value, "800nsec");
	}
	
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWRt_GuardInterval(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DWRt_GuardInterval, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char buff[128] = {0};
	char buff1[128] = {0};
	char buff2[128] = {0};
	char tmp[128] = {0};
	int type;
	char *p = parseTemplate(path_name, ".Radio.");

	if (p == NULL)
		return -1;

	type = getWiFiRadioType(p);

	if(type == 5) //don't care guest_zone ssid value
	{
		strcpy(buff, "wireless.wla.shortgi");
		strcpy(buff1, "wireless.wla1.shortgi");
		strcpy(buff2, "wireless.wla2.shortgi");
	}
	else if(type == 24)
	{
		strcpy(buff, "wireless.wlg.shortgi");
		strcpy(buff1, "wireless.wlg1.shortgi");
		strcpy(buff2, "wireless.wlg2.shortgi");
	}
	else
	{
		return -1;
	}

	if(strcasecmp(value, "400nsec") == 0)
	{
		ret = do_uci_set(buff, "1");
		ret = do_uci_set(buff1, "1");
		ret = do_uci_set(buff2, "1");
	}
	else if(strcasecmp(value, "800nsec") == 0)
	{
		ret = do_uci_set(buff, "0");
		ret = do_uci_set(buff1, "0");
		ret = do_uci_set(buff2, "0");
	}
	else if(strcasecmp(value, "auto") == 0)
	{
		ret = do_uci_set(buff, "1");
		ret = do_uci_set(buff1, "1");
		ret = do_uci_set(buff2, "1");
	}
	else
	{
		return -2;
	}

	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("wireless");
		if(ret)
		{
			return (-1);
		}
		//ret = 1; //means need to reboot for taking effect
		doWifiReload(atoi(p));
	}	
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWRt_MCS(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWRt_MCS, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "-1"); //means auto mode
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWRt_MCS(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DWRt_MCS, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWRt_TransmitPowerSupported(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWRt_TransmitPowerSupported, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "25,50,75,100");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWRt_TransmitPower(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWRt_TransmitPower, value);
	if(ret)
	{
		return -1;
	}*/
	char buff[128] = {0};
	char tmp[128] = {0};
	char *p = parseTemplate(path_name, ".Radio.");

	if (p == NULL)
		return -1;
	
	sprintf(buff, "wireless.wifi%d.tpscale", getWiFiRadioUciNum(p));

	ret = do_uci_get(buff, tmp);
	if(ret)
	{
		return -1;
	}

	if(!strcmp(tmp, "0"))
	{
		strcpy(value, "100");
	}
	else if(!strcmp(tmp, "1"))
	{
		strcpy(value, "75");
	}
	else if(!strcmp(tmp, "2"))
	{
		strcpy(value, "50");
	}
	else if(!strcmp(tmp, "3"))
	{
		strcpy(value, "25");
	}
	
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWRt_TransmitPower(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DWRt_TransmitPower, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char buff[128] = {0};
	char tmp[128] = {0};
	char *p = parseTemplate(path_name, ".Radio.");

	if (p == NULL)
		return -1;
	
	sprintf(buff, "wireless.wifi%d.tpscale", getWiFiRadioUciNum(p));

	if(!strcmp(value, "100"))	
	{
		ret = do_uci_set(buff, "0");
	}
	else if(!strcmp(value, "75"))	
	{
		ret = do_uci_set(buff, "1");
	}
	else if(!strcmp(value, "50"))	
	{
		ret = do_uci_set(buff, "2");
	}
	else if(!strcmp(value, "25"))	
	{
		ret = do_uci_set(buff, "3");
	}
	else
	{
		return -2;
	}
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("wireless");
		if(ret)
		{
			return (-1);
		}
		//ret = 1; //means need to reboot for taking effect
		doWifiReload(atoi(p));
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWRt_IEEE80211hSupported(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWRt_IEEE80211hSupported, value);
	if(ret)
	{
		return -1;
	}*/
	int type;
	char *p = parseTemplate(path_name, ".Radio.");

	if (p == NULL)
		return -1;

	type = getWiFiRadioType(p);

	if(type == 5)
	{
		strcpy(value, "1");
	}
	else if(type == 24)
	{
		strcpy(value, "0");
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWRt_IEEE80211hEnabled(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWRt_IEEE80211hEnabled, value);
	if(ret)
	{
		return -1;
	}*/
	int type;
	char *p = parseTemplate(path_name, ".Radio.");

	if (p == NULL)
		return -1;

	type = getWiFiRadioType(p);

	if(type == 5)
	{
		strcpy(value, "1");
	}
	else if(type == 24)
	{
		strcpy(value, "0");
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWRt_IEEE80211hEnabled(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DWRt_IEEE80211hEnabled, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don''t do anything
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWRt_RegulatoryDomain(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWRt_RegulatoryDomain, value);
	if(ret)
	{
		return -1;
	}*/

	strcpy(value, "US");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWRt_RegulatoryDomain(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DWRt_RegulatoryDomain, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don''t do anything
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWRt_RetryLimit(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DWRt_RetryLimit, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWRt_RetryLimit(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DWRt_RetryLimit, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWRt_CCARequest(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DWRt_CCARequest, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWRt_CCARequest(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DWRt_CCARequest, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWRt_CCAReport(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DWRt_CCAReport, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWRt_RPIHistogramRequest(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DWRt_RPIHistogramRequest, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWRt_RPIHistogramRequest(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DWRt_RPIHistogramRequest, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWRt_RPIHistogramReport(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DWRt_RPIHistogramReport, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWRt_FragmentationThreshold(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWRt_FragmentationThreshold, value);
	if(ret)
	{
		return -1;
	}*/
	char buff[128] = {0};
	int type;
	char *p = parseTemplate(path_name, ".Radio.");

	if (p == NULL)
		return -1;

	type = getWiFiRadioType(p);

	if (type == 5)
		strcpy(buff, "wireless.wla.frag");
	else
		strcpy(buff, "wireless.wlg.frag");
	
	ret = do_uci_get(buff, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWRt_FragmentationThreshold(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DWRt_FragmentationThreshold, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char buff[128] = {0};
	int type;
	char *p = parseTemplate(path_name, ".Radio.");

	if (p == NULL)
		return -1;
	
	type = getWiFiRadioType(p);

	if (atoi(value) < 256 || atoi(value) > 2346)
		return -2;

	if (type == 5)
		strcpy(buff, "wireless.wla.frag");
	else
		strcpy(buff, "wireless.wlg.frag");
		
	ret = do_uci_set(buff, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("wireless");
		if(ret)
		{
			return (-1);
		}
		//ret = 1; //means need to reboot for taking effect
		doWifiReload(atoi(p));
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWRt_RTSThreshold(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWRt_RTSThreshold, value);
	if(ret)
	{
		return -1;
	}*/
	char buff[128] = {0};
	int type;
	char *p = parseTemplate(path_name, ".Radio.");

	if (p == NULL)
		return -1;
	
	type = getWiFiRadioType(p);

	if (type == 5)
		strcpy(buff, "wireless.wla.rts");
	else
		strcpy(buff, "wireless.wlg.rts");
	
	ret = do_uci_get(buff, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWRt_RTSThreshold(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DWRt_RTSThreshold, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char buff[128] = {0};
	int type;
	char *p = parseTemplate(path_name, ".Radio.");

	if (p == NULL)
		return -1;
	
	type = getWiFiRadioType(p);

	if (atoi(value) < 0 || atoi(value) > 2347)
		return -2;
	
	if (type == 5)
		strcpy(buff, "wireless.wla.rts");
	else
		strcpy(buff, "wireless.wlg.rts");
	
	ret = do_uci_set(buff, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("wireless");
		if(ret)
		{
			return (-1);
		}
		//ret = 1; //means need to reboot for taking effect
		doWifiReload(atoi(p));
	}			
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWRt_LongRetryLimit(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DWRt_LongRetryLimit, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWRt_LongRetryLimit(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DWRt_LongRetryLimit, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWRt_BeaconPeriod(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWRt_BeaconPeriod, value);
	if(ret)
	{
		return -1;
	}*/
	char buff[128] = {0};
	int type;
	char *p = parseTemplate(path_name, ".Radio.");

	if (p == NULL)
		return -1;
	
	type = getWiFiRadioType(p);

	if (type == 5)
		strcpy(buff, "wireless.wla.bintval");
	else
		strcpy(buff, "wireless.wlg.bintval");
	
	ret = do_uci_get(buff, value);
	if(ret)
	{
		return -1;
	}

	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWRt_BeaconPeriod(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DWRt_BeaconPeriod, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char buff[128] = {0};
	int type;
	char *p = parseTemplate(path_name, ".Radio.");

	if (p == NULL)
		return -1;
	
	type = getWiFiRadioType(p);

	if (atoi(value) < 100 || atoi(value) > 1000)
		return -2;

	if (type == 5)
		strcpy(buff, "wireless.wla.bintval");
	else
		strcpy(buff, "wireless.wlg.bintval");
		
	ret = do_uci_set(buff, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("wireless");
		if(ret)
		{
			return (-1);
		}
		//ret = 1; //means need to reboot for taking effect
		doWifiReload(atoi(p));
	}			
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWRt_DTIMPeriod(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWRt_DTIMPeriod, value);
	if(ret)
	{
		return -1;
	}*/
	char buff[128] = {0};
	int type;
	char *p = parseTemplate(path_name, ".Radio.");

	if (p == NULL)
		return -1;
	
	type = getWiFiRadioType(p);

	if (type == 5)
		strcpy(buff, "wireless.wla.dtim_period");
	else
		strcpy(buff, "wireless.wlg.dtim_period");
	
	ret = do_uci_get(buff, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWRt_DTIMPeriod(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DWRt_DTIMPeriod, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char buff[128] = {0};
	int type;
	char *p = parseTemplate(path_name, ".Radio.");

	if (p == NULL)
		return -1;
	
	type = getWiFiRadioType(p);

	if (atoi(value) < 1 || atoi(value) > 255)
		return -2;

	if (type == 5)
		strcpy(buff, "wireless.wla.dtim_period");
	else
		strcpy(buff, "wireless.wlg.dtim_period");
		
	ret = do_uci_set(buff, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("wireless");
		if(ret)
		{
			return (-1);
		}
		//ret = 1; //means need to reboot for taking effect
		doWifiReload(atoi(p));
	}			
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWRt_PacketAggregationEnable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DWRt_PacketAggregationEnable, value);
	/*if(ret)
	{
		return -1;
	}*/
	strcpy(value, "1");//always 1
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWRt_PacketAggregationEnable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DWRt_PacketAggregationEnable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWRt_PreambleType(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWRt_PreambleType, value);
	if(ret)
	{
		return -1;
	}*/
	char buff[128] = {0};
	char tmp[128] = {0};
	int type;
	char *p = parseTemplate(path_name, ".Radio.");

	if (p == NULL)
		return -1;

	type = getWiFiRadioType(p);

	if(type == 5)
	{
		strcpy(buff, "wireless.wla.shortgi");
	}
	else if(type == 24)
	{
		strcpy(buff, "wireless.wlg.shortgi");
	}
	else
	{
		return -1;
	}

	ret = do_uci_get(buff, tmp);
	if(ret)
	{
		return -1;
	}

	if(atoi(tmp) == 1)
	{
		strcpy(value, "short");
	}
	else
	{
		strcpy(value, "long");
	}	
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWRt_PreambleType(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DWRt_PreambleType, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char buff[128] = {0};
	char buff1[128] = {0};
	char buff2[128] = {0};
	char buff3[128] = {0};
	char tmp[128] = {0};
	int type;
	char *p = parseTemplate(path_name, ".Radio.");

	if (p == NULL)
		return -1;

	type = getWiFiRadioType(p);

	if(type == 5)
	{
		strcpy(buff, "wireless.wla.shortgi");
		strcpy(buff1, "wireless.spectrumWiFi5g.shortgi");
		strcpy(buff2, "wireless.wla_hotspot.shortgi");
		strcpy(buff3, "wireless.wla_mesh.shortgi");
	}
	else if(type == 24)
	{
		strcpy(buff, "wireless.wlg.shortgi");
		strcpy(buff1, "wireless.spectrumWiFi.shortgi");
		strcpy(buff2, "wireless.wlg_hotspot.shortgi");
		strcpy(buff3, "wireless.wlg_mesh.shortgi");
	}
	else
	{
		return -1;
	}

	if(strcasecmp(value, "short") == 0)
	{
		ret = do_uci_set(buff, "1");
		ret = do_uci_set(buff1, "1");
		ret = do_uci_set(buff2, "1");
		ret = do_uci_set(buff3, "1");
	}
	else if(strcasecmp(value, "long") == 0)
	{
		ret = do_uci_set(buff, "0");
		ret = do_uci_set(buff1, "0");
		ret = do_uci_set(buff2, "0");
		ret = do_uci_set(buff3, "0");
	}
	else if(strcasecmp(value, "auto") == 0)
	{
		ret = do_uci_set(buff, "1");
		ret = do_uci_set(buff1, "1");
		ret = do_uci_set(buff2, "1");
		ret = do_uci_set(buff3, "1");
	}
	else
	{
		return -2;
	}

	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("wireless");
		if(ret)
		{
			return (-1);
		}
		//ret = 1; //means need to reboot for taking effect
		doWifiReload(atoi(p));
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWRt_BasicDataTransmitRates(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DWRt_BasicDataTransmitRates, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWRt_BasicDataTransmitRates(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DWRt_BasicDataTransmitRates, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWRt_OperationalDataTransmitRates(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DWRt_OperationalDataTransmitRates, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWRt_OperationalDataTransmitRates(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DWRt_OperationalDataTransmitRates, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWRt_SupportedDataTransmitRates(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWRt_SupportedDataTransmitRates, value);
	if(ret)
	{
		return -1;
	}*/
	FILE *fd = NULL;
	char cmd[128] = {0};
	char line[128] = {0};
	char rate[32] = {0};
	char *p = parseTemplate(path_name, ".Radio.");

	if (p == NULL)
		return -1;

	sprintf(cmd, "iwlist ath%d rate", getWiFiRadioUciNum(p));
	if ((fd = popen(cmd, "r")) != NULL){
		fgets(line,sizeof(line)-1,fd); //ingor first line
		memset(line, 0, sizeof(line));
		while (fgets(line,sizeof(line)-1,fd)){
			if (strstr(line, "Current") != NULL)
				break;
			memset(rate, 0, sizeof(rate));
			sscanf(line, "%s %*s", rate);
			if (strcmp(value, "") == 0){
				strcpy(value, rate);
			}
			else
				sprintf(value, "%s,%s", value, rate);
			memset(line, 0, sizeof(line));
		}
		pclose(fd);
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWRtS_BytesSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWRtS_BytesSent, value);
	if(ret)
	{
		return -1;
	}*/
	char buff[128] ={0};
	char tmp[128] ={0};
	FILE *fp = NULL;
	char *q = NULL;
	char *p = parseTemplate(path_name, ".Radio.");

	if (p == NULL)
		return -1;

	sprintf(tmp, "apstats -r -i wifi%d | grep 'Tx Data Bytes'", getWiFiRadioUciNum(p));
	fp = popen(tmp, "r");
	if(fp != NULL)
	{
		if(fgets(buff, sizeof(buff), fp) != NULL)
		{
			if((q = strstr(buff, "=")) != NULL)
					strcpy(value, q+2);
			if((q = strstr(value, "\n")) != NULL)
				*q = '\0';
		}
		else
			strcpy(value, "0");
		pclose(fp);
	}
	else
		strcpy(value, "0");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWRtS_BytesReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWRtS_BytesReceived, value);
	if(ret)
	{
		return -1;
	}*/
	char buff[128] ={0};
	char tmp[128] ={0};
	FILE *fp = NULL;
	char *q = NULL;
	char *p = parseTemplate(path_name, ".Radio.");

	if (p == NULL)
		return -1;

	sprintf(tmp, "apstats -r -i wifi%d | grep 'Rx Data Bytes'", getWiFiRadioUciNum(p));
	fp = popen(tmp, "r");
	if(fp != NULL)
	{
		if(fgets(buff, sizeof(buff), fp) != NULL)
		{
			if((q = strstr(buff, "=")) != NULL)
					strcpy(value, q+2);
			if((q = strstr(value, "\n")) != NULL)
				*q = '\0';
		}
		else
			strcpy(value, "0");
		pclose(fp);
	}
	else
		strcpy(value, "0");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWRtS_PacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWRtS_PacketsSent, value);
	if(ret)
	{
		return -1;
	}*/
	char buff[128] ={0};
	char tmp[128] ={0};
	FILE *fp = NULL;
	char *q = NULL;
	char *p = parseTemplate(path_name, ".Radio.");

	if (p == NULL)
		return -1;

	sprintf(tmp, "apstats -r -i wifi%d | grep 'Tx Data Packets'", getWiFiRadioUciNum(p));
	fp = popen(tmp, "r");
	if(fp != NULL)
	{
		if(fgets(buff, sizeof(buff), fp) != NULL)
		{
			if((q = strstr(buff, "=")) != NULL)
					strcpy(value, q+2);
			if((q = strstr(value, "\n")) != NULL)
				*q = '\0';
		}
		else
			strcpy(value, "0");
		pclose(fp);
	}
	else
		strcpy(value, "0");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWRtS_PacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWRtS_PacketsReceived, value);
	if(ret)
	{
		return -1;
	}*/
	char buff[128] ={0};
	char tmp[128] ={0};
	FILE *fp = NULL;
	char *q = NULL;
	char *p = parseTemplate(path_name, ".Radio.");

	if (p == NULL)
		return -1;

	sprintf(tmp, "apstats -r -i wifi%d | grep 'Rx Data Packets'", getWiFiRadioUciNum(p));
	fp = popen(tmp, "r");
	if(fp != NULL)
	{
		if(fgets(buff, sizeof(buff), fp) != NULL)
		{
			if((q = strstr(buff, "=")) != NULL)
					strcpy(value, q+2);
			if((q = strstr(value, "\n")) != NULL)
				*q = '\0';
		}
		else
			strcpy(value, "0");
		pclose(fp);
	}
	else
		strcpy(value, "0");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWRtS_ErrorsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWRtS_ErrorsSent, value);
	if(ret)
	{
		return -1;
	}*/
	char buff[128] ={0};
	char tmp[128] ={0};
	FILE *fp = NULL;
	char *q = NULL;
	char *p = parseTemplate(path_name, ".Radio.");

	if (p == NULL)
		return -1;

	sprintf(tmp, "ifconfig wifi%d | grep 'TX packets'", getWiFiRadioUciNum(p));
	fp = popen(tmp, "r");
	if(fp != NULL)
	{
		if(fgets(buff, sizeof(buff), fp) != NULL)
		{
			if((q = strstr(buff, "dropped")) != NULL)
			{
				*q = '\0';
				if((q = strstr(buff, "errors")) != NULL)
				{
					strcpy(value, q+strlen("errors:"));
					if ((q = strstr(value, " ")) != NULL)
						*q = '\0';
				}
			}
		}
		else
			strcpy(value, "0");
		pclose(fp);
	}
	else
		strcpy(value, "0");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWRtS_ErrorsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWRtS_ErrorsReceived, value);
	if(ret)
	{
		return -1;
	}*/
	char buff[128] ={0};
	char tmp[128] ={0};
	FILE *fp = NULL;
	char *q = NULL;
	char *p = parseTemplate(path_name, ".Radio.");

	if (p == NULL)
		return -1;

	sprintf(tmp, "apstats -r -i wifi%d | grep 'Rx errors'", getWiFiRadioUciNum(p));
	fp = popen(tmp, "r");
	if(fp != NULL)
	{
		if(fgets(buff, sizeof(buff), fp) != NULL)
		{
			if((q = strstr(buff, "=")) != NULL)
					strcpy(value, q+2);
			if((q = strstr(value, "\n")) != NULL)
				*q = '\0';
		}
		else
			strcpy(value, "0");
		pclose(fp);
	}
	else
		strcpy(value, "0");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWRtS_DiscardPacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWRtS_DiscardPacketsSent, value);
	if(ret)
	{
		return -1;
	}*/
	char buff[128] ={0};
	char tmp[128] ={0};
	FILE *fp = NULL;
	char *q = NULL;
	char *p = parseTemplate(path_name, ".Radio.");

	if (p == NULL)
		return -1;

	sprintf(tmp, "apstats -r -i wifi%d | grep 'Tx Dropped'", getWiFiRadioUciNum(p));
	fp = popen(tmp, "r");
	if(fp != NULL)
	{
		if(fgets(buff, sizeof(buff), fp) != NULL)
		{
			if((q = strstr(buff, "=")) != NULL)
					strcpy(value, q+2);
			if((q = strstr(value, "\n")) != NULL)
				*q = '\0';
		}
		else
			strcpy(value, "0");
		pclose(fp);
	}
	else
		strcpy(value, "0");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWRtS_DiscardPacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWRtS_DiscardPacketsReceived, value);
	if(ret)
	{
		return -1;
	}*/
	char buff[128] ={0};
	char tmp[128] ={0};
	FILE *fp = NULL;
	char *q = NULL;
	char *p = parseTemplate(path_name, ".Radio.");

	if (p == NULL)
		return -1;

	sprintf(tmp, "ifconfig wifi%d | grep 'RX packets'", getWiFiRadioUciNum(p));
	fp = popen(tmp, "r");
	if(fp != NULL)
	{
		if(fgets(buff, sizeof(buff), fp) != NULL)
		{
			if((q = strstr(buff, "overruns")) != NULL)
			{
				*q = '\0';
				if((q = strstr(buff, "dropped")) != NULL)
				{
					strcpy(value, q+strlen("dropped:"));
					if ((q = strstr(value, " ")) != NULL)
						*q = '\0';
				}
			}
		}
		else
			strcpy(value, "0");
		pclose(fp);
	}
	else
		strcpy(value, "0");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWRtS_PLCPErrorCount(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DWRtS_PLCPErrorCount, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWRtS_FCSErrorCount(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DWRtS_FCSErrorCount, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWRtS_InvalidMACCount(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWRtS_InvalidMACCount, value);
	if(ret)
	{
		return -1;
	}*/
	char buff[128] ={0};
	char tmp[128] ={0};
	FILE *fp = NULL;
	char *q = NULL;
	char *p = parseTemplate(path_name, ".Radio.");

	if (p == NULL)
		return -1;

	sprintf(tmp, "apstats -r -i wifi%d | grep 'Rx PHY errors'", getWiFiRadioUciNum(p));
	fp = popen(tmp, "r");
	if(fp != NULL)
	{
		if(fgets(buff, sizeof(buff), fp) != NULL)
		{
			if((q = strstr(buff, "=")) != NULL)
					strcpy(value, q+2);
			if((q = strstr(value, "\n")) != NULL)
				*q = '\0';
		}
		else
			strcpy(value, "0");
		pclose(fp);
	}
	else
		strcpy(value, "0");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWRtS_PacketsOtherReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DWRtS_PacketsOtherReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWRtS_Noise(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWRtS_Noise, value);
	if(ret)
	{
		return -1;
	}*/
	FILE *fd = NULL;
	char cmd[128] = {0};
	char line[128] = {0};
	char *ptr = NULL;
	char *p = parseTemplate(path_name, ".Radio.");

	if (p == NULL)
		return -1;

	sprintf(cmd, "iwconfig ath%d | grep Noise", getWiFiRadioUciNum(p));
	if ((fd = popen(cmd, "r")) != NULL){
		if (fgets(line,sizeof(line)-1,fd)){
			if ((ptr = strrchr(line, '=')) != NULL){
				sscanf(ptr+1, "%s %*s", value);
			}
		}
		pclose(fd);
	}

	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWN_DiagnosticsState(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DWN_DiagnosticsState, value);
	if(ret)
	{
		strcpy(value, "None");
		ret = 0;
	}
	if (strcmp(value, " ") == 0)
		strcpy(value, "None");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWN_DiagnosticsState(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DWN_DiagnosticsState, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/

		
	if(strcasecmp(value, "requested") == 0)
	{
		system("iwlist ath0 scanning > /tmp/ath0_scan_result");
		system("iwlist ath1 scanning > /tmp/ath1_scan_result");
	}
	else
	{
		return (-1);
	}

	ret = do_uci_set(DWN_DiagnosticsState, "Complete");
	if(ret)
	{
		return (-1);
	}
	else
	{
		sentEventforDiagnostic();
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWN_ResultNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWN_ResultNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}*/
	int i = 0;
	FILE *fp = NULL;
	char buff[256] = {0};
	
	fp = fopen("/tmp/ath0_scan_result", "r");

	if(fp != NULL)
	{
		while(fgets(buff, sizeof(buff), fp))
		{
			if(strstr(buff, "Cell") != NULL && strstr(buff, "- Address:") != NULL)
			{
				i++;
			}
		}
		fclose(fp);
	}

	fp = fopen("/tmp/ath1_scan_result", "r");
	if(fp != NULL)
	{
		while(fgets(buff, sizeof(buff), fp))
		{
			if(strstr(buff, "Cell") != NULL && strstr(buff, "- Address:") != NULL)
			{
				i++;
			}
		}
		fclose(fp);
	}
	sprintf(value, "%d", i);
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWNRt_Radio(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWNRt_Radio, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Result.");
	char BSSID[256] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(WiFiNeighboringWiFiDiagnosticMap, BSSID, atoi(index));
		if(ret)
		{
			return (-1);
		}
		tr_log(LOG_DEBUG,"BSSID[%s]", BSSID);
		get_NeighboringWiFi_info(BSSID, "Radio", value);
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWNRt_SSID(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWNRt_SSID, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Result.");
	char BSSID[256] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(WiFiNeighboringWiFiDiagnosticMap, BSSID, atoi(index));
		if(ret)
		{
			return (-1);
		}
		tr_log(LOG_DEBUG,"BSSID[%s]", BSSID);
		get_NeighboringWiFi_info(BSSID, "SSID", value);
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWNRt_BSSID(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWNRt_BSSID, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Result.");
	char BSSID[256] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(WiFiNeighboringWiFiDiagnosticMap, BSSID, atoi(index));
		if(ret)
		{
			return (-1);
		}
		tr_log(LOG_DEBUG,"BSSID[%s]", BSSID);
		strcpy(value, BSSID);		
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWNRt_Mode(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWNRt_Mode, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Result.");
	char BSSID[256] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(WiFiNeighboringWiFiDiagnosticMap, BSSID, atoi(index));
		if(ret)
		{
			return (-1);
		}
		tr_log(LOG_DEBUG,"BSSID[%s]", BSSID);
		get_NeighboringWiFi_info(BSSID, "Mode", value);		
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWNRt_Channel(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWNRt_Channel, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Result.");
	char BSSID[256] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(WiFiNeighboringWiFiDiagnosticMap, BSSID, atoi(index));
		if(ret)
		{
			return (-1);
		}
		tr_log(LOG_DEBUG,"BSSID[%s]", BSSID);
		get_NeighboringWiFi_info(BSSID, "Channel", value);		
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWNRt_SignalStrength(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWNRt_SignalStrength, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Result.");
	char BSSID[256] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(WiFiNeighboringWiFiDiagnosticMap, BSSID, atoi(index));
		if(ret)
		{
			return (-1);
		}
		tr_log(LOG_DEBUG,"BSSID[%s]", BSSID);
		get_NeighboringWiFi_info(BSSID, "SignalStrength", value);		
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWNRt_SecurityModeEnabled(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWNRt_SecurityModeEnabled, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Result.");
	char BSSID[256] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(WiFiNeighboringWiFiDiagnosticMap, BSSID, atoi(index));
		if(ret)
		{
			return (-1);
		}
		tr_log(LOG_DEBUG,"BSSID[%s]", BSSID);
		get_NeighboringWiFi_info(BSSID, "SecurityModeEnabled", value);		
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWNRt_EncryptionMode(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWNRt_EncryptionMode, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Result.");
	char BSSID[256] = {0};
	char *p = NULL;

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(WiFiNeighboringWiFiDiagnosticMap, BSSID, atoi(index));
		if(ret)
		{
			return (-1);
		}
		tr_log(LOG_DEBUG,"BSSID[%s]", BSSID);
		get_NeighboringWiFi_info(BSSID, "EncryptionMode", value);		
		p = strchr(value, '\n');
		if(p != NULL)
		{
			*p = '\0';
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWNRt_OperatingFrequencyBand(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWNRt_OperatingFrequencyBand, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Result.");
	char BSSID[256] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(WiFiNeighboringWiFiDiagnosticMap, BSSID, atoi(index));
		if(ret)
		{
			return (-1);
		}
		tr_log(LOG_DEBUG,"BSSID[%s]", BSSID);
		get_NeighboringWiFi_info(BSSID, "OperatingFrequencyBand", value);		
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWNRt_SupportedStandards(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWNRt_SupportedStandards, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Result.");
	char BSSID[256] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(WiFiNeighboringWiFiDiagnosticMap, BSSID, atoi(index));
		if(ret)
		{
			return (-1);
		}
		tr_log(LOG_DEBUG,"BSSID[%s]", BSSID);
		get_NeighboringWiFi_info(BSSID, "SupportedStandards", value);		
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWNRt_OperatingStandards(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWNRt_OperatingStandards, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Result.");
	char BSSID[256] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(WiFiNeighboringWiFiDiagnosticMap, BSSID, atoi(index));
		if(ret)
		{
			return (-1);
		}
		tr_log(LOG_DEBUG,"BSSID[%s]", BSSID);
		get_NeighboringWiFi_info(BSSID, "OperatingStandards", value);		
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWNRt_OperatingChannelBandwidth(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWNRt_OperatingChannelBandwidth, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Result.");
	char BSSID[256] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(WiFiNeighboringWiFiDiagnosticMap, BSSID, atoi(index));
		if(ret)
		{
			return (-1);
		}
		tr_log(LOG_DEBUG,"BSSID[%s]", BSSID);
		get_NeighboringWiFi_info(BSSID, "OperatingChannelBandwidth", value);		
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWNRt_BeaconPeriod(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWNRt_BeaconPeriod, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Result.");
	char BSSID[256] = {0};
	char *p = NULL;

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(WiFiNeighboringWiFiDiagnosticMap, BSSID, atoi(index));
		if(ret)
		{
			return (-1);
		}
		tr_log(LOG_DEBUG,"BSSID[%s]", BSSID);
		get_NeighboringWiFi_info(BSSID, "BeaconPeriod", value);	
		p = strchr(value, '\n');
		if(p != NULL)
		{
			*p = '\0';
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWNRt_Noise(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWNRt_Noise, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Result.");
	char BSSID[256] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(WiFiNeighboringWiFiDiagnosticMap, BSSID, atoi(index));
		if(ret)
		{
			return (-1);
		}
		tr_log(LOG_DEBUG,"BSSID[%s]", BSSID);
		get_NeighboringWiFi_info(BSSID, "Noise", value);		
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWNRt_BasicDataTransferRates(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWNRt_BasicDataTransferRates, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Result.");
	char BSSID[256] = {0};
	char BitRates[256] = {0};
	char temp[256] = {0};
	char *p = NULL;
	char *q = NULL;
	int i = 0;
	int j = 0;
	int n = 0;
	
	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(WiFiNeighboringWiFiDiagnosticMap, BSSID, atoi(index));
		if(ret)
		{
			return (-1);
		}
		tr_log(LOG_DEBUG,"BSSID[%s]", BSSID);
		get_NeighboringWiFi_info(BSSID, "BasicDataTransferRates", BitRates);
		while((p = strchr(BitRates, '\n')) != NULL)
		{
			*p = ';';
		}
		n = strlen(BitRates);
		for(i = 0; i < n && BitRates[i] != '\0'; i++)
		{
			if(!isblank(BitRates[i]))
			{
				temp[j++] = BitRates[i];
			}
		}
		p = strchr(temp, ':');
		if(p != NULL)
		{
			strcpy(BitRates, p+1);
		}

		p = BitRates;
		memset(temp, 0, sizeof(temp));
		while((q = strstr(p, "Mb")) != NULL)
		{
			*q = '\0';
			strcat(temp, p);
			strcat(temp, ",");
			p = q + strlen("Mb/s;");
		}
		q = strrchr(temp, ',');
		if(q != NULL)
		{
			*q = '\0';
		}
		strcpy(value, temp);
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWNRt_SupportedDataTransferRates(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWNRt_SupportedDataTransferRates, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Result.");
	char BSSID[256] = {0};
	char BitRates[256] = {0};
	char temp[256] = {0};
	char *p = NULL;
	char *q = NULL;
	int i = 0;
	int j = 0;
	int n = 0;
	
	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(WiFiNeighboringWiFiDiagnosticMap, BSSID, atoi(index));
		if(ret)
		{
			return (-1);
		}
		tr_log(LOG_DEBUG,"BSSID[%s]", BSSID);
		get_NeighboringWiFi_info(BSSID, "SupportedDataTransferRates", BitRates);
		while((p = strchr(BitRates, '\n')) != NULL)
		{
			*p = ';';
		}
		n = strlen(BitRates);
		for(i = 0; i < n && BitRates[i] != '\0'; i++)
		{
			if(!isblank(BitRates[i]))
			{
				temp[j++] = BitRates[i];
			}
		}
		p = strchr(temp, ':');
		if(p != NULL)
		{
			strcpy(BitRates, p+1);
		}

		p = BitRates;
		memset(temp, 0, sizeof(temp));
		while((q = strstr(p, "Mb")) != NULL)
		{
			*q = '\0';
			strcat(temp, p);
			strcat(temp, ",");
			p = q + strlen("Mb/s;");
		}
		q = strrchr(temp, ',');
		if(q != NULL)
		{
			*q = '\0';
		}
		strcpy(value, temp);
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWNRt_DTIMPeriod(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DWNRt_DTIMPeriod, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWSt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWSt_Enable, value);
	if(ret)
	{
		return -1;
	}*/
	char buff[128] = {0};
	char *p = parseTemplate(path_name, ".SSID.");

	if (p == NULL)
		return -1;

	getSSIDuciConfig(p, buff, "ath_enable");
	
	ret = do_uci_get(buff, value);
	if(ret)
	{
		strcpy(value, "0");
		ret = 0;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWSt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DWSt_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char buff[128] = {0};
	char *p = parseTemplate(path_name, ".SSID.");

	if (p == NULL)
		return -1;

	getSSIDuciConfig(p, buff, "ath_enable");
	
	ret = do_uci_set(buff, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("wireless");
		if(ret)
		{
			return (-1);
		}
		//ret = 1; //means need to reboot for taking effect
		doWifiReload(atoi(p));
	}	
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWSt_Status(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWSt_Status, value);
	if(ret)
	{
		return -1;
	}*/
	char buff[128] = {0};
	char tmp[128] = {0};
	char *p = parseTemplate(path_name, ".SSID.");

	if (p == NULL)
		return -1;

	getSSIDuciConfig(p, buff, "ath_enable");
	
	ret = do_uci_get(buff, tmp);
	if(ret)
	{
		strcpy(tmp, "0");
		ret = 0;
	}

	if(atoi(tmp) == 1)
	{
		strcpy(value, "Up");
	}
	else
	{
		strcpy(value, "Down");
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWSt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWSt_Alias, value);
	if(ret)
	{
		return -1;
	}*/
	ret = 1; //getting from tr.xml	
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWSt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (!isalpha(value[0]))
		return -2;
	
	if (strlen(value) > 64)
		return -2;
	
	/*ret = do_uci_set(DWSt_Alias, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//set to tr.xml
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWSt_Name(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWSt_Name, value);
	if(ret)
	{
		return -1;
	}*/

	/*char buff[128] = {0};
	char *p = parseTemplate(path_name, ".SSID.");

	if (p == NULL)
		return -1;

	getSSIDuciConfig(p, buff, "ssid");
	
	ret = do_uci_get(buff, value);
	if(ret)
	{
		return -1;
	}*/
	ret = 1; //getting from tr.xml
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWSt_LastChange(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWSt_LastChange, value);
	if(ret)
	{
		return -1;
	}*/
	getInterfaceLastChangeTime(value);
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWSt_LowerLayers(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWSt_LowerLayers, value);
	if(ret)
	{
		return -1;
	}*/
	char *p = parseTemplate(path_name, ".SSID.");

	if (p == NULL)
		return -1;
	
	ret = getWiFiLowerLayersPath(p, value);
	
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWSt_LowerLayers(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DWSt_LowerLayers, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't do anything
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWSt_BSSID(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWSt_BSSID, value);
	if(ret)
	{
		return -1;
	}*/
	char buff[128] = {0};
	char tmp[128] = {0};
	char inf[32] = {0};
	FILE *fp = NULL;
	char *p = parseTemplate(path_name, ".SSID.");

	if (p == NULL)
		return -1;

	getWiFiInterfaceNameWithInstanceNum(p, inf);
	sprintf(buff, "/sys/class/net/%s/address", inf);

	fp = fopen(buff, "r");	
	if(fp != NULL)
	{
		fgets(tmp, sizeof(tmp), fp);
		p = strchr(tmp, '\n');
		if(p != NULL)
		{
			*p = '\0';
		}
		strcpy(value, tmp);
		fclose(fp);
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWSt_MACAddress(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWSt_MACAddress, value);
	if(ret)
	{
		return -1;
	}*/
	char buff[128] = {0};
	char inf[32] = {0};
	char tmp[128] = {0};
	FILE *fp = NULL;
	char *p = parseTemplate(path_name, ".SSID.");

	if (p == NULL)
		return -1;
	
	getWiFiInterfaceNameWithInstanceNum(p, inf);
	sprintf(buff, "/sys/class/net/%s/address", inf);
		
	fp = fopen(buff, "r");	
	if(fp != NULL)
	{
		fgets(tmp, sizeof(tmp), fp);
		p = strchr(tmp, '\n');
		if(p != NULL)
		{
			*p = '\0';
		}
		strcpy(value, tmp);
		fclose(fp);
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWSt_SSID(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWSt_SSID, value);
	if(ret)
	{
		return -1;
	}*/
	char buff[128] = {0};
	char *p = parseTemplate(path_name, ".SSID.");

	if (p == NULL)
		return -1;

	getSSIDuciConfig(p, buff, "ssid");
	
	ret = do_uci_get(buff, value);
	if(ret)
	{
		strcpy(value, "");
		ret = 0;
	}	
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWSt_SSID(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DWSt_SSID, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char buff[128] = {0};
	char *p = parseTemplate(path_name, ".SSID.");

	if (p == NULL)
		return -1;

	if (strlen(value) > 32)
		return -2;

	getSSIDuciConfig(p, buff, "ssid");
	ret = do_uci_set(buff, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("wireless");
		if(ret)
		{
			return (-1);
		}
		//ret = 1; //means need to reboot for taking effect
		doWifiReload(atoi(p));
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWStS_BytesSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWStS_BytesSent, value);
	if(ret)
	{
		return -1;
	}*/
	char *p = parseTemplate(path_name, ".SSID.");

	if (p == NULL)
		return -1;

	getSSIStats(p, "Tx Data Bytes", value);

	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWStS_BytesReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWStS_BytesReceived, value);
	if(ret)
	{
		return -1;
	}*/
	char *p = parseTemplate(path_name, ".SSID.");

	if (p == NULL)
		return -1;

	getSSIStats(p, "Rx Data Bytes", value);

	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWStS_PacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWStS_PacketsSent, value);
	if(ret)
	{
		return -1;
	}*/
	char *p = parseTemplate(path_name, ".SSID.");

	if (p == NULL)
		return -1;

	getSSIStats(p, "Tx Data Packets", value);

	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWStS_PacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWStS_PacketsReceived, value);
	if(ret)
	{
		return -1;
	}*/
	char *p = parseTemplate(path_name, ".SSID.");

	if (p == NULL)
		return -1;

	getSSIStats(p, "Rx Data Packets", value);

	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWStS_ErrorsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWStS_ErrorsSent, value);
	if(ret)
	{
		return -1;
	}*/
	char buff[128] = {0};
	char tmp[128] = {0};
	char inf[32] = {0};
	FILE *fp = NULL;
	char *q = NULL;
	char *p = parseTemplate(path_name, ".SSID.");

	if (p == NULL)
		return -1;

	getWiFiInterfaceNameWithInstanceNum(p, inf);
	sprintf(tmp, "ifconfig %s | grep 'TX packets'", inf);

	tr_log(LOG_DEBUG,"################################################tmp[%s]",tmp);
	
	fp = popen(tmp, "r");
	if(fp != NULL)
	{
		if(fgets(buff, sizeof(buff), fp) != NULL)
		{
			if((q = strstr(buff, "dropped")) != NULL)
			{
				*q = '\0';
				if((q = strstr(buff, "errors")) != NULL)
				{
					strcpy(value, q+strlen("errors:"));
					if ((q = strstr(value, " ")) != NULL)
						*q = '\0';
				}
			}
		}
		else
			strcpy(value, "0");
		pclose(fp);
	}
	else
		strcpy(value, "0");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWStS_RetransCount(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DWStS_RetransCount, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWStS_FailedRetransCount(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DWStS_FailedRetransCount, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWStS_RetryCount(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DWStS_RetryCount, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWStS_MultipleRetryCount(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DWStS_MultipleRetryCount, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWStS_ACKFailureCount(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DWStS_ACKFailureCount, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWStS_AggregatedPacketCount(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DWStS_AggregatedPacketCount, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWStS_ErrorsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWStS_ErrorsReceived, value);
	if(ret)
	{
		return -1;
	}*/
	char *p = parseTemplate(path_name, ".SSID.");

	if (p == NULL)
		return -1;

	getSSIStats(p, "Rx errors", value);

	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWStS_UnicastPacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWStS_UnicastPacketsSent, value);
	if(ret)
	{
		return -1;
	}*/
	char *p = parseTemplate(path_name, ".SSID.");

	if (p == NULL)
		return -1;

	getSSIStats(p, "Tx Unicast Data Packets", value);

	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWStS_UnicastPacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWStS_UnicastPacketsReceived, value);
	if(ret)
	{
		return -1;
	}*/
	char *p = parseTemplate(path_name, ".SSID.");

	if (p == NULL)
		return -1;

	getSSIStats(p, "Rx Unicast Data Packets", value);

	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWStS_DiscardPacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWStS_DiscardPacketsSent, value);
	if(ret)
	{
		return -1;
	}*/
	char *p = parseTemplate(path_name, ".SSID.");

	if (p == NULL)
		return -1;

	getSSIStats(p, "Tx Dropped", value);

	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWStS_DiscardPacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWStS_DiscardPacketsReceived, value);
	if(ret)
	{
		return -1;
	}*/
	char *p = parseTemplate(path_name, ".SSID.");

	if (p == NULL)
		return -1;

	getSSIStats(p, "Rx Dropped", value);

	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWStS_MulticastPacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWStS_MulticastPacketsSent, value);
	if(ret)
	{
		return -1;
	}*/
	char *p = parseTemplate(path_name, ".SSID.");

	if (p == NULL)
		return -1;

	getSSIStats(p, "Tx multicast Data Packets", value);

	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWStS_MulticastPacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWStS_MulticastPacketsReceived, value);
	if(ret)
	{
		return -1;
	}*/
	char *p = parseTemplate(path_name, ".SSID.");

	if (p == NULL)
		return -1;

	getSSIStats(p, "Rx multicast Data Packets", value);

	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWStS_BroadcastPacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWStS_BroadcastPacketsSent, value);
	if(ret)
	{
		return -1;
	}*/
	char *p = parseTemplate(path_name, ".SSID.");

	if (p == NULL)
		return -1;

	getSSIStats(p, "Tx Broadcast Data Packets", value);

	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWStS_BroadcastPacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWStS_BroadcastPacketsReceived, value);
	if(ret)
	{
		return -1;
	}*/
	char *p = parseTemplate(path_name, ".SSID.");

	if (p == NULL)
		return -1;

	getSSIStats(p, "Rx Broadcast Data Packets", value);

	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWStS_UnknownProtoPacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWStS_UnknownProtoPacketsReceived, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "0");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWAt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWAt_Enable, value);
	if(ret)
	{
		return -1;
	}*/
	char buff[128] = {0};
	char *p = parseTemplate(path_name, ".AccessPoint.");

	if (p == NULL)
		return -1;

	getSSIDuciConfig(p, buff, "ath_enable");
	
	ret = do_uci_get(buff, value);
	if(ret)
	{
		strcpy(value, "0");
		ret = 0;
	}	
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWAt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DWAt_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char buff[128] = {0};
	char *p = parseTemplate(path_name, ".AccessPoint.");

	if (p == NULL)
		return -1;

	getSSIDuciConfig(p, buff, "ath_enable");
	
	ret = do_uci_set(buff, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("wireless");
		if(ret)
		{
			return (-1);
		}
		//ret = 1; //means need to reboot for taking effect
		doWifiReload(atoi(p));
	}		
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWAt_Status(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWAt_Status, value);
	if(ret)
	{
		return -1;
	}*/
	char buff[128] = {0};
	char tmp[128] = {0};
	char *p = parseTemplate(path_name, ".AccessPoint.");

	if (p == NULL)
		return -1;

	getSSIDuciConfig(p, buff, "ath_enable");
	
	ret = do_uci_get(buff, tmp);
	if(ret)
	{
		strcpy(tmp, "0");
		ret = 0;
	}

	if(atoi(tmp) == 1)
	{
		strcpy(value, "Enabled");
	}
	else
	{
		strcpy(value, "Disabled");
	}	
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWAt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWAt_Alias, value);
	if(ret)
	{
		return -1;
	}*/
	ret = 1; //get from tr.xml
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWAt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (!isalpha(value[0]))
		return -2;
	
	if (strlen(value) > 64)
		return -2;
	
	/*ret = do_uci_set(DWAt_Alias, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//set to tr.xml
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWAt_SSIDReference(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWAt_SSIDReference, value);
	if(ret)
	{
		return -1;
	}*/
	char buff[128] = {0};
	char *p = parseTemplate(path_name, ".AccessPoint.");

	if (p == NULL)
		return -1;
	
	sprintf(value, "Device.WiFi.SSID.%s", p);
	
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWAt_SSIDReference(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DWAt_SSIDReference, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWAt_SSIDAdvertisementEnabled(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWAt_SSIDAdvertisementEnabled, value);
	if(ret)
	{
		return -1;
	}*/
	char buff[128] = {0};
	char tmp[128] = {0};
	char *p = parseTemplate(path_name, ".AccessPoint.");

	if (p == NULL)
		return -1;

	getSSIDuciConfig(p, buff, "hidden");
	
	ret = do_uci_get(buff, tmp);
	if(ret)
	{
		strcpy(value, "0");
		ret = 0;
	}

	if(atoi(tmp) == 1)
	{
		strcpy(value, "0");
	}
	else if(atoi(tmp) == 0)
	{
		strcpy(value, "1");
	}
		
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWAt_SSIDAdvertisementEnabled(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DWAt_SSIDAdvertisementEnabled, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char buff[128] = {0};
	char *p = parseTemplate(path_name, ".AccessPoint.");

	if (p == NULL)
		return -1;

	getSSIDuciConfig(p, buff, "hidden");

	if(atoi(value) == 1)
	{
		ret = do_uci_set(buff, "0");
	}
	else if(atoi(value) == 0)
	{
		ret = do_uci_set(buff, "1");
	}
	
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("wireless");
		if(ret)
		{
			return (-1);
		}
		//ret = 1; //means need to reboot for taking effect
		doWifiReload(atoi(p));
	}	
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWAt_RetryLimit(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWAt_RetryLimit, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "0");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWAt_RetryLimit(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DWAt_RetryLimit, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWAt_WMMCapability(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWAt_WMMCapability, value);
	if(ret)
	{
		return -1;
	}*/
	char buff[128] = {0};
	char *p = parseTemplate(path_name, ".AccessPoint.");

	if (p == NULL)
		return -1;
	
	getSSIDuciConfig(p, buff, "wmm");
	
	ret = do_uci_get(buff, value);
	if(ret)
	{
		strcpy(value, "0");
		ret = 0;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWAt_WMMCapability_1751(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DWAt_WMMCapability_1751, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWAt_UAPSDCapability(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWAt_UAPSDCapability, value);
	if(ret)
	{
		return -1;
	}*/
	char buff[128] = {0};
	char *p = parseTemplate(path_name, ".AccessPoint.");

	if (p == NULL)
		return -1;
	
	getSSIDuciConfig(p, buff, "uapsd");
	
	ret = do_uci_get(buff, value);
	if(ret)
	{
		strcpy(value, "0");
		ret = 0;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWAt_WMMEnable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWAt_WMMEnable, value);
	if(ret)
	{
		return -1;
	}*/
	char buff[128] = {0};
	char *p = parseTemplate(path_name, ".AccessPoint.");

	if (p == NULL)
		return -1;
	
	getSSIDuciConfig(p, buff, "wmm");
	
	ret = do_uci_get(buff, value);
	if(ret)
	{
		strcpy(value, "0");
		ret = 0;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWAt_WMMEnable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DWAt_WMMEnable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char buff[128] = {0};
	char *p = parseTemplate(path_name, ".AccessPoint.");

	if (p == NULL)
		return -1;
	
	getSSIDuciConfig(p, buff, "wmm");
	
	ret = do_uci_set(buff, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("wireless");
		if(ret)
		{
			return (-1);
		}
		//ret = 1; //means need to reboot for taking effect
		doWifiReload(atoi(p));
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWAt_UAPSDEnable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWAt_UAPSDEnable, value);
	if(ret)
	{
		return -1;
	}*/
	char buff[128] = {0};
	char *p = parseTemplate(path_name, ".AccessPoint.");

	if (p == NULL)
		return -1;
	
	getSSIDuciConfig(p, buff, "uapsd");
	
	ret = do_uci_get(buff, value);
	if(ret)
	{
		strcpy(value, "0");
		ret = 0;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWAt_UAPSDEnable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DWAt_UAPSDEnable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char buff[128] = {0};
	char *p = parseTemplate(path_name, ".AccessPoint.");

	if (p == NULL)
		return -1;
	
	getSSIDuciConfig(p, buff, "uapsd");
	
	ret = do_uci_set(buff, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("wireless");
		if(ret)
		{
			return (-1);
		}
		//ret = 1; //means need to reboot for taking effect
		doWifiReload(atoi(p));
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWAt_AssociatedDeviceNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWAt_AssociatedDeviceNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}*/
	char buff[1024] = {0};
	char inf[32] = {0};
	char tmp[128] = {0};
	FILE *fp = NULL;
	char *p = parseTemplate(path_name, ".AccessPoint.");

	if (p == NULL)
		return -1;
	
	getWiFiInterfaceNameWithInstanceNum(p, inf);
	sprintf(tmp, "wlanconfig %s list sta", inf);
	
	tr_log(LOG_DEBUG,"######################################tmp [%s]",tmp);

	int i = 0;
	fp = popen(tmp, "r");
	if(fp != NULL)
	{
		//root@puma:/sys/class/net# wlanconfig ath1 list sta
		//ADDR               AID CHAN TXRATE RXRATE RSSI IDLE  TXSEQ  RXSEQ  CAPS        ACAPS     ERP    STATE MAXRATE(DOT11) HTCAPS ASSOCTIME    IEs   MODE PSMODE
		//7c:01:91:2f:11:e7    1    1 129M     29M   36    0      0   65535  EPSs         0          f              0             AP 00:00:52 RSN WME IEEE80211_MODE_11NG_HT20  0 
		//44:6d:57:fe:97:87    2    1  64M     26M   35 4320      0   65535  EPSs         0          f              0            WPS 00:00:10 RSN WME IEEE80211_MODE_11NG_HT20  0 

		//root@puma:/sys/class/net# wlanconfig ath13 list sta
		//wlanconfig: unable to get station information
		while(fgets(buff, sizeof(buff), fp))
		{
			i++;
		}
		pclose(fp);
		tr_log(LOG_DEBUG,"######################################associated device number [%d]",i);
		if(i != 0)
		{
			sprintf(value, "%d", i-1); //MUST i-1, to ingor first line
		}
		else
		{
			strcpy(value, "0");
		}
	}

	//update node
	node_t node;
	char path_name_change[128] = {0};
	sprintf(path_name_change,"%s.AssociatedDevice.",path_name);
	ret = lib_resolve_node( path_name_change, &node );
	tr_log(LOG_DEBUG,"ret[%d]",ret);
	if (ret == 0){
		lib_dynamic_init_children(node);
	}
	ret = lib_resolve_node( "Device.Hosts.Host.", &node );
	tr_log(LOG_DEBUG,"ret[%d]",ret);
	if (ret == 0){
		lib_dynamic_init_children(node);
	}
	
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWAt_MaxAssociatedDevices(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWAt_MaxAssociatedDevices, value);
	if(ret)
	{
		return -1;
	}*/
	char buff[128] = {0};
	char *p = parseTemplate(path_name, ".AccessPoint.");

	if (p == NULL)
		return -1;
	
	getSSIDuciConfig(p, buff, "maxsta");
	
	ret = do_uci_get(buff, value);
	if(ret)
	{
		return -1;
	}	
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWAt_MaxAssociatedDevices(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DWAt_MaxAssociatedDevices, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char buff[128] = {0};	
	char *p = parseTemplate(path_name, ".AccessPoint.");

	if (p == NULL)
		return -1;

	if(!(atoi(value) >=1 && atoi(value) <= 100))
	{
		return -2;
	}
	
	getSSIDuciConfig(p, buff, "maxsta");
	ret = do_uci_set(buff, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("wireless");
		if(ret)
		{
			return (-1);
		}
		//ret = 1; //means need to reboot for taking effect
		doWifiReload(atoi(p));
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWAt_IsolationEnable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWAt_IsolationEnable, value);
	if(ret)
	{
		return -1;
	}*/
	char buff[128] = {0};
	char *p = parseTemplate(path_name, ".AccessPoint.");

	if (p == NULL)
		return -1;
	
	getSSIDuciConfig(p, buff, "isolate");
	
	ret = do_uci_get(buff, value);
	if(ret)
	{
		strcpy(value, "0");
		ret = 0;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWAt_IsolationEnable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DWAt_IsolationEnable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char buff[128] = {0};
	char *p = parseTemplate(path_name, ".AccessPoint.");

	if (p == NULL)
		return -1;
	
	getSSIDuciConfig(p, buff, "isolate");
	ret = do_uci_set(buff, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("wireless");
		if(ret)
		{
			return (-1);
		}
		//ret = 1; //means need to reboot for taking effect
		doWifiReload(atoi(p));
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWAt_MACAddressControlEnabled(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char buff[128] = {0};
	char *p = parseTemplate(path_name, ".AccessPoint.");

	if (p == NULL)
		return -1;
	
	getSSIDuciConfig(p, buff, "aclenable");
	
	ret = do_uci_get(buff, value);
	if(ret)
	{
		strcpy(value, "0");
		ret = 0;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWAt_MACAddressControlEnabled(char * path_name, char *value)
{
	int ret = 0;	
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char buff[128] = {0};
	char *p = parseTemplate(path_name, ".AccessPoint.");

	if (p == NULL)
		return -1;

	getSSIDuciConfig(p, buff, "macfilter"); 
	if(do_uci_set(buff, "deny")) // default is allow white list, set to deny, or may won't work as expect
	{
		return (-1);
	}
	
	getSSIDuciConfig(p, buff, "aclenable");
	if(do_uci_set(buff, value))
	{
		return (-1);
	}

	if(do_uci_commit("wireless"))
	{
		return (-1);
	}
	//ret = 1; //means need to reboot for taking effect
	doWifiReload(atoi(p));

	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWAt_AllowedMACAddress(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char buff[128] = {0};
	char *q = NULL;
	char *p = parseTemplate(path_name, ".AccessPoint.");

	if (p == NULL)
		return -1;
	
	getSSIDuciConfig(p, buff, "maclist");
	
	ret = do_uci_get(buff, value);
	if(ret)
	{
		strcpy(value, "");
		ret = 0; //MUST
	}

	while((q = strchr(value, ' ')) != NULL)
	{
		*q = ',';
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWAt_AllowedMACAddress(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char buff[128] = {0};
	char *q = NULL;
	char *p = parseTemplate(path_name, ".AccessPoint.");

	if (p == NULL)
		return -1;

	if (strlen(value) > 1024)
		return -2;
	
	while((q = strchr(value, ',')) != NULL)
	{
		*q = ' ';
	}
	getSSIDuciConfig(p, buff, "maclist");
	if(do_uci_set(buff, value))
	{
		return (-1);
	}

	getSSIDuciConfig(p, buff, "macfilter");
	if(do_uci_set(buff, "deny"))
	{
		return (-1);
	}
	
	if(do_uci_commit("wireless"))
	{
		return (-1);
	}
	//ret = 1; //means need to reboot for taking effect
	doWifiReload(atoi(p));

	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWAtS_Reset(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWAtS_Reset, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "0");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWAtS_Reset(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char *p = parseTemplate(path_name, ".AccessPoint.");
	char str[128] = {0};
	char buff[128] = {0};

	if (p == NULL)
		return -1;

	if (atoi(value) != 1)
		return -1;

	if(atoi(p) == WIFI5G_START_INSTANCE_NUM){
		memset(str, 0, sizeof(str));
		getMfcInfo("WLAN5GPassword", str);
		if (str[0] == '\0')
			return (-1);
		
		ret = do_uci_set("wireless.wla.encryption", "psk2+ccmp"); //default value
		if(ret)
		{
			return (-1);
		}
		
		ret = do_uci_set("wireless.wla.key", str); //default value
		if(ret)
		{
			return (-1);
		}

		ret = do_uci_set("wireless.wla.wpapsk", str); //default value
		if(ret)
		{
			return (-1);
		}
	}
	else if(WIFI5G_START_INSTANCE_NUM < atoi(p) <= WIFI5G_END_INSTANCE_NUM)
	{
		memset(buff, 0, sizeof(buff));
		getSSIDuciConfig(p, buff, "ath_enable");
		ret = do_uci_set(buff, "0"); //default value
		if(ret)
		{
			return (-1);
		}
	}
	else if(atoi(p) == WIFI24G_START_INSTANCE_NUM)
	{
		memset(str, 0, sizeof(str));
		getMfcInfo("WLAN2GPassword", str);
		if (str[0] == '\0')
			return (-1);
		
		ret = do_uci_set("wireless.wlg.encryption", "psk2+ccmp"); //default value
		if(ret)
		{
			return (-1);
		}
		
		ret = do_uci_set("wireless.wlg.key", str); //default value
		if(ret)
		{
			return (-1);
		}

		ret = do_uci_set("wireless.wlg.wpapsk", str); //default value
		if(ret)
		{
			return (-1);
		}
	}
	else if(WIFI24G_START_INSTANCE_NUM < atoi(p) <= WIFI24G_END_INSTANCE_NUM)
	{
		memset(buff, 0, sizeof(buff));
		getSSIDuciConfig(p, buff, "ath_enable");
		ret = do_uci_set(buff, "0"); //default value
		if(ret)
		{
			return (-1);
		}
	}

	ret = do_uci_commit("wireless");
	if(ret)
	{
		return (-1);
	}

	//ret = 1; //means need to reboot for taking effect
	doWifiReload(atoi(p));

	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWAtS_ModesSupported(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWAtS_ModesSupported, value);
	if(ret)
	{
		return -1;
	}*/
	char buff[128] = {0};
	char tmp[128] = {0};
	char *p = parseTemplate(path_name, ".AccessPoint.");

	if (p == NULL)
		return -1;

	sprintf(value, "None,WEP-64,WEP-128,WPA-Personal,WPA2-Personal,WPA-WPA2-Personal,WPA-Enterprise,WPA2-Enterprise,WPA-WPA2-Enterprise,SAE");	
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWAtS_ModeEnabled(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWAtS_ModeEnabled, value);
	if(ret)
	{
		return -1;
	}*/
	char buff[128] = {0};
	char buff1[128] = {0};
	char tmp[128] = {0};
	char tmp1[128] = {0};
	int index = -1;		
	char *p = parseTemplate(path_name, ".AccessPoint.");

	if (p == NULL)
		return -1;
	
	getSSIDuciConfig(p, buff, "encryption");
	getSSIDuciConfig(p, buff1, "wepkeyid");
	
	ret = do_uci_get(buff, tmp);
	if(ret)
	{
		return -1;
	}	

	if(strstr(tmp, "wep") != NULL)
	{
		ret = do_uci_get(buff1, tmp1);
		if(ret)
		{
			return -1;
		}
		index = atoi(tmp1);
		switch(index)	
		{
			case 1:
				getSSIDuciConfig(p, buff, "key1");
				ret = do_uci_get(buff, tmp1);
				break;
			case 2:
				getSSIDuciConfig(p, buff, "key2");
				ret = do_uci_get(buff, tmp1);
				break;
			case 3:
				getSSIDuciConfig(p, buff, "key3");
				ret = do_uci_get(buff, tmp1);
				break;
			case 4:
				getSSIDuciConfig(p, buff, "key4");
				ret = do_uci_get(buff, tmp1);
				break;					
		}
		if(ret)
		{
			return -1;
		}

		if(strstr(tmp1, "s:") != NULL)
		{
			char tmp2[128] = {0};

			strcpy(tmp2, tmp1+2);
			strcpy(tmp1, tmp2);
			tr_log(LOG_DEBUG,"tmp2[%s]",tmp2);
		}

		if(strlen(tmp1) == 5 || strlen(tmp1) == 10)
		{
			strcpy(value, "WEP-64");
		}
		else if(strlen(tmp1) == 13 || strlen(tmp1) == 26)
		{
			strcpy(value, "WEP-128");			
		}
	}
	else if(!strcmp(tmp, "psk+tkip"))
	{
		strcpy(value, "WPA-Personal");			
	}
	else if(!strcmp(tmp, "psk2+ccmp"))
	{
		strcpy(value, "WPA2-Personal");			
	}
	else if(!strcmp(tmp, "psk-mixed+tkip+ccmp"))
	{
		strcpy(value, "WPA-WPA2-Personal");			
	}	
	else if(!strcmp(tmp, "wpa+tkip"))
	{
		strcpy(value, "WPA-Enterprise");			
	}
	else if(!strcmp(tmp, "wpa2+ccmp"))
	{
		strcpy(value, "WPA2-Enterprise");			
	}
	else if(!strcmp(tmp, "wpa-mixed+tkip+ccmp"))
	{
		strcpy(value, "WPA-WPA2-Enterprise");			
	}
	else if(!strcmp(tmp, "none"))
	{
		strcpy(value, "None");
	}
	else if(!strcmp(tmp, "sae"))
	{
		strcpy(value, "SAE");
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWAtS_ModeEnabled(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DWAtS_ModeEnabled, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char buff[128] = {0};
	char buff1[128] = {0};
	char *p = parseTemplate(path_name, ".AccessPoint.");

	if (p == NULL)
		return -1;

	getSSIDuciConfig(p, buff, "encryption");
	getSSIDuciConfig(p, buff1, "wps_enable");

	if(!strcasecmp(value, "wep-64") || !strcasecmp(value, "wep-128"))
	{
		ret = do_uci_set(buff, "wep+mixed");
		ret = do_uci_set(buff1, "0");
	}
	else if(!strcasecmp(value, "wpa-personal"))
	{
		ret = do_uci_set(buff, "psk+tkip");
	}
	else if(!strcasecmp(value, "wpa2-personal"))
	{
		ret = do_uci_set(buff, "psk2+ccmp");
	}
	else if(!strcasecmp(value, "wpa-wpa2-personal"))
	{
		ret = do_uci_set(buff, "psk-mixed+tkip+ccmp");
	}
	else if(!strcasecmp(value, "wpa-enterprise"))
	{
		ret = do_uci_set(buff, "wpa+tkip");
	}
	else if(!strcasecmp(value, "wpa2-enterprise"))
	{
		ret = do_uci_set(buff, "wpa2+ccmp");
	}
	else if(!strcasecmp(value, "wpa-wpa2-enterprise"))
	{
		ret = do_uci_set(buff, "wpa-mixed+tkip+ccmp");
	}
	else if(!strcasecmp(value, "none"))
	{
		ret = do_uci_set(buff, "none");
	}
	else if(!strcasecmp(value, "sae"))
	{
		ret = do_uci_set(buff, "sae");
	}
	else
		return (-2);
	
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("wireless");
		if(ret)
		{
			return (-1);
		}
		//ret = 1; //means need to reboot for taking effect
		doWifiReload(atoi(p));
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWAtS_WEPKey(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWAtS_WEPKey, value);
	if(ret)
	{
		return -1;
	}*/
#if 0
	char *p = NULL;
	char buff[128] = {0};
	char buff1[128] = {0};
	char tmp[128] = {0};
	char tmp1[128] = {0};
	int index = -1;		
	p = parseTemplate(path_name, ".AccessPoint.");

	if (p == NULL)
		return -1;
	
	getSSIDuciConfig(p, buff, "wepkeyid");
	
	ret = do_uci_get(buff, tmp);
	if(ret)
	{
		return -1;
	}
	index = atoi(tmp);
	switch(index)
	{
		case 1:
			getSSIDuciConfig(p, buff1, "key1");
			ret = do_uci_get(buff1, tmp1);
			break;
		case 2:
			getSSIDuciConfig(p, buff1, "key2");
			ret = do_uci_get(buff1, tmp1);
			break;
		case 3:
			getSSIDuciConfig(p, buff1, "key3");
			ret = do_uci_get(buff1, tmp1);
			break;
		case 4:
			getSSIDuciConfig(p, buff1, "key4");
			ret = do_uci_get(buff1, tmp1);
			break;
	}
	if(ret)
	{
		return -1;
	}
	strcpy(value, tmp1);
#else
	strcpy(value, ""); //When read, this parameter returns an empty string
#endif
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWAtS_WEPKey(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DWAtS_WEPKey, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char buff[128] = {0};
	char buff1[128] = {0};
	char buff2[128] = {0};
	char svalue[128] = {0};
	char *p = parseTemplate(path_name, ".AccessPoint.");

	if (p == NULL)
		return -1;

	if (strlen(value) != 5 && strlen(value) != 13 && strlen(value) != 10 && strlen(value) != 26)
	{
		return -2;
	}

	if (strlen(value) == 10 || strlen(value) == 26)
	{
		int i;
		char *ptr = value;
		
		for (i=0; i<strlen(value); i++) 
		{
			if (((*ptr>='0') && (*ptr<='9')) || ((*ptr>='a') && (*ptr<='f')) || ((*ptr>='A') && (*ptr<='F')))
			{
				ptr++;
			}
			else
			{
				return -2;
			}
		}		
	}
	
	getSSIDuciConfig(p, buff, "wepkeyid");
	getSSIDuciConfig(p, buff1, "key");
	getSSIDuciConfig(p, buff2, "key1");

	if (strlen(value) == 5 || strlen(value) == 13)
	{
		sprintf(svalue, "s:%s", value);
	}
	else
	{
		sprintf(svalue, "%s", value);
	}

	ret = do_uci_set(buff, "1");
	ret = do_uci_set(buff1, "1");
	ret = do_uci_set(buff2, svalue);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("wireless");
		if(ret)
		{
			return (-1);
		}
		//ret = 1; //means need to reboot for taking effect
		doWifiReload(atoi(p));
	}	
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWAtS_PreSharedKey(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWAtS_PreSharedKey, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, ""); //When read, this parameter returns an empty string
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWAtS_PreSharedKey(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DWAtS_PreSharedKey, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWAtS_KeyPassphrase(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWAtS_KeyPassphrase, value);
	if(ret)
	{
		return -1;
	}*/
#if 0
	char buff[128] = {0};
	char *p = parseTemplate(path_name, ".AccessPoint.");

	if (p == NULL)
		return -1;
	
	getSSIDuciConfig(p, buff, "wpapsk");
	ret = do_uci_get(buff, value);
	if(ret)
	{
		return -1;
	}
#else
	strcpy(value, ""); //When read, this parameter returns an empty string
#endif
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWAtS_KeyPassphrase(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DWAtS_KeyPassphrase, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char buff[128] = {0};
	char buff1[128] = {0};
	char *p = parseTemplate(path_name, ".AccessPoint.");

	if (p == NULL)
		return -1;

	if(strlen(value) < 8 || strlen(value) > 63)
	{
		return -2;
	}
	
	getSSIDuciConfig(p, buff, "wpapsk");
	getSSIDuciConfig(p, buff1, "key");
	ret = do_uci_set(buff, value);
	ret = do_uci_set(buff1, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("wireless");
		if(ret)
		{
			return (-1);
		}
		//ret = 1; //means need to reboot for taking effect
		doWifiReload(atoi(p));
	}	
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWAtS_RekeyingInterval(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWAtS_RekeyingInterval, value);
	if(ret)
	{
		return -1;
	}*/
	char buff[128] = {0};
	char *p = parseTemplate(path_name, ".AccessPoint.");

	if (p == NULL)
		return -1;
	
	getSSIDuciConfig(p, buff, "wpa_group_rekey");
	
	ret = do_uci_get(buff, value);
	if(ret)
	{
		return -1;
	}	
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWAtS_RekeyingInterval(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DWAtS_RekeyingInterval, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char buff[128] = {0};
	char *p = parseTemplate(path_name, ".AccessPoint.");

	if (p == NULL)
		return -1;

	if (atoi(value) < 0 || atoi(value) > 86400)
		return -2;
	
	getSSIDuciConfig(p, buff, "wpa_group_rekey");
	
	ret = do_uci_set(buff, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("wireless");
		if(ret)
		{
			return (-1);
		}
		//ret = 1; //means need to reboot for taking effect
		doWifiReload(atoi(p));
	}			
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWAtS_RadiusServerIPAddr(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWAtS_RadiusServerIPAddr, value);
	if(ret)
	{
		return -1;
	}*/
	char buff[128] = {0};
	char *p = parseTemplate(path_name, ".AccessPoint.");

	if (p == NULL)
		return -1;
	
	getSSIDuciConfig(p, buff, "auth_server");
	
	ret = do_uci_get(buff, value);
	if(ret)
	{
		strcpy(value, "");
		ret = 0;
	}	
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWAtS_RadiusServerIPAddr(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DWAtS_RadiusServerIPAddr, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char buff[128] = {0};
	char *p = parseTemplate(path_name, ".AccessPoint.");

	if (p == NULL)
		return -1;

	if (strlen(value) > 45)
		return -2;

	if (isValidIP(value) == 0)
		return -2;
	
	getSSIDuciConfig(p, buff, "auth_server");
	
	ret = do_uci_set(buff, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("wireless");
		if(ret)
		{
			return (-1);
		}
		//ret = 1; //means need to reboot for taking effect
		doWifiReload(atoi(p));
	}			
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWAtS_SecondaryRadiusServerIPAddr(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWAtS_SecondaryRadiusServerIPAddr, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, ""); //always null, only support one radius server
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWAtS_SecondaryRadiusServerIPAddr(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DWAtS_SecondaryRadiusServerIPAddr, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't support
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWAtS_RadiusServerPort(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWAtS_RadiusServerPort, value);
	if(ret)
	{
		return -1;
	}*/
	char buff[128] = {0};
	char *p = parseTemplate(path_name, ".AccessPoint.");

	if (p == NULL)
		return -1;
	
	getSSIDuciConfig(p, buff, "auth_port");
	
	ret = do_uci_get(buff, value);
	if(ret)
	{
		return -1;
	}	
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWAtS_RadiusServerPort(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DWAtS_RadiusServerPort, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char buff[128] = {0};
	char *p = parseTemplate(path_name, ".AccessPoint.");

	if (p == NULL)
		return -1;

	if (atoi(value) < 1 || atoi(value) > 65535)
		return -2;
	
	getSSIDuciConfig(p, buff, "auth_port");
	
	ret = do_uci_set(buff, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("wireless");
		if(ret)
		{
			return (-1);
		}
		//ret = 1; //means need to reboot for taking effect
		doWifiReload(atoi(p));
	}			
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWAtS_SecondaryRadiusServerPort(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWAtS_SecondaryRadiusServerPort, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, ""); //always null, only support one radius server
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWAtS_SecondaryRadiusServerPort(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DWAtS_SecondaryRadiusServerPort, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't support
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWAtS_RadiusSecret(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWAtS_RadiusSecret, value);
	if(ret)
	{
		return -1;
	}*/

#if 0
	char buff[128] = {0};
	char *p = parseTemplate(path_name, ".AccessPoint.");

	if (p == NULL)
		return -1;
	
	getSSIDuciConfig(p, buff, "auth_secret");
	
	ret = do_uci_get(buff, value);
	if(ret)
	{
		strcpy(value, "");
		ret = 0; //MUST
	}
#else
	strcpy(value, ""); //When read, this parameter returns an empty string
#endif
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWAtS_RadiusSecret(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DWAtS_RadiusSecret, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char buff[128] = {0};
	char *p = parseTemplate(path_name, ".AccessPoint.");

	if (p == NULL)
		return -1;
	
	getSSIDuciConfig(p, buff, "auth_secret");
	
	ret = do_uci_set(buff, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("wireless");
		if(ret)
		{
			return (-1);
		}
		//ret = 1; //means need to reboot for taking effect
		doWifiReload(atoi(p));
	}			
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWAtS_SecondaryRadiusSecret(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWAtS_SecondaryRadiusSecret, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, ""); //always null, only support one radius server, When read, this parameter returns an empty string
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWAtS_SecondaryRadiusSecret(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DWAtS_SecondaryRadiusSecret, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't support
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWAtS_MFPConfig(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWAtS_MFPConfig, value);
	if(ret)
	{
		return -1;
	}*/
	char buff[128] = {0}, buff2[128] = {0};
	char *p = parseTemplate(path_name, ".AccessPoint.");

	if (p == NULL)
		return -1;
	
	getSSIDuciConfig(p, buff, "ieee80211w");
	
	ret = do_uci_get(buff, buff2);
	if(ret)
	{
		return -1;
	}
	if(!strcmp(buff2, "1")){
		strcpy(value, "Optional");
	}
	else if(!strcmp(buff2, "2")){
		strcpy(value, "Required");
	}
	else{
		strcpy(value, "Disabled");
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWAtS_MFPConfig(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DWAtS_MFPConfig, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char buff[128] = {0}, buff2[128] = {0};
	char *p = parseTemplate(path_name, ".AccessPoint.");

	if (p == NULL)
		return -1;
	
	getSSIDuciConfig(p, buff, "ieee80211w");

	if(!strcmp(value, "Optional")){
		strcpy(buff2, "1");
	}
	else if(!strcmp(value, "Required")){
		strcpy(buff2, "2");
	}
	else if(!strcmp(value, "Disabled")){
		strcpy(buff2, "0");
	}
	else
		return -2;
	
	ret = do_uci_set(buff, buff2);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("wireless");
		if(ret)
		{
			return (-1);
		}
		//ret = 1; //means need to reboot for taking effect
		doWifiReload(atoi(p));
	}	
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWAtS_X_TWC_COM_PreSharedKey(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWAtS_MFPConfig, value);
	if(ret)
	{
		return -1;
	}*/
	char buff[128] = {0};
	char value2[256] = {0};
	char *p = parseTemplate(path_name, ".AccessPoint.");

	if (p == NULL)
		return -1;
	
	getSSIDuciConfig(p, buff, "wpapsk");
	
	ret = do_uci_get(buff, value2);
	if(ret)
	{
		strcpy(value, "");
		ret = 0;
	}
	strToHex(value2, value);
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWAtS_X_TWC_COM_PreSharedKey(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DWAtS_MFPConfig, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char buff[128] = {0}, buff2[128] = {0};
	char value_hex_to_ch[128] = {0};
	char *p = parseTemplate(path_name, ".AccessPoint.");

	if (p == NULL)
		return -1;

	if(strlen(value) > 32)
	{
		return -2;
	}
	
	getSSIDuciConfig(p, buff, "key");
	getSSIDuciConfig(p, buff2, "wpapsk");
	hexToStr(value, value_hex_to_ch);
	ret = do_uci_set(buff, value_hex_to_ch);
	ret = do_uci_set(buff2, value_hex_to_ch);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("wireless");
		if(ret)
		{
			return (-1);
		}
		//ret = 1; //means need to reboot for taking effect
		doWifiReload(atoi(p));
	}	
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWAtS_X_TWC_COM_PreSharedKeySHA1(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWAtS_MFPConfig, value);
	if(ret)
	{
		return -1;
	}*/
	char buff[128] = {0};
	char value2[256] = {0}, value_ready_to_SHA1[256] = {0};
	char *p = parseTemplate(path_name, ".AccessPoint.");

	if (p == NULL)
		return -1;
	
	getSSIDuciConfig(p, buff, "key");
	
	ret = do_uci_get(buff, value2);
	if(ret)
	{
		strcpy(value, "");
		ret = 0;
	}
	strToHex(value2, value_ready_to_SHA1);
	sha1_encode(value_ready_to_SHA1, value);
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWAtS_X_TWC_COM_KeyPassPhrase(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWAtS_MFPConfig, value);
	if(ret)
	{
		return -1;
	}*/
	char buff[128] = {0};
	char *p = parseTemplate(path_name, ".AccessPoint.");

	if (p == NULL)
		return -1;
	
	getSSIDuciConfig(p, buff, "wpapsk");
	
	ret = do_uci_get(buff, value);
	if(ret)
	{
		strcpy(value, "");
		ret = 0;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWAtS_X_TWC_COM_KeyPassPhrase(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DWAtS_MFPConfig, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char buff[128] = {0}, buff2[128] = {0};	
	char *p = parseTemplate(path_name, ".AccessPoint.");

	if (p == NULL)
		return -1;

	if(strlen(value) < 8 || strlen(value) > 63)
	{
		return -2;
	}
	
	getSSIDuciConfig(p, buff, "key");
	getSSIDuciConfig(p, buff2, "wpapsk");
	ret = do_uci_set(buff, value);
	ret = do_uci_set(buff2, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("wireless");
		if(ret)
		{
			return (-1);
		}
		//ret = 1; //means need to reboot for taking effect
		doWifiReload(atoi(p));
	}	
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWAtS_X_TWC_COM_KeyPassPhraseSHA1(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWAtS_MFPConfig, value);
	if(ret)
	{
		return -1;
	}*/
	char buff[128] = {0};
	char value2[256] = {0};
	char *p = parseTemplate(path_name, ".AccessPoint.");

	if (p == NULL)
		return -1;
	
	getSSIDuciConfig(p, buff, "key");
	
	ret = do_uci_get(buff, value2);
	if(ret)
	{
		strcpy(value, "");
		ret = 0;
	}
	sha1_encode(value2, value);
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWAtA_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DWAtA_Enable, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWAtA_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DWAtA_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWAtA_ServerIPAddr(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DWAtA_ServerIPAddr, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWAtA_ServerIPAddr(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DWAtA_ServerIPAddr, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWAtA_SecondaryServerIPAddr(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DWAtA_SecondaryServerIPAddr, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWAtA_SecondaryServerIPAddr(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DWAtA_SecondaryServerIPAddr, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWAtA_ServerPort(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DWAtA_ServerPort, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWAtA_ServerPort(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DWAtA_ServerPort, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWAtA_SecondaryServerPort(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DWAtA_SecondaryServerPort, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWAtA_SecondaryServerPort(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DWAtA_SecondaryServerPort, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWAtA_Secret(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DWAtA_Secret, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWAtA_Secret(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DWAtA_Secret, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWAtA_SecondarySecret(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DWAtA_SecondarySecret, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWAtA_SecondarySecret(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DWAtA_SecondarySecret, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWAtA_InterimInterval(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DWAtA_InterimInterval, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWAtA_InterimInterval(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DWAtA_InterimInterval, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWAtW_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWAtW_Enable, value);
	if(ret)
	{
		return -1;
	}*/
	char buff[128] = {0};
	char *p = parseTemplate(path_name, ".AccessPoint.");

	if (p == NULL)
		return -1;
	
	getSSIDuciConfig(p, buff, "wps_enable");
	
	ret = do_uci_get(buff, value);
	if(ret)
	{
		strcpy(value, "0");
		ret = 0;
	}	
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWAtW_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DWAtW_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char buff[128] = {0};
	char *p = parseTemplate(path_name, ".AccessPoint.");

	if (p == NULL)
		return -1;
	
	getSSIDuciConfig(p, buff, "wps_enable");
	
	ret = do_uci_set(buff, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("wireless");
		if(ret)
		{
			return (-1);
		}
		//ret = 1; //means need to reboot for taking effect
		if(atoi(p) < WIFI5G_RADIO_INSTANCE_NUM)
		{
			system("hostapd_cli -i ath1 -p /var/run/hostapd-wifi1 wps_pbc");
		}
		else
		{
			system("hostapd_cli -i ath0 -p /var/run/hostapd-wifi0 wps_pbc");
		}
	}			
	
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWAtW_ConfigMethodsSupported(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWAtW_ConfigMethodsSupported, value);
	if(ret)
	{
		return -1;
	}*/

	strcpy(value, "PushButton,PIN");	
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWAtW_ConfigMethodsSupported(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DWAtW_ConfigMethodsSupported, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWAtW_ConfigMethodsEnabled(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWAtW_ConfigMethodsEnabled, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "PushButton");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWAtW_ConfigMethodsEnabled(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DWAtW_ConfigMethodsEnabled, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWAtW_Status(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWAtS_MFPConfig, value);
	if(ret)
	{
		return -1;
	}*/
	char buff[128] = {0}, buff2[128] = {0};
	char *p = parseTemplate(path_name, ".AccessPoint.");

	if (p == NULL)
		return -1;
	
	getSSIDuciConfig(p, buff, "wps_state");
	
	ret = do_uci_get(buff, buff2);
	if(ret)
	{
		return -1;
	}
	if(!strcmp(buff2, "1")){
		strcpy(value, "Unconfigured");
	}
	else if(!strcmp(buff2, "2")){
		strcpy(value, "Configured");
	}
	else{
		strcpy(value, "Disabled");
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWAtW_Version(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWAtS_MFPConfig, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "2.0"); 
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWAtW_PIN(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWAtS_PIN, value);
	if(ret)
	{
		return -1;
	}*/
	char buff[128] = {0};
	char *p = parseTemplate(path_name, ".AccessPoint.");

	if (p == NULL)
		return -1;
	
	getSSIDuciConfig(p, buff, "wps_pin");
	
	ret = do_uci_get(buff, value);
	if(ret)
	{
		return -1;
	}

	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWAtAt_MACAddress(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWAtAt_MACAddress, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".AssociatedDevice.");
	char *p = parseTemplate(path_name, ".AccessPoint.");
	char mac[128] = {0};
	char *q = NULL;
	
	if (p != NULL && index != NULL)
	{
		char filename[64] = {0};
		sprintf(filename, "AssociatedDevice%s.mapping", p);
		ret = lib_getvalue_mapfile_byinstance(filename, mac, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			if ((q = strstr(mac, "|")) != NULL)
				*q = '\0';
			strcpy(value, mac);
		}
	}
	else
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWAtAt_OperatingStandard(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWAtAt_MACAddress, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".AssociatedDevice.");
	char *p = parseTemplate(path_name, ".AccessPoint.");
	char mac[128] = {0};

	if (p != NULL && index != NULL)
	{
		char filename[64] = {0};
		sprintf(filename, "AssociatedDevice%s.mapping", p);
		ret = lib_getvalue_mapfile_byinstance(filename, mac, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			if (strstr(mac, "IEEE80211_MODE_11B") != NULL)
				strcpy(value, "b");
			else if (strstr(mac, "IEEE80211_MODE_11G") != NULL)
				strcpy(value, "g");
			else if (strstr(mac, "IEEE80211_MODE_11NA_HT20") != NULL)
				strcpy(value, "n");
			else if (strstr(mac, "IEEE80211_MODE_11NA_HT40PLUS") != NULL)
				strcpy(value, "n");
			else if (strstr(mac, "IEEE80211_MODE_11NA_HT40MINUS") != NULL)
				strcpy(value, "n");
			else if (strstr(mac, "IEEE80211_MODE_11NA_HT40") != NULL)
				strcpy(value, "n");
			else if (strstr(mac, "IEEE80211_MODE_11NG_HT20") != NULL)
				strcpy(value, "n");
			else if (strstr(mac, "IEEE80211_MODE_11NG_HT40PLUS") != NULL)
				strcpy(value, "n");
			else if (strstr(mac, "IEEE80211_MODE_11NG_HT40MINUS") != NULL)
				strcpy(value, "n");
			else if (strstr(mac, "IEEE80211_MODE_11NG_HT40") != NULL)
				strcpy(value, "n");
			else if (strstr(mac, "IEEE80211_MODE_11AC_VHT20") != NULL)
				strcpy(value, "ac");
			else if (strstr(mac, "IEEE80211_MODE_11AC_VHT40PLUS") != NULL)
				strcpy(value, "ac");
			else if (strstr(mac, "IEEE80211_MODE_11AC_VHT40MINUS") != NULL)
				strcpy(value, "ac");
			else if (strstr(mac, "IEEE80211_MODE_11AC_VHT40") != NULL)
				strcpy(value, "ac");
			else if (strstr(mac, "IEEE80211_MODE_11AC_VHT80") != NULL)
				strcpy(value, "ac");
			else if (strstr(mac, "IEEE80211_MODE_11AC_VHT160") != NULL)
				strcpy(value, "ac");
			else if (strstr(mac, "IEEE80211_MODE_11AC_VHT80_80") != NULL)
				strcpy(value, "ac");
			else if (strstr(mac, "IEEE80211_MODE_11A") != NULL)
				strcpy(value, "a");
			else
				return -1;
				
		}
	}
	else
	{
		return (-1);
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWAtAt_AuthenticationState(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWAtAt_AuthenticationState, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".AssociatedDevice.");
	char *p = parseTemplate(path_name, ".AccessPoint.");
	char mac[128] = {0};
	char buff[128] ={0};
	char tmp[128] ={0};
	char inf[32] = {0};
	FILE *fp = NULL;
	char *q = NULL;
	int found = 0;
	
	if (p != NULL && index != NULL)
	{
		char filename[64] = {0};
		sprintf(filename, "AssociatedDevice%s.mapping", p);
		ret = lib_getvalue_mapfile_byinstance(filename, mac, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else{
			if ((q = strstr(mac, "|")) != NULL)
				*q = '\0';
		}
	}
	else
	{
		return (-1);
	}
	
	getWiFiInterfaceNameWithInstanceNum(p, inf);
	sprintf(tmp, "apstats -s -i %s -m %s", inf, mac);
	
	tr_log(LOG_DEBUG,"################################################tmp[%s]",tmp);
	
	fp = popen(tmp, "r");
	if(fp != NULL)
	{
		while(fgets(buff, sizeof(buff), fp))
		{
			if(strstr(buff, mac) != NULL)
			{
				found = 1;
				break;
			}
		}
		pclose(fp);
	}

	if (found == 1)
	{
		char encry[32] = {0};
		memset(buff, 0, sizeof(buff));
		getSSIDuciConfig(p, buff, "encryption");

		ret = do_uci_get(buff, encry);
		if(ret)
		{
			strcpy(value, "0");
			ret = 0;
		}
		else
		{
			if (strcasecmp(encry, "none") != 0)
				strcpy(value, "1");
			else
				strcpy(value, "0");
		}
	}
	else
		strcpy(value, "0");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWAtAt_LastDataDownlinkRate(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWAtAt_LastDataDownlinkRate, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".AssociatedDevice.");
	char *p = parseTemplate(path_name, ".AccessPoint.");
	char mac[128] = {0};
	char buff[128] ={0};
	char tmp[128] ={0};
	char inf[32] = {0};
	FILE *fp = NULL;
	char *q = NULL;
	
	if (p != NULL && index != NULL)
	{
		char filename[64] = {0};
		sprintf(filename, "AssociatedDevice%s.mapping", p);
		ret = lib_getvalue_mapfile_byinstance(filename, mac, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else{
			if ((q = strstr(mac, "|")) != NULL)
				*q = '\0';
		}
	}
	else
	{
		return (-1);
	}

	getWiFiInterfaceNameWithInstanceNum(p, inf);
	sprintf(tmp, "apstats -s -i %s -m %s", inf, mac);

	tr_log(LOG_DEBUG,"################################################tmp[%s]",tmp);

	fp = popen(tmp, "r");
	if(fp != NULL)
	{
		while(fgets(buff, sizeof(buff), fp) != NULL)
		{
			if(strstr(buff, "Last tx rate") != NULL)
			{
				if((q = strstr(buff, "=")) != NULL)
					strcpy(value, q+2);
				if ((q = strstr(value, "\n")) != NULL || (q = strstr(value, "\r")) != NULL)
					*q = '\0';
				break;
			}
		}
		pclose(fp);
	}

	if (strcmp(value, "") == 0)
		strcpy(value, "0");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWAtAt_LastDataUplinkRate(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWAtAt_LastDataUplinkRate, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".AssociatedDevice.");
	char *p = parseTemplate(path_name, ".AccessPoint.");
	char mac[128] = {0};
	char buff[128] ={0};
	char tmp[128] ={0};
	char inf[32] = {0};
	FILE *fp = NULL;
	char *q = NULL;

	if (p != NULL && index != NULL)
	{
		char filename[64] = {0};
		sprintf(filename, "AssociatedDevice%s.mapping", p);
		ret = lib_getvalue_mapfile_byinstance(filename, mac, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else{
			if ((q = strstr(mac, "|")) != NULL)
				*q = '\0';
		}
	}
	else
	{
		return (-1);
	}
	
	getWiFiInterfaceNameWithInstanceNum(p, inf);
	sprintf(tmp, "apstats -s -i %s -m %s", inf, mac);
	
	tr_log(LOG_DEBUG,"################################################tmp[%s]",tmp);
	
	fp = popen(tmp, "r");
	if(fp != NULL)
	{
		while(fgets(buff, sizeof(buff), fp) != NULL)
		{
			if(strstr(buff, "Last rx rate") != NULL)
			{
				if((q = strstr(buff, "=")) != NULL)
					strcpy(value, q+2);
				if ((q = strstr(value, "\n")) != NULL || (q = strstr(value, "\r")) != NULL)
					*q = '\0';
				break;
			}
		}
		pclose(fp);
	}

	if (strcmp(value, "") == 0)
		strcpy(value, "0");

	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWAtAt_SignalStrength(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWAtAt_SignalStrength, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".AssociatedDevice.");
	char *p = parseTemplate(path_name, ".AccessPoint.");
	char mac[128] = {0};
	char buff[128] ={0};
	char tmp[128] ={0};
	char inf[32] = {0};
	FILE *fp = NULL;
	char *q = NULL;

	if (p != NULL && index != NULL)
	{
		char filename[64] = {0};
		sprintf(filename, "AssociatedDevice%s.mapping", p);
		ret = lib_getvalue_mapfile_byinstance(filename, mac, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else{
			if ((q = strstr(mac, "|")) != NULL)
				*q = '\0';
		}
	}
	else
	{
		return (-1);
	}
	
	getWiFiInterfaceNameWithInstanceNum(p, inf);
	sprintf(tmp, "apstats -s -i %s -m %s", inf, mac);
	
	tr_log(LOG_DEBUG,"################################################tmp[%s]",tmp);
	
	fp = popen(tmp, "r");
	if(fp != NULL)
	{
		while(fgets(buff, sizeof(buff), fp) != NULL)
		{
			if(strstr(buff, "Rx RSSI") != NULL)
			{
				if((q = strstr(buff, "=")) != NULL)
					sprintf(value, "-%s", q+2);
				if ((q = strstr(value, "\n")) != NULL || (q = strstr(value, "\r")) != NULL)
					*q = '\0';
				break;
			}
		}
		pclose(fp);
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWAtAt_Retransmissions(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DWAtAt_Retransmissions, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWAtAt_Active(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWAtAt_Active, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".AssociatedDevice.");
	char *p = parseTemplate(path_name, ".AccessPoint.");
	char mac[128] = {0};
	char buff[1024] = {0};
	char tmp[128] = {0};
	char inf[32] = {0};
	FILE *fp = NULL;
	char idle[16] = {0};
	int found = 0;
	char *q = NULL;

	if (p != NULL && index != NULL)
	{
		char filename[64] = {0};
		sprintf(filename, "AssociatedDevice%s.mapping", p);
		ret = lib_getvalue_mapfile_byinstance(filename, mac, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else{
			if ((q = strstr(mac, "|")) != NULL)
				*q = '\0';
		}
	}
	else
	{
		return (-1);
	}
	
	getWiFiInterfaceNameWithInstanceNum(p, inf);
	sprintf(tmp, "wlanconfig %s list sta", inf);
	
	tr_log(LOG_DEBUG,"######################################tmp [%s]",tmp);

	fp = popen(tmp, "r");
	if(fp != NULL)
	{
		while(fgets(buff, sizeof(buff), fp))
		{
			if(strstr(buff, mac) != NULL)
			{
				/*sscanf(buff, "%*s %*s %*s %*s %*s %*s %s %*s", idle);
				tr_log(LOG_DEBUG,"######################################idle [%s]",idle);
				if(atoi(idle) == 0)
				{
					strcpy(value, "1");
				}
				else if(atoi(idle) == 1)
				{
					strcpy(value, "0");
				}*/
				found = 1;
				break;
			}
		}
		pclose(fp);
	}	

	if (found == 1)
		strcpy(value, "1");
	else
		strcpy(value, "0");
	
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWAtAtS_BytesSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWAtAtS_BytesSent, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".AssociatedDevice.");
	char *p = parseTemplate(path_name, ".AccessPoint.");
	char mac[128] = {0};
	char buff[128] ={0};
	char tmp[128] ={0};
	char inf[32] = {0};
	FILE *fp = NULL;
	char *q = NULL;

	if (p != NULL && index != NULL)
	{
		char filename[64] = {0};
		sprintf(filename, "AssociatedDevice%s.mapping", p);
		ret = lib_getvalue_mapfile_byinstance(filename, mac, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else{
			if ((q = strstr(mac, "|")) != NULL)
				*q = '\0';
		}
	}
	else
	{
		return (-1);
	}

	getWiFiInterfaceNameWithInstanceNum(p, inf);
	sprintf(tmp, "apstats -s -i %s -m %s", inf, mac);

	tr_log(LOG_DEBUG,"################################################tmp[%s]",tmp);

	fp = popen(tmp, "r");
	if(fp != NULL)
	{
		while(fgets(buff, sizeof(buff), fp) != NULL)
		{
			if(strstr(buff, "Tx Data Bytes") != NULL)
			{
				if((q = strstr(buff, "=")) != NULL)
					strcpy(value, q+2);
				if ((q = strstr(value, "\n")) != NULL || (q = strstr(value, "\r")) != NULL)
					*q = '\0';
				break;
			}
		}
		pclose(fp);
	}

	if (strcmp(value, "") == 0)
		strcpy(value, "0");
	
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWAtAtS_BytesReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWAtAtS_BytesReceived, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".AssociatedDevice.");
	char *p = parseTemplate(path_name, ".AccessPoint.");
	char mac[128] = {0};
	char buff[128] ={0};
	char tmp[128] ={0};
	char inf[32] = {0};
	FILE *fp = NULL;
	char *q = NULL;

	if (p != NULL && index != NULL)
	{
		char filename[64] = {0};
		sprintf(filename, "AssociatedDevice%s.mapping", p);
		ret = lib_getvalue_mapfile_byinstance(filename, mac, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else{
			if ((q = strstr(mac, "|")) != NULL)
				*q = '\0';
		}
	}
	else
	{
		return (-1);
	}

	getWiFiInterfaceNameWithInstanceNum(p, inf);
	sprintf(tmp, "apstats -s -i %s -m %s", inf, mac);

	tr_log(LOG_DEBUG,"################################################tmp[%s]",tmp);

	fp = popen(tmp, "r");
	if(fp != NULL)
	{
		while(fgets(buff, sizeof(buff), fp) != NULL)
		{
			if(strstr(buff, "Rx Data Bytes") != NULL)
			{
				if((q = strstr(buff, "=")) != NULL)
					strcpy(value, q+2);
				if ((q = strstr(value, "\n")) != NULL || (q = strstr(value, "\r")) != NULL)
					*q = '\0';
				break;
			}
		}
		pclose(fp);
	}

	if (strcmp(value, "") == 0)
		strcpy(value, "0");
	
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWAtAtS_PacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWAtAtS_PacketsSent, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".AssociatedDevice.");
	char *p = parseTemplate(path_name, ".AccessPoint.");
	char mac[128] = {0};
	char buff[128] ={0};
	char tmp[128] ={0};
	char inf[32] = {0};
	FILE *fp = NULL;
	char *q = NULL;

	if (p != NULL && index != NULL)
	{
		char filename[64] = {0};
		sprintf(filename, "AssociatedDevice%s.mapping", p);
		ret = lib_getvalue_mapfile_byinstance(filename, mac, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else{
			if ((q = strstr(mac, "|")) != NULL)
				*q = '\0';
		}
	}
	else
	{
		return (-1);
	}

	getWiFiInterfaceNameWithInstanceNum(p, inf);
	sprintf(tmp, "apstats -s -i %s -m %s", inf, mac);

	tr_log(LOG_DEBUG,"################################################tmp[%s]",tmp);

	fp = popen(tmp, "r");
	if(fp != NULL)
	{
		while(fgets(buff, sizeof(buff), fp) != NULL)
		{
			if(strstr(buff, "Tx Data Packets") != NULL)
			{
				if((q = strstr(buff, "=")) != NULL)
					strcpy(value, q+2);
				if ((q = strstr(value, "\n")) != NULL || (q = strstr(value, "\r")) != NULL)
					*q = '\0';
				break;
			}
		}
		pclose(fp);
	}

	if (strcmp(value, "") == 0)
		strcpy(value, "0");
	
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWAtAtS_PacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWAtAtS_PacketsReceived, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".AssociatedDevice.");
	char *p = parseTemplate(path_name, ".AccessPoint.");
	char mac[128] = {0};
	char buff[128] ={0};
	char tmp[128] ={0};
	char inf[32] = {0};
	FILE *fp = NULL;
	char *q = NULL;

	if (p != NULL && index != NULL)
	{
		char filename[64] = {0};
		sprintf(filename, "AssociatedDevice%s.mapping", p);
		ret = lib_getvalue_mapfile_byinstance(filename, mac, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else{
			if ((q = strstr(mac, "|")) != NULL)
				*q = '\0';
		}
	}
	else
	{
		return (-1);
	}

	getWiFiInterfaceNameWithInstanceNum(p, inf);
	sprintf(tmp, "apstats -s -i %s -m %s", inf, mac);

	tr_log(LOG_DEBUG,"################################################tmp[%s]",tmp);

	fp = popen(tmp, "r");
	if(fp != NULL)
	{
		while(fgets(buff, sizeof(buff), fp) != NULL)
		{
			if(strstr(buff, "Rx Data Packets") != NULL)
			{
				if((q = strstr(buff, "=")) != NULL)
					strcpy(value, q+2);
				if ((q = strstr(value, "\n")) != NULL || (q = strstr(value, "\r")) != NULL)
					*q = '\0';
				break;
			}
		}
		pclose(fp);
	}

	if (strcmp(value, "") == 0)
		strcpy(value, "0");

	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWAtAtS_ErrorsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DWAtAtS_ErrorsSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWAtAtS_RetransCount(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DWAtAtS_RetransCount, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWAtAtS_FailedRetransCount(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DWAtAtS_FailedRetransCount, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWAtAtS_RetryCount(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DWAtAtS_RetryCount, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWAtAtS_MultipleRetryCount(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DWAtAtS_MultipleRetryCount, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWAtAt_AccessCategory(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWAtAt_AccessCategory, value);
	if(ret)
	{
		return -1;
	}*/
	char buff[128] = {0};
	char *p = parseTemplate(path_name, ".AC.");
	
	if (p == NULL)
		return -1;
	
	if(atoi(p) > 4)
	{
		return -1;
	}

	if(atoi(p) == 1)
	{
		strcpy(value, "BE");
	}
	else if(atoi(p) == 2)
	{
		strcpy(value, "BK");
	}
	else if(atoi(p) == 3)
	{
		strcpy(value, "VI");
	}
	else if(atoi(p) == 4)
	{
		strcpy(value, "VO");
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWAtAt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWAtAt_Alias, value);
	if(ret)
	{
		return -1;
	}*/
	ret = 1; //getting from tr.xml
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWAtAt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (!isalpha(value[0]))
		return -2;
	
	if (strlen(value) > 64)
		return -2;
	
	/*ret = do_uci_set(DWAtAt_Alias, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//set to tr.xml
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWAtAt_AIFSN(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWAtAt_AIFSN, value);
	if(ret)
	{
		return -1;
	}*/
	char *p = parseTemplate(path_name, ".AC.");
	char *index = parseTemplate(path_name, ".AccessPoint.");
	char command[256] = {0};
	char line[256] = {0};
	char inf[32] = {0};
	FILE *fp = NULL;
	char *q = NULL;

	if ((p != NULL) && (index != NULL))
	{
		getWiFiInterfaceNameWithInstanceNum(index, inf);
		sprintf(command, "iwpriv %s get_aifs %d 0", inf, atoi(p)-1);
		
		if((fp=popen(command,"r")) != NULL)
		{
			while(fgets(line,sizeof(line)-1,fp))
			{
				q = strchr(line, ':');
				if(q != NULL)
				{
					strcpy(value, q+1);
					if ((q = strstr(value, " ")) != NULL)
						*q = '\0';
					if ((q = strstr(value, "\n")) != NULL)
						*q = '\0';
				}
			}
	    	pclose(fp);
		}
	}	
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWAtAt_AIFSN(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DWAtAt_AIFSN, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char *p = parseTemplate(path_name, ".AC.");
	char *index = parseTemplate(path_name, ".AccessPoint.");
	char command[256] = {0};
	char line[256] = {0};
	char inf[32] = {0};
	FILE *fp = NULL;
	char *q = NULL;

	if (atoi(value) < 2 || atoi(value) > 15)
		return -2;
	
	if (p != NULL && index != NULL)
	{
		getWiFiInterfaceNameWithInstanceNum(index, inf);
		sprintf(command, "iwpriv %s aifs %d 0 %s", inf, atoi(p)-1, value);
		system(command);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWAtAt_ECWMin(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWAtAt_ECWMin, value);
	if(ret)
	{
		return -1;
	}*/
	char *p = parseTemplate(path_name, ".AC.");
	char *index = parseTemplate(path_name, ".AccessPoint.");
	char command[256] = {0};
	char line[256] = {0};
	char inf[32] = {0};
	FILE *fp = NULL;
	char *q = NULL;

	if ((p != NULL) && (index != NULL))
	{
		getWiFiInterfaceNameWithInstanceNum(index, inf);
		sprintf(command, "iwpriv %s get_cwmin %d 0", inf, atoi(p)-1);
		
		if((fp=popen(command,"r")) != NULL)
		{
			while(fgets(line,sizeof(line)-1,fp))
			{
				q = strchr(line, ':');
				if(q != NULL)
				{
					strcpy(value, q+1);
					if ((q = strstr(value, " ")) != NULL)
						*q = '\0';
					if ((q = strstr(value, "\n")) != NULL)
						*q = '\0';
				}
			}
	    	pclose(fp);
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWAtAt_ECWMin(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DWAtAt_ECWMin, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char *p = parseTemplate(path_name, ".AC.");
	char *index = parseTemplate(path_name, ".AccessPoint.");
	char command[256] = {0};
	char line[256] = {0};
	char inf[32] = {0};
	FILE *fp = NULL;
	char *q = NULL;

	if (atoi(value) < 0 || atoi(value) > 15)
		return -2;
	
	if (p != NULL && index != NULL)
	{
		getWiFiInterfaceNameWithInstanceNum(index, inf);
		sprintf(command, "iwpriv %s cwmin %d 0 %s", inf, atoi(p)-1, value);
		system(command);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWAtAt_ECWMax(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWAtAt_ECWMax, value);
	if(ret)
	{
		return -1;
	}*/
	char *p = parseTemplate(path_name, ".AC.");
	char *index = parseTemplate(path_name, ".AccessPoint.");
	char command[256] = {0};
	char line[256] = {0};
	char inf[32] = {0};
	FILE *fp = NULL;
	char *q = NULL;
	
	if (p != NULL && index != NULL)
	{
		getWiFiInterfaceNameWithInstanceNum(index, inf);
		sprintf(command, "iwpriv %s get_cwmax %d 0", inf, atoi(p)-1);

		if((fp=popen(command,"r")) != NULL)
		{
			while(fgets(line,sizeof(line)-1,fp))
			{
				q = strchr(line, ':');
				if(q != NULL)
				{
					strcpy(value, q+1);
					if ((q = strstr(value, " ")) != NULL)
						*q = '\0';
					if ((q = strstr(value, "\n")) != NULL)
						*q = '\0';
				}
			}
	    	pclose(fp);
		}		
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWAtAt_ECWMax(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DWAtAt_ECWMax, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char *p = parseTemplate(path_name, ".AC.");
	char *index = parseTemplate(path_name, ".AccessPoint.");
	char command[256] = {0};
	char line[256] = {0};
	char inf[32] = {0};
	FILE *fp = NULL;
	char *q = NULL;

	if (atoi(value) < 0 || atoi(value) > 15)
		return -2;
	
	if (p != NULL && index != NULL)
	{
		getWiFiInterfaceNameWithInstanceNum(index, inf);
		sprintf(command, "iwpriv %s cwmax %d 0 %s", inf, atoi(p)-1, value);
		system(command);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWAtAt_TxOpMax(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWAtAt_TxOpMax, value);
	if(ret)
	{
		return -1;
	}*/
	char *p = parseTemplate(path_name, ".AC.");
	char *index = parseTemplate(path_name, ".AccessPoint.");
	char command[256] = {0};
	char line[256] = {0};
	char inf[32] = {0};
	FILE *fp = NULL;
	char *q = NULL;
	
	if (p != NULL && index != NULL)
	{
		getWiFiInterfaceNameWithInstanceNum(index, inf);
		sprintf(command, "iwpriv %s get_txoplimit %d 0", inf, atoi(p)-1);

		if((fp=popen(command,"r")) != NULL)
		{
			while(fgets(line,sizeof(line)-1,fp))
			{
				q = strchr(line, ':');
				if(q != NULL)
				{
					strcpy(value, q+1);
					if ((q = strstr(value, " ")) != NULL)
						*q = '\0';
					if ((q = strstr(value, "\n")) != NULL)
						*q = '\0';
				}
			}
	    	pclose(fp);
		}		
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWAtAt_TxOpMax(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DWAtAt_TxOpMax, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char *p = parseTemplate(path_name, ".AC.");
	char *index = parseTemplate(path_name, ".AccessPoint.");
	char command[256] = {0};
	char line[256] = {0};
	char inf[32] = {0};
	FILE *fp = NULL;
	char *q = NULL;

	if (atoi(value) < 0 || atoi(value) > 255)
		return -2;
	
	if (p != NULL && index != NULL)
	{
		getWiFiInterfaceNameWithInstanceNum(index, inf);
		sprintf(command, "iwpriv %s txoplimit %d 0 %s", inf, atoi(p)-1, value);
		system(command);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWAtAt_AckPolicy(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWAtAt_AckPolicy, value);
	if(ret)
	{
		return -1;
	}*/
	char *p = parseTemplate(path_name, ".AC.");
	char *index = parseTemplate(path_name, ".AccessPoint.");
	char command[256] = {0};
	char line[256] = {0};
	char inf[32] = {0};
	FILE *fp = NULL;
	char *q = NULL;
	
	if (p != NULL && index != NULL)
	{
		getWiFiInterfaceNameWithInstanceNum(index, inf);
		sprintf(command, "iwpriv %s get_noackpolicy %d 0", inf, atoi(p)-1);

		if((fp=popen(command,"r")) != NULL)
		{
			while(fgets(line,sizeof(line)-1,fp))
			{
				q = strchr(line, ':');
				if(q != NULL)
				{
					strcpy(value, q+1);
					if ((q = strstr(value, " ")) != NULL)
						*q = '\0';
					if ((q = strstr(value, "\n")) != NULL)
						*q = '\0';
				}
			}
	    	pclose(fp);
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWAtAt_AckPolicy(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DWAtAt_AckPolicy, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char *p = parseTemplate(path_name, ".AC.");
	char *index = parseTemplate(path_name, ".AccessPoint.");
	char command[256] = {0};
	char line[256] = {0};
	char inf[32] = {0};
	FILE *fp = NULL;
	char *q = NULL;
	
	if (p != NULL && index != NULL)
	{
		getWiFiInterfaceNameWithInstanceNum(index, inf);
		sprintf(command, "iwpriv %s noackpolicy %d 0 %d", inf, atoi(p)-1, 1-atoi(value));
		system(command);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWAtAt_OutQLenHistogramIntervals(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DWAtAt_OutQLenHistogramIntervals, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWAtAt_OutQLenHistogramIntervals(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DWAtAt_OutQLenHistogramIntervals, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWAtAt_OutQLenHistogramSampleInterval(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DWAtAt_OutQLenHistogramSampleInterval, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWAtAt_OutQLenHistogramSampleInterval(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DWAtAt_OutQLenHistogramSampleInterval, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWAtAtS_BytesSent_1846(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DWAtAtS_BytesSent_1846, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWAtAtS_BytesReceived_1847(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DWAtAtS_BytesReceived_1847, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWAtAtS_PacketsSent_1848(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DWAtAtS_PacketsSent_1848, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWAtAtS_PacketsReceived_1849(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DWAtAtS_PacketsReceived_1849, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWAtAtS_ErrorsSent_1850(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DWAtAtS_ErrorsSent_1850, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWAtAtS_ErrorsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DWAtAtS_ErrorsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWAtAtS_DiscardPacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DWAtAtS_DiscardPacketsSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWAtAtS_DiscardPacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DWAtAtS_DiscardPacketsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWAtAtS_RetransCount_1854(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DWAtAtS_RetransCount_1854, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWAtAtS_OutQLenHistogram(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DWAtAtS_OutQLenHistogram, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWEt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWEt_Enable, value);
	if(ret)
	{
		return -1;
	}*/
	int en1 = 0, en2 = 0;

	en1 = _get_endporint_5g_enable();
	en2 = _get_endporint_24g_enable();
	if (en1 == -1 && en2 == -1)
		return -1;
	else{
		if (en1 == 1 || en2 == 1)
			strcpy(value, "1");
		else
			strcpy(value, "0");
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWEt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DWEt_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/

	if (atoi(value) == 1){
		//for 5G
		ret = do_uci_set("wireless.wla.mode", "sta");
		if(ret)
		{
			return (-1);
		}
		ret = do_uci_set("wireless.wla.extap", "1");
		if(ret)
		{
			return (-1);
		}
		ret = do_uci_set("wireless.wla.bridge_enable", "1");
		if(ret)
		{
			return (-1);
		}
		//for 2.4G
		ret = do_uci_set("wireless.wlg.mode", "sta");
		if(ret)
		{
			return (-1);
		}
		ret = do_uci_set("wireless.wlg.extap", "1");
		if(ret)
		{
			return (-1);
		}
		ret = do_uci_set("wireless.wlg.bridge_enable", "1");
		if(ret)
		{
			return (-1);
		}
		//for lan, default with dhcp mode
		ret = do_uci_set("network.lan.proto", "dhcp");
		if(ret)
		{
			return (-1);
		}
		ret = do_uci_set("network.lan.peerdns", "1");
		if(ret)
		{
			return (-1);
		}
		ret = do_uci_commit("wireless");
		if(ret)
		{
			return (-1);
		}
		ret = do_uci_commit("network");
		if(ret)
		{
			return (-1);
		}
		//ret = 1; //means need to reboot for taking effect
		doSbinWifi();
	}
	else
	{
		//for 5G
		ret = do_uci_set("wireless.wla.mode", "ap");
		if(ret)
		{
			return (-1);
		}
		ret = do_uci_set("wireless.wla.extap", "");
		if(ret)
		{
			return (-1);
		}
		ret = do_uci_set("wireless.wla.bridge_enable", "");
		if(ret)
		{
			return (-1);
		}
		//for 2.4G
		ret = do_uci_set("wireless.wlg.mode", "ap");
		if(ret)
		{
			return (-1);
		}
		ret = do_uci_set("wireless.wlg.extap", "");
		if(ret)
		{
			return (-1);
		}
		ret = do_uci_set("wireless.wlg.bridge_enable", "");
		if(ret)
		{
			return (-1);
		}
		//for lan, default with dhcp mode
		ret = do_uci_set("network.lan.proto", "static");
		if(ret)
		{
			return (-1);
		}
		ret = do_uci_set("network.lan.peerdns", "");
		if(ret)
		{
			return (-1);
		}
		ret = do_uci_commit("wireless");
		if(ret)
		{
			return (-1);
		}
		ret = do_uci_commit("network");
		if(ret)
		{
			return (-1);
		}
		//ret = 1; //means need to reboot for taking effect
		doSbinWifi();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWEt_Status(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWEt_Status, value);
	if(ret)
	{
		return -1;
	}*/
	int en1 = 0, en2 = 0;

	en1 = _get_endporint_5g_enable();
	en2 = _get_endporint_24g_enable();

	if (en1 == -1 && en2 == -1)
		return -1;
	else{
		if (en1 == 1 || en2 == 1)
			strcpy(value, "Enabled");
		else
			strcpy(value, "Disabled");
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWEt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWEt_Alias, value);
	if(ret)
	{
		return -1;
	}*/
	ret = 1; //getting from tr.xml
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWEt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (!isalpha(value[0]))
		return -2;
	
	if (strlen(value) > 64)
		return -2;
	
	/*ret = do_uci_set(DWEt_Alias, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//set to tr.xml
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWEt_ProfileReference(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWEt_ProfileReference, value);
	if(ret)
	{
		return -1;
	}*/
	char profile5GStatus[32] = {0};
	char profile24GStatus[32] = {0};

	_get_endporint_5g_profile_status(profile5GStatus);
	_get_endporint_24g_profile_status(profile24GStatus);
	if (strcmp(profile5GStatus, "Active") == 0)
		strcpy(value, "Device.WiFi.EndPoint.1.Profile.1");
	else if (strcmp(profile24GStatus, "Active") == 0)
		strcpy(value, "Device.WiFi.EndPoint.1.Profile.2");
	else
		strcpy(value, "");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWEt_ProfileReference(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DWEt_ProfileReference, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWEt_SSIDReference(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWEt_SSIDReference, value);
	if(ret)
	{
		return -1;
	}*/
	char profile5GStatus[32] = {0};
	char profile24GStatus[32] = {0};

	_get_endporint_5g_profile_status(profile5GStatus);
	_get_endporint_24g_profile_status(profile24GStatus);
	if (strcmp(profile5GStatus, "Active") == 0)
		sprintf(value, "Device.WiFi.SSID.%d", WIFI5G_START_INSTANCE_NUM);
	else if (strcmp(profile24GStatus, "Active") == 0)
		sprintf(value, "Device.WiFi.SSID.%d", WIFI24G_START_INSTANCE_NUM);
	else
		strcpy(value, "");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWEt_ProfileNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWEt_ProfileNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "2"); //only support 2.4G and 5G
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWEtS_LastDataDownlinkRate(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DWEtS_LastDataDownlinkRate, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWEtS_LastDataUplinkRate(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DWEtS_LastDataUplinkRate, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWEtS_SignalStrength(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DWEtS_SignalStrength, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWEtS_Retransmissions(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DWEtS_Retransmissions, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWEtS_ModesSupported(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWEtS_ModesSupported, value);
	if(ret)
	{
		return -1;
	}*/
	sprintf(value, "None,WEP-64,WEP-128,WPA-Personal,WPA2-Personal,WPA-WPA2-Personal");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWEtS_ModesSupported(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DWEtS_ModesSupported, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWEtS_MFPConfig(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWAtS_MFPConfig, value);
	if(ret)
	{
		return -1;
	}*/
	char buff[128] = {0}, buff2[128] = {0};
	char *p = parseTemplate(path_name, ".EndPoint.");

	if (p == NULL)
		return -1;
	
	getSSIDuciConfig2(p, buff, "ieee80211w");
	
	ret = do_uci_get(buff, buff2);
	if(ret)
	{
		return -1;
	}
	if(!strcmp(buff2, "1")){
		strcpy(value, "Optional");
	}
	else if(!strcmp(buff2, "2")){
		strcpy(value, "Required");
	}
	else{
		strcpy(value, "Disabled");
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWEtS_MFPConfig(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DWAtS_MFPConfig, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char buff[128] = {0}, buff2[128] = {0};
	char *p = parseTemplate(path_name, ".EndPoint.");

	if (p == NULL)
		return -1;
	
	getSSIDuciConfig2(p, buff, "ieee80211w");

	if(!strcmp(value, "Optional")){
		strcpy(buff2, "1");
	}
	else if(!strcmp(value, "Required")){
		strcpy(buff2, "2");
	}
	else{
		strcpy(buff2, "0");
	}
	
	ret = do_uci_set(buff, buff2);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("wireless");
		if(ret)
		{
			return (-1);
		}
		//ret = 1; //means need to reboot for taking effect
		doSbinWifi();
	}	
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWEtPt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWEtPt_Enable, value);
	if(ret)
	{
		return -1;
	}*/

	int en = 0;
	char buff[128] = {0};
	char *index = parseTemplate(path_name, ".Profile.");

	if (index != NULL){
		if (atoi(index) == 1){
			en = _get_endporint_5g_enable();
			if (en == -1)
				return -1;
			else
				sprintf(value, "%d", en);
		}
		else if (atoi(index) == 2){
			en = _get_endporint_24g_enable();
			if (en == -1)
				return -1;
			else
				sprintf(value, "%d", en);
		}
		else
			return -1;
	}
	else
		return -1;
	
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWEtPt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DWEtPt_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWEtPt_Status(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWEtPt_Status, value);
	if(ret)
	{
		return -1;
	}*/
	char profile5GStatus[32] = {0};
	char profile24GStatus[32] = {0};
	char buff[128] = {0};
	char *index = parseTemplate(path_name, ".Profile.");

	if (index != NULL){
		if (atoi(index) == 1){
			ret = _get_endporint_5g_profile_status(profile5GStatus);
			if (ret == -1)
				return -1;
			strcpy(value, profile5GStatus);
		}
		else if (atoi(index) == 2){
			ret = _get_endporint_24g_profile_status(profile24GStatus);
			if (ret == -1)
				return -1;
			strcpy(value, profile24GStatus);
		}
		else
			return -1;
	}
	else
		return -1;

	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWEtPt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWEtPt_Alias, value);
	if(ret)
	{
		return -1;
	}*/
	ret = 1; //getting from tr.xml
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWEtPt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (!isalpha(value[0]))
		return -2;
	
	if (strlen(value) > 64)
		return -2;
	
	/*ret = do_uci_set(DWEtPt_Alias, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//set to tr.xml
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWEtPt_SSID(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	int en = 0;
	char buff[128] = {0};
	char *index = parseTemplate(path_name, ".Profile.");

	if (index != NULL){
		if (atoi(index) == 1){
			en = _get_endporint_5g_enable();
			if (en == -1)
				return -1;
			else{
				if (en == 1)
					strcpy(buff, "wireless.wla.ssid");
			}
		}
		else if (atoi(index) == 2){
			en = _get_endporint_24g_enable();
			if (en == -1)
				return -1;
			else{
				if (en == 1)
					strcpy(buff, "wireless.wlg.ssid");
			}
		}
		else
			return -1;
	}
	else
		return -1;
	
	if (en == 1){
		ret = do_uci_get(buff, value);
		if(ret)
		{
			return -1;
		}
	}
	else
		strcpy(value, "");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWEtPt_SSID(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	int en = 0;
	char buff[128] = {0};
	char *index = parseTemplate(path_name, ".Profile.");

	if (index != NULL){
		if (atoi(index) == 1){
			en = _get_endporint_5g_enable();
			if (en == -1)
				return -1;
			else{
				if (en == 1)
					strcpy(buff, "wireless.wla.ssid");
			}
		}
		else if (atoi(index) == 2){
			en = _get_endporint_24g_enable();
			if (en == -1)
				return -1;
			else{
				if (en == 1)
					strcpy(buff, "wireless.wlg.ssid");
			}
		}
		else
			return -1;
	}
	else
		return -1;
	
	if (en == 1){
		if (strlen(value) > 32) //SSID range: 0~32
			return -2;
		ret = do_uci_set(buff, value);
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit("wireless");
			if(ret)
			{
				return (-1);
			}
			//ret = 1; //means need to reboot for taking effect
			doSbinWifi();
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWEtPt_Location(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWEtPt_Location, value);
	if(ret)
	{
		return -1;
	}*/
	ret = 1; //getting from tr.xml
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWEtPt_Location(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DWEtPt_Location, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//set to tr.xml
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWEtPt_Priority(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWEtPt_Priority, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "0"); //always 0
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWEtPt_Priority(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DWEtPt_Priority, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWEtPtS_ModeEnabled(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWEtPtS_ModeEnabled, value);
	if(ret)
	{
		return -1;
	}*/
	int en = 0;
	char buff[128] = {0};
	char buff1[128] = {0};
	char tmp[128] = {0};
	char tmp1[128] = {0};
	int num = 0;
	char *index = parseTemplate(path_name, ".Profile.");

	if (index != NULL){
		if (atoi(index) == 1){
			en = _get_endporint_5g_enable();
			if (en == -1)
				return -1;
		}
		else if (atoi(index) == 2){
			en = _get_endporint_24g_enable();
			if (en == -1)
				return -1;
		}
		else
			return -1;
	}
	else
		return -1;

	if (en == 1){
		getSSIDuciConfig2(index, buff, "encryption");
		getSSIDuciConfig2(index, buff1, "wepkeyid");
		ret = do_uci_get(buff, tmp);
		if(ret)
		{
			return -1;
		}
		
		if(strstr(tmp, "wep") != NULL)
		{
			ret = do_uci_get(buff1, tmp1);
			if(ret)
			{
				return -1;
			}
			num = atoi(tmp1);
			switch(num)	
			{
				case 1:
					getSSIDuciConfig2(index, buff, "key1");
					ret = do_uci_get(buff, tmp1);
					break;
				case 2:
					getSSIDuciConfig2(index, buff, "key2");
					ret = do_uci_get(buff, tmp1);
					break;
				case 3:
					getSSIDuciConfig2(index, buff, "key3");
					ret = do_uci_get(buff, tmp1);
					break;
				case 4:
					getSSIDuciConfig2(index, buff, "key4");
					ret = do_uci_get(buff, tmp1);
					break;					
			}
			if(ret)
			{
				return -1;
			}

			if(strlen(tmp1) == 5 || strlen(tmp1) == 10)
			{
				strcpy(value, "WEP-64");
			}
			else if(strlen(tmp1) == 13 || strlen(tmp1) == 26)
			{
				strcpy(value, "WEP-128");			
			}
		}
		else if(!strcmp(tmp, "psk+tkip"))
		{
			strcpy(value, "WPA-Personal");			
		}
		else if(!strcmp(tmp, "psk2+ccmp"))
		{
			strcpy(value, "WPA2-Personal");			
		}
		else if(!strcmp(tmp, "psk-mixed+tkip+ccmp"))
		{
			strcpy(value, "WPA-WPA2-Personal");			
		}	
		/*else if(!strcmp(tmp, "wpa+tkip"))
		{
			strcpy(value, "WPA-Enterprise");			
		}
		else if(!strcmp(tmp, "wpa2+ccmp"))
		{
			strcpy(value, "WPA2-Enterprise");			
		}
		else if(!strcmp(tmp, "wpa-mixed+tkip+ccmp"))
		{
			strcpy(value, "WPA-WPA2-Enterprise");			
		}*/
		else if(!strcmp(tmp, "none"))
		{
			strcpy(value, "None");			
		}
	}
	else
		strcpy(value, "");
	
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWEtPtS_ModeEnabled(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DWEtPtS_ModeEnabled, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	int en = 0;
	char buff[128] = {0};
	char *index = parseTemplate(path_name, ".Profile.");

	if (index != NULL){
		if (atoi(index) == 1){
			en = _get_endporint_5g_enable();
			if (en == -1)
				return -1;
		}
		else if (atoi(index) == 2){
			en = _get_endporint_24g_enable();
			if (en == -1)
				return -1;
		}
		else
			return -1;
	}
	else
		return -1;

	if (en == 1){
		getSSIDuciConfig2(index, buff, "encryption");

		if(!strcasecmp(value, "wep-64") || !strcasecmp(value, "wep-128"))
		{
			ret = do_uci_set(buff, "wep+mixed");
		}
		else if(!strcasecmp(value, "wpa-personal"))
		{
			ret = do_uci_set(buff, "psk+tkip");
		}
		else if(!strcasecmp(value, "wpa2-personal"))
		{
			ret = do_uci_set(buff, "psk2+ccmp");
		}
		else if(!strcasecmp(value, "wpa-wpa2-personal"))
		{
			ret = do_uci_set(buff, "psk-mixed+tkip+ccmp");
		}
		/*else if(!strcasecmp(value, "wpa-enterprise"))
		{
			ret = do_uci_set(buff, "wpa+tkip");
		}
		else if(!strcasecmp(value, "wpa2-enterprise"))
		{
			ret = do_uci_set(buff, "wpa2+ccmp");
		}
		else if(!strcasecmp(value, "wpa-wpa2-enterprise"))
		{
			ret = do_uci_set(buff, "wpa-mixed+tkip+ccmp");
		}*/
		else if(!strcasecmp(value, "none"))
		{
			ret = do_uci_set(buff, "none");
		}
		else
			return -2;
		
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit("wireless");
			if(ret)
			{
				return (-1);
			}
			//ret = 1; //means need to reboot for taking effect
			doSbinWifi();
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWEtPtS_WEPKey(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWEtPtS_WEPKey, value);
	if(ret)
	{
		return -1;
	}*/

#if 0
	int en = 0;
	char buff[128] = {0};
	char buff1[128] = {0};
	char tmp[128] = {0};
	char tmp1[128] = {0};
	int num = 0;
	char *index = parseTemplate(path_name, ".Profile.");

	if (index != NULL){
		if (atoi(index) == 1){
			en = _get_endporint_5g_enable();
			if (en == -1)
				return -1;
		}
		else if (atoi(index) == 2){
			en = _get_endporint_24g_enable();
			if (en == -1)
				return -1;
		}
		else
			return -1;
	}
	else
		return -1;

	if (en == 1){
		getSSIDuciConfig2(index, buff, "wepkeyid");
		
		ret = do_uci_get(buff, tmp);
		if(ret)
		{
			return -1;
		}
		num = atoi(tmp);
		switch(num)
		{
			case 1:
				getSSIDuciConfig2(index, buff1, "key1");
				ret = do_uci_get(buff1, tmp1);
				break;
			case 2:
				getSSIDuciConfig2(index, buff1, "key2");
				ret = do_uci_get(buff1, tmp1);
				break;
			case 3:
				getSSIDuciConfig2(index, buff1, "key3");
				ret = do_uci_get(buff1, tmp1);
				break;
			case 4:
				getSSIDuciConfig2(index, buff1, "key4");
				ret = do_uci_get(buff1, tmp1);
				break;
		}
		if(ret)
		{
			return -1;
		}
		strcpy(value, tmp1);
	}
	else
		strcpy(value, "");
#else
	strcpy(value, ""); //When read, this parameter returns an empty string
#endif
	
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWEtPtS_WEPKey(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DWEtPtS_WEPKey, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	int en = 0;
	char buff[128] = {0};
	char buff1[128] = {0};
	char buff2[128] = {0};
	char *index = parseTemplate(path_name, ".Profile.");

	if (index != NULL){
		if (atoi(index) == 1){
			en = _get_endporint_5g_enable();
			if (en == -1)
				return -1;
		}
		else if (atoi(index) == 2){
			en = _get_endporint_24g_enable();
			if (en == -1)
				return -1;
		}
		else
			return -1;
	}
	else
		return -1;

	if (en == 1){
		if(strlen(value) != 5 && strlen(value) != 13 && strlen(value) != 10 && strlen(value) != 26)
		{
			return -2;
		}
		
		getSSIDuciConfig2(index, buff, "wepkeyid");
		getSSIDuciConfig2(index, buff1, "key");
		getSSIDuciConfig2(index, buff2, "key1");

		ret = do_uci_set(buff, "1");
		ret = do_uci_set(buff1, "1");
		ret = do_uci_set(buff2, value);
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit("wireless");
			if(ret)
			{
				return (-1);
			}
			//ret = 1; //means need to reboot for taking effect
			doSbinWifi();
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWEtPtS_PreSharedKey(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWEtPtS_PreSharedKey, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, ""); //this parameter returns an empty string, regardless of the actual value
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWEtPtS_PreSharedKey(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DWEtPtS_PreSharedKey, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWEtPtS_KeyPassphrase(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWEtPtS_KeyPassphrase, value);
	if(ret)
	{
		return -1;
	}*/
#if 0
	int en = 0;
	char buff[128] = {0};
	char *index = parseTemplate(path_name, ".Profile.");

	if (index != NULL){
		if (atoi(index) == 1){
			en = _get_endporint_5g_enable();
			if (en == -1)
				return -1;
		}
		else if (atoi(index) == 2){
			en = _get_endporint_24g_enable();
			if (en == -1)
				return -1;
		}
		else
			return -1;
	}
	else
		return -1;

	if (en == 1){
		getSSIDuciConfig2(index, buff, "wpapsk");
		ret = do_uci_get(buff, value);
		if(ret)
		{
			return -1;
		}
	}
	else
		strcpy(value, "");
#else
	strcpy(value, ""); //When read, this parameter returns an empty string
#endif
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWEtPtS_KeyPassphrase(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DWEtPtS_KeyPassphrase, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	int en = 0;
	char buff[128] = {0};
	char buff1[128] = {0};
	char *index = parseTemplate(path_name, ".Profile.");

	if (index != NULL){
		if (atoi(index) == 1){
			en = _get_endporint_5g_enable();
			if (en == -1)
				return -1;
		}
		else if (atoi(index) == 2){
			en = _get_endporint_24g_enable();
			if (en == -1)
				return -1;
		}
		else
			return -1;
	}
	else
		return -1;

	if (en == 1){
		if(strlen(value) < 8 || strlen(value) > 63)
		{
			return -2;
		}
		
		getSSIDuciConfig2(index, buff, "wpapsk");
		getSSIDuciConfig2(index, buff1, "key");
		ret = do_uci_set(buff, value);
		ret = do_uci_set(buff1, value);
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit("wireless");
			if(ret)
			{
				return (-1);
			}
			//ret = 1; //means need to reboot for taking effect
			doSbinWifi();
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWEtW_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWEtW_Enable, value);
	if(ret)
	{
		return -1;
	}*/
	int en = 0;
	char buff[128] = {0};
	char wps1[32] = {0};
	char wps2[32] = {0};

	en = _get_endporint_5g_enable();
	if (en == 1){
		strcpy(buff, "wireless.wla.wps_enable");
		ret = do_uci_get(buff, wps1);
		if(ret)
		{
			return (-1);
		}
	}

	en = _get_endporint_24g_enable();
	if (en == 1){
		strcpy(buff, "wireless.wlg.wps_enable");
		ret = do_uci_get(buff, wps2);
		if(ret)
		{
			return (-1);
		}
	}

	if (atoi(wps1) == 1 || atoi(wps2) == 1)
		strcpy(value, "1");
	else
		strcpy(value, "0");

	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWEtW_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DWEtW_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	int en = 0;
	char buff[128] = {0};

	en = _get_endporint_5g_enable();
	if (en == 1){
		strcpy(buff, "wireless.wla.wps_enable");
		ret = do_uci_set(buff, value);
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit("wireless");
			if(ret)
			{
				return (-1);
			}
			//ret = 1; //means need to reboot for taking effect
			system("hostapd_cli -i ath0 -p /var/run/hostapd-wifi0 wps_pbc");
		}
	}

	en = _get_endporint_24g_enable();
	if (en == 1){
		strcpy(buff, "wireless.wlg.wps_enable");
		ret = do_uci_set(buff, value);
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit("wireless");
			if(ret)
			{
				return (-1);
			}
			//ret = 1; //means need to reboot for taking effect
			system("hostapd_cli -i ath1 -p /var/run/hostapd-wifi1 wps_pbc");
		}
	}

	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWEtW_ConfigMethodsSupported(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWEtW_ConfigMethodsSupported, value);
	if(ret)
	{
		return -1;
	}*/
	int en1 = 0, en2 = 0;

	en1 = _get_endporint_5g_enable();
	en2 = _get_endporint_24g_enable();
	if (en1 == -1 && en2 == -1)
		return -1;
	else{
		if (en1 == 1 || en2 == 1)
			strcpy(value, "PushButton,PIN");
		else
			strcpy(value, "");
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWEtW_ConfigMethodsEnabled(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWEtW_ConfigMethodsEnabled, value);
	if(ret)
	{
		return -1;
	}*/
	int en1 = 0, en2 = 0;

	en1 = _get_endporint_5g_enable();
	en2 = _get_endporint_24g_enable();
	if (en1 == -1 && en2 == -1)
		return -1;
	else{
		if (en1 == 1 || en2 == 1)
			strcpy(value, "PushButton");
		else
			strcpy(value, "");
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWEtW_ConfigMethodsEnabled(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DWEtW_ConfigMethodsEnabled, value);
	/*if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWEtW_Status(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWEtW_MFPConfig, value);
	if(ret)
	{
		return -1;
	}*/
	char buff[128] = {0}, buff2[128] = {0};
	char *p = parseTemplate(path_name, ".EndPoint.");

	if (p == NULL)
		return -1;
	
	getSSIDuciConfig2(p, buff, "wps_state");
	
	ret = do_uci_get(buff, buff2);
	if(ret)
	{
		return -1;
	}
	if(!strcmp(buff2, "1")){
		strcpy(value, "Unconfigured");
	}
	else if(!strcmp(buff2, "2")){
		strcpy(value, "Configured");
	}
	else{
		strcpy(value, "Disabled");
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWEtW_Version(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWEtW_MFPConfig, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "2.0"); 
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWEtW_PIN(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DWEtW_PIN, value);
	if(ret)
	{
		return -1;
	}*/
	char buff[128] = {0};
	char *p = parseTemplate(path_name, ".EndPoint.");

	if (p == NULL)
		return -1;
	
	getSSIDuciConfig2(p, buff, "wps_pin");
	
	ret = do_uci_get(buff, value);
	if(ret)
	{
		return -1;
	}

	if (strlen(value) != 4 && strlen(value) !=8)
		return -2;
	
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWEtAt_AccessCategory(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DWEtAt_AccessCategory, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWEtAt_AccessCategory(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DWEtAt_AccessCategory, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWEtAt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DWEtAt_Alias, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWEtAt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DWEtAt_Alias, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWEtAt_AIFSN(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DWEtAt_AIFSN, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWEtAt_AIFSN(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DWEtAt_AIFSN, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWEtAt_ECWMin(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DWEtAt_ECWMin, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWEtAt_ECWMin(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DWEtAt_ECWMin, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWEtAt_ECWMax(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DWEtAt_ECWMax, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWEtAt_ECWMax(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DWEtAt_ECWMax, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWEtAt_TxOpMax(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DWEtAt_TxOpMax, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWEtAt_TxOpMax(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DWEtAt_TxOpMax, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWEtAt_AckPolicy(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DWEtAt_AckPolicy, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWEtAt_AckPolicy(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DWEtAt_AckPolicy, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWEtAt_OutQLenHistogramIntervals(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DWEtAt_OutQLenHistogramIntervals, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWEtAt_OutQLenHistogramIntervals(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DWEtAt_OutQLenHistogramIntervals, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWEtAt_OutQLenHistogramSampleInterval(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DWEtAt_OutQLenHistogramSampleInterval, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DWEtAt_OutQLenHistogramSampleInterval(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DWEtAt_OutQLenHistogramSampleInterval, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWEtAtS_BytesSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DWEtAtS_BytesSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWEtAtS_BytesReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DWEtAtS_BytesReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWEtAtS_PacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DWEtAtS_PacketsSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWEtAtS_PacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DWEtAtS_PacketsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWEtAtS_ErrorsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DWEtAtS_ErrorsSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWEtAtS_ErrorsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DWEtAtS_ErrorsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWEtAtS_DiscardPacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DWEtAtS_DiscardPacketsSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWEtAtS_DiscardPacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DWEtAtS_DiscardPacketsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWEtAtS_RetransCount(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DWEtAtS_RetransCount, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DWEtAtS_OutQLenHistogram(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DWEtAtS_OutQLenHistogram, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DB_MaxBridgeEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DB_MaxBridgeEntries, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "1");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DB_MaxDBridgeEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DB_MaxDBridgeEntries, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DB_MaxQBridgeEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DB_MaxQBridgeEntries, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DB_MaxVLANEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DB_MaxVLANEntries, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DB_MaxProviderBridgeEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DB_MaxProviderBridgeEntries, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DB_ProviderBridgeNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DB_ProviderBridgeNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DB_MaxFilterEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DB_MaxFilterEntries, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DB_BridgeNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DB_BridgeNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "1");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DB_FilterNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DB_FilterNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DBBt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DBBt_Enable, value);
	if(ret)
	{
		return -1;
	}*/
	char en[32] = {0};

	getDevStatus("br-lan", "up", en);
	if (strcmp(en, "true") == 0)
		strcpy(value, "1");
	else
		strcpy(value, "0");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DBBt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DBBt_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DBBt_Status(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DBBt_Status, value);
	if(ret)
	{
		return -1;
	}*/
	char en[32] = {0};

	getDevStatus("br-lan", "up", en);
	if (strcmp(en, "true") == 0)
		strcpy(value, "Enabled");
	else
		strcpy(value, "Disabled");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DBBt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DBBt_Alias, value);
	if(ret)
	{
		return -1;
	}*/
	ret = 1; //getting from tr.xml
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DBBt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (!isalpha(value[0]))
		return -2;
	
	if (strlen(value) > 64)
		return -2;
	
	//set to tr.xml
	/*ret = do_uci_set(DBBt_Alias, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DBBt_Standard(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DBBt_Standard, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "802.1D-2004");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DBBt_Standard(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DBBt_Standard, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DBBt_PortNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DBBt_PortNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}*/
	char keyvalue[MAXMAPITEMS][256];
	int num = get_Device_Bridging_Bridge_1_Port_Entry(keyvalue);

	sprintf(value, "%d", num);
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DBBt_VLANNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DBBt_VLANNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DBBt_VLANPortNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DBBt_VLANPortNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DBBtPt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DBBtPt_Enable, value);
	if(ret)
	{
		return -1;
	}*/
	char str[256] = {0};
	char inf[32] = {0};
	char status[32] = {0};
	int i = 0;
	char *index = parseTemplate(path_name, ".Port.");

	if (index != NULL){
		ret = lib_getvalue_mapfile_byinstance(BridgingBridge1PortMap, str, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			for (i = 0; i < strlen(str); i ++){
				if (str[i] == '|')
					str[i] = ' ';
			}
			sscanf(str, "%s %*s", inf);
			getDevStatus(inf, "up", status);
			if (strcmp(status, "true") == 0)
				strcpy(value, "1");
			else
				strcpy(value, "0");
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DBBtPt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DBBtPt_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DBBtPt_Status(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DBBtPt_Status, value);
	if(ret)
	{
		return -1;
	}*/
	char str[256] = {0};
	char inf[32] = {0};
	char status[32] = {0};
	int i = 0;
	char *index = parseTemplate(path_name, ".Port.");

	if (index != NULL){
		ret = lib_getvalue_mapfile_byinstance(BridgingBridge1PortMap, str, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			for (i = 0; i < strlen(str); i ++){
				if (str[i] == '|')
					str[i] = ' ';
			}
			sscanf(str, "%s %*s", inf);
			getDevStatus(inf, "up", status);
			if (strcmp(status, "true") == 0)
				strcpy(value, "Up");
			else
				strcpy(value, "Down");
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DBBtPt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DBBtPt_Alias, value);
	if(ret)
	{
		return -1;
	}*/
	ret = 1; //getting from tr.xml
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DBBtPt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (!isalpha(value[0]))
		return -2;
	
	if (strlen(value) > 64)
		return -2;
	
	//set to tr.xml
	/*ret = do_uci_set(DBBtPt_Alias, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DBBtPt_Name(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DBBtPt_Name, value);
	if(ret)
	{
		return -1;
	}*/
	char str[256] = {0};
	int i = 0;
	char *index = parseTemplate(path_name, ".Port.");

	if (index != NULL){
		ret = lib_getvalue_mapfile_byinstance(BridgingBridge1PortMap, str, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			for (i = 0; i < strlen(str); i ++){
				if (str[i] == '|')
					str[i] = ' ';
			}
			sscanf(str, "%s %*s", value);
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DBBtPt_LastChange(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DBBtPt_LastChange, value);
	if(ret)
	{
		return -1;
	}*/
	getInterfaceLastChangeTime(value); //all interface with the same value
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DBBtPt_LowerLayers(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DBBtPt_LowerLayers, value);
	if(ret)
	{
		return -1;
	}*/
	char str[256] = {0};
	int i = 0;
	char *p = NULL;
	char *index = parseTemplate(path_name, ".Port.");

	if (index != NULL){
		ret = lib_getvalue_mapfile_byinstance(BridgingBridge1PortMap, str, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			for (i = 0; i < strlen(str); i ++){
				if (str[i] == '|')
					str[i] = ' ';
			}
			sscanf(str, "%*s %*s %s", value);
			if ((p = strstr(value, "\n")) != NULL)
				*p = '\0';
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DBBtPt_LowerLayers(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DBBtPt_LowerLayers, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DBBtPt_ManagementPort(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DBBtPt_ManagementPort, value);
	if(ret)
	{
		return -1;
	}*/
	char str[256] = {0};
	int i = 0;
	char *index = parseTemplate(path_name, ".Port.");

	if (index != NULL){
		ret = lib_getvalue_mapfile_byinstance(BridgingBridge1PortMap, str, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			for (i = 0; i < strlen(str); i ++){
				if (str[i] == '|')
					str[i] = ' ';
			}
			sscanf(str, "%*s %s %*s", value);
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DBBtPt_ManagementPort(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DBBtPt_ManagementPort, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DBBtPt_Type(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DBBtPt_Type, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DBBtPt_Type(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DBBtPt_Type, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DBBtPt_DefaultUserPriority(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DBBtPt_DefaultUserPriority, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DBBtPt_DefaultUserPriority(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DBBtPt_DefaultUserPriority, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DBBtPt_PriorityRegeneration(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DBBtPt_PriorityRegeneration, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DBBtPt_PriorityRegeneration(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DBBtPt_PriorityRegeneration, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DBBtPt_PortState(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DBBtPt_PortState, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DBBtPt_PVID(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DBBtPt_PVID, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DBBtPt_PVID(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DBBtPt_PVID, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DBBtPt_TPID(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DBBtPt_TPID, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DBBtPt_TPID(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DBBtPt_TPID, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DBBtPt_AcceptableFrameTypes(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DBBtPt_AcceptableFrameTypes, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DBBtPt_AcceptableFrameTypes(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DBBtPt_AcceptableFrameTypes, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DBBtPt_IngressFiltering(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DBBtPt_IngressFiltering, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DBBtPt_IngressFiltering(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DBBtPt_IngressFiltering, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DBBtPt_ServiceAccessPrioritySelection(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DBBtPt_ServiceAccessPrioritySelection, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DBBtPt_ServiceAccessPrioritySelection(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DBBtPt_ServiceAccessPrioritySelection, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DBBtPt_ServiceAccessPriorityTranslation(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DBBtPt_ServiceAccessPriorityTranslation, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DBBtPt_ServiceAccessPriorityTranslation(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DBBtPt_ServiceAccessPriorityTranslation, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DBBtPt_PriorityTagging(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DBBtPt_PriorityTagging, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DBBtPt_PriorityTagging(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DBBtPt_PriorityTagging, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DBBtPtP_PCPSelection(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DBBtPtP_PCPSelection, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DBBtPtP_PCPSelection(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DBBtPtP_PCPSelection, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DBBtPtP_UseDEI(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DBBtPtP_UseDEI, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DBBtPtP_UseDEI(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DBBtPtP_UseDEI, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DBBtPtP_RequireDropEncoding(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DBBtPtP_RequireDropEncoding, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DBBtPtP_RequireDropEncoding(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DBBtPtP_RequireDropEncoding, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DBBtPtP_PCPEncoding(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DBBtPtP_PCPEncoding, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DBBtPtP_PCPEncoding(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DBBtPtP_PCPEncoding, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DBBtPtP_PCPDecoding(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DBBtPtP_PCPDecoding, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DBBtPtP_PCPDecoding(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DBBtPtP_PCPDecoding, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DBBtPtS_BytesSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DBBtPtS_BytesSent, value);
	if(ret)
	{
		return -1;
	}*/
	char str[256] = {0};
	char inf[32] = {0};
	int i = 0;
	char *index = parseTemplate(path_name, ".Port.");

	if (index != NULL){
		ret = lib_getvalue_mapfile_byinstance(BridgingBridge1PortMap, str, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			for (i = 0; i < strlen(str); i ++){
				if (str[i] == '|')
					str[i] = ' ';
			}
			sscanf(str, "%s %*s", inf);
			getDevStatus(inf, "tx_bytes", value);
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DBBtPtS_BytesReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DBBtPtS_BytesReceived, value);
	if(ret)
	{
		return -1;
	}*/
	char str[256] = {0};
	char inf[32] = {0};
	int i = 0;
	char *index = parseTemplate(path_name, ".Port.");

	if (index != NULL){
		ret = lib_getvalue_mapfile_byinstance(BridgingBridge1PortMap, str, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			for (i = 0; i < strlen(str); i ++){
				if (str[i] == '|')
					str[i] = ' ';
			}
			sscanf(str, "%s %*s", inf);
			getDevStatus(inf, "rx_bytes", value);
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DBBtPtS_PacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DBBtPtS_PacketsSent, value);
	if(ret)
	{
		return -1;
	}*/
	char str[256] = {0};
	char inf[32] = {0};
	int i = 0;
	char *index = parseTemplate(path_name, ".Port.");

	if (index != NULL){
		ret = lib_getvalue_mapfile_byinstance(BridgingBridge1PortMap, str, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			for (i = 0; i < strlen(str); i ++){
				if (str[i] == '|')
					str[i] = ' ';
			}
			sscanf(str, "%s %*s", inf);
			getDevStatus(inf, "tx_packets", value);
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DBBtPtS_PacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DBBtPtS_PacketsReceived, value);
	if(ret)
	{
		return -1;
	}*/
	char str[256] = {0};
	char inf[32] = {0};
	int i = 0;
	char *index = parseTemplate(path_name, ".Port.");

	if (index != NULL){
		ret = lib_getvalue_mapfile_byinstance(BridgingBridge1PortMap, str, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			for (i = 0; i < strlen(str); i ++){
				if (str[i] == '|')
					str[i] = ' ';
			}
			sscanf(str, "%s %*s", inf);
			getDevStatus(inf, "rx_packets", value);
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DBBtPtS_ErrorsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DBBtPtS_ErrorsSent, value);
	if(ret)
	{
		return -1;
	}*/
	char str[256] = {0};
	char inf[32] = {0};
	int i = 0;
	char *index = parseTemplate(path_name, ".Port.");

	if (index != NULL){
		ret = lib_getvalue_mapfile_byinstance(BridgingBridge1PortMap, str, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			for (i = 0; i < strlen(str); i ++){
				if (str[i] == '|')
					str[i] = ' ';
			}
			sscanf(str, "%s %*s", inf);
			getDevStatus(inf, "tx_errors", value);
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DBBtPtS_ErrorsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DBBtPtS_ErrorsReceived, value);
	if(ret)
	{
		return -1;
	}*/
	char str[256] = {0};
	char inf[32] = {0};
	int i = 0;
	char *index = parseTemplate(path_name, ".Port.");

	if (index != NULL){
		ret = lib_getvalue_mapfile_byinstance(BridgingBridge1PortMap, str, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			for (i = 0; i < strlen(str); i ++){
				if (str[i] == '|')
					str[i] = ' ';
			}
			sscanf(str, "%s %*s", inf);
			getDevStatus(inf, "rx_errors", value);
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DBBtPtS_UnicastPacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DBBtPtS_UnicastPacketsSent, value);
	if(ret)
	{
		return -1;
	}*/
	char str[256] = {0};
	char inf[32] = {0};
	char laninf[32] = {0};
	char waninf[32] = {0};
	int i = 0;
	int num = 0;
	char *index = parseTemplate(path_name, ".Port.");

	if (index != NULL){
		ret = lib_getvalue_mapfile_byinstance(BridgingBridge1PortMap, str, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			for (i = 0; i < strlen(str); i ++){
				if (str[i] == '|')
					str[i] = ' ';
			}
			sscanf(str, "%s %*s", inf);
			if (strstr(inf, "ath") != NULL || strstr(inf, "mesh") != NULL){
				char p[32] = {32};
				num = getWiFiInstanceNumWithInterfaceName(inf);
				if (num == 0)
					return -1;

				sprintf(p, "%d", num);

				if (p)
					getSSIStats(p, "Tx Unicast Data Packets", value);
			}
			else {
				int count = 0;
				int sum = 0;
				int j = 0;
				getEthInterfaceName("lan", laninf);
				getEthInterfaceName("wan", waninf);
				if (strcmp(inf, laninf) == 0){
					for(j=1; j<=4; j++)
					{
						count = get_ssdk_mib_statistics(j, "TxUniCast");
						sum = sum + count;
						count = 0;
					}
				}
				else if (strcmp(inf, waninf) == 0){
					for(j=1; j<=4; j++)
					{
						count = get_ssdk_mib_statistics(5, "TxUniCast");
						sum = sum + count;
					}
				}
				else
					sum = 0;

				sprintf(value, "%d", sum);
			}
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DBBtPtS_UnicastPacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DBBtPtS_UnicastPacketsReceived, value);
	if(ret)
	{
		return -1;
	}*/
	char str[256] = {0};
	char inf[32] = {0};
	char laninf[32] = {0};
	char waninf[32] = {0};
	int i = 0;
	int num = 0;
	char *index = parseTemplate(path_name, ".Port.");

	if (index != NULL){
		ret = lib_getvalue_mapfile_byinstance(BridgingBridge1PortMap, str, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			for (i = 0; i < strlen(str); i ++){
				if (str[i] == '|')
					str[i] = ' ';
			}
			sscanf(str, "%s %*s", inf);
			if (strstr(inf, "ath") != NULL || strstr(inf, "mesh") != NULL){
				char p[32] = {32};
				num = getWiFiInstanceNumWithInterfaceName(inf);
				if (num == 0)
					return -1;

				sprintf(p, "%d", num);

				if (p)
					getSSIStats(p, "Rx Unicast Data Packets", value);
			}
			else {
				int count = 0;
				int sum = 0;
				int j = 0;
				getEthInterfaceName("lan", laninf);
				getEthInterfaceName("wan", waninf);
				if (strcmp(inf, laninf) == 0){
					for(j=1; j<=4; j++)
					{
						count = get_ssdk_mib_statistics(j, "RxUniCast");
						sum = sum + count;
						count = 0;
					}
				}
				else if (strcmp(inf, waninf) == 0){
					for(j=1; j<=4; j++)
					{
						count = get_ssdk_mib_statistics(5, "RxUniCast");
						sum = sum + count;
					}
				}
				else
					sum = 0;

				sprintf(value, "%d", sum);
			}
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DBBtPtS_DiscardPacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DBBtPtS_DiscardPacketsSent, value);
	if(ret)
	{
		return -1;
	}*/
	char str[256] = {0};
	char inf[32] = {0};
	int i = 0;
	char *index = parseTemplate(path_name, ".Port.");

	if (index != NULL){
		ret = lib_getvalue_mapfile_byinstance(BridgingBridge1PortMap, str, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			for (i = 0; i < strlen(str); i ++){
				if (str[i] == '|')
					str[i] = ' ';
			}
			sscanf(str, "%s %*s", inf);
			getDevStatus(inf, "tx_dropped", value);
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DBBtPtS_DiscardPacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DBBtPtS_DiscardPacketsReceived, value);
	if(ret)
	{
		return -1;
	}*/
	char str[256] = {0};
	char inf[32] = {0};
	int i = 0;
	char *index = parseTemplate(path_name, ".Port.");

	if (index != NULL){
		ret = lib_getvalue_mapfile_byinstance(BridgingBridge1PortMap, str, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			for (i = 0; i < strlen(str); i ++){
				if (str[i] == '|')
					str[i] = ' ';
			}
			sscanf(str, "%s %*s", inf);
			getDevStatus(inf, "rx_dropped", value);
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DBBtPtS_MulticastPacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DBBtPtS_MulticastPacketsSent, value);
	if(ret)
	{
		return -1;
	}*/
	char str[256] = {0};
	char inf[32] = {0};
	char laninf[32] = {0};
	char waninf[32] = {0};
	int i = 0;
	int num = 0;
	char *index = parseTemplate(path_name, ".Port.");

	if (index != NULL){
		ret = lib_getvalue_mapfile_byinstance(BridgingBridge1PortMap, str, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			for (i = 0; i < strlen(str); i ++){
				if (str[i] == '|')
					str[i] = ' ';
			}
			sscanf(str, "%s %*s", inf);
			if (strstr(inf, "ath") != NULL || strstr(inf, "mesh") != NULL){
				char p[32] = {32};
				num = getWiFiInstanceNumWithInterfaceName(inf);
				if (num == 0)
					return -1;

				sprintf(p, "%d", num);

				if (p)
					getSSIStats(p, "Tx multicast Data Packets", value);
			}
			else {
				int count = 0;
				int sum = 0;
				int j = 0;
				getEthInterfaceName("lan", laninf);
				getEthInterfaceName("wan", waninf);
				if (strcmp(inf, laninf) == 0){
					for(j=1; j<=4; j++)
					{
						count = get_ssdk_mib_statistics(j, "TxMulti");
						sum = sum + count;
						count = 0;
					}
				}
				else if (strcmp(inf, waninf) == 0){
					for(j=1; j<=4; j++)
					{
						count = get_ssdk_mib_statistics(5, "TxMulti");
						sum = sum + count;
					}
				}
				else
					sum = 0;

				sprintf(value, "%d", sum);
			}
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DBBtPtS_MulticastPacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DBBtPtS_MulticastPacketsReceived, value);
	if(ret)
	{
		return -1;
	}*/
	char str[256] = {0};
	char inf[32] = {0};
	char laninf[32] = {0};
	char waninf[32] = {0};
	int i = 0;
	int num = 0;
	char *index = parseTemplate(path_name, ".Port.");

	if (index != NULL){
		ret = lib_getvalue_mapfile_byinstance(BridgingBridge1PortMap, str, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			for (i = 0; i < strlen(str); i ++){
				if (str[i] == '|')
					str[i] = ' ';
			}
			sscanf(str, "%s %*s", inf);
			if (strstr(inf, "ath") != NULL || strstr(inf, "mesh") != NULL){
				char p[32] = {32};
				num = getWiFiInstanceNumWithInterfaceName(inf);
				if (num == 0)
					return -1;

				sprintf(p, "%d", num);

				if (p)
					getSSIStats(p, "Rx multicast Data Packets", value);
			}
			else {
				int count = 0;
				int sum = 0;
				int j = 0;
				getEthInterfaceName("lan", laninf);
				getEthInterfaceName("wan", waninf);
				if (strcmp(inf, laninf) == 0){
					for(j=1; j<=4; j++)
					{
						count = get_ssdk_mib_statistics(j, "RxMulti");
						sum = sum + count;
						count = 0;
					}
				}
				else if (strcmp(inf, waninf) == 0){
					for(j=1; j<=4; j++)
					{
						count = get_ssdk_mib_statistics(5, "RxMulti");
						sum = sum + count;
					}
				}
				else
					sum = 0;

				sprintf(value, "%d", sum);
			}
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DBBtPtS_BroadcastPacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DBBtPtS_BroadcastPacketsSent, value);
	if(ret)
	{
		return -1;
	}*/
	char str[256] = {0};
	char inf[32] = {0};
	char laninf[32] = {0};
	char waninf[32] = {0};
	int i = 0;
	int num = 0;
	char *index = parseTemplate(path_name, ".Port.");

	if (index != NULL){
		ret = lib_getvalue_mapfile_byinstance(BridgingBridge1PortMap, str, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			for (i = 0; i < strlen(str); i ++){
				if (str[i] == '|')
					str[i] = ' ';
			}
			sscanf(str, "%s %*s", inf);
			if (strstr(inf, "ath") != NULL || strstr(inf, "mesh") != NULL){
				char p[32] = {32};
				num = getWiFiInstanceNumWithInterfaceName(inf);
				if (num == 0)
					return -1;

				sprintf(p, "%d", num);

				if (p)
					getSSIStats(p, "Tx Broadcast Data Packets", value);
			}
			else {
				int count = 0;
				int sum = 0;
				int j = 0;
				getEthInterfaceName("lan", laninf);
				getEthInterfaceName("wan", waninf);
				if (strcmp(inf, laninf) == 0){
					for(j=1; j<=4; j++)
					{
						count = get_ssdk_mib_statistics(j, "TxBroad");
						sum = sum + count;
						count = 0;
					}
				}
				else if (strcmp(inf, waninf) == 0){
					for(j=1; j<=4; j++)
					{
						count = get_ssdk_mib_statistics(5, "TxBroad");
						sum = sum + count;
					}
				}
				else
					sum = 0;

				sprintf(value, "%d", sum);
			}
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DBBtPtS_BroadcastPacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DBBtPtS_BroadcastPacketsReceived, value);
	if(ret)
	{
		return -1;
	}*/
	char str[256] = {0};
	char inf[32] = {0};
	char laninf[32] = {0};
	char waninf[32] = {0};
	int i = 0;
	int num = 0;
	char *index = parseTemplate(path_name, ".Port.");

	if (index != NULL){
		ret = lib_getvalue_mapfile_byinstance(BridgingBridge1PortMap, str, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			for (i = 0; i < strlen(str); i ++){
				if (str[i] == '|')
					str[i] = ' ';
			}
			sscanf(str, "%s %*s", inf);
			if (strstr(inf, "ath") != NULL || strstr(inf, "mesh") != NULL){
				char p[32] = {32};
				num = getWiFiInstanceNumWithInterfaceName(inf);
				if (num == 0)
					return -1;

				sprintf(p, "%d", num);

				if (p)
					getSSIStats(p, "Rx Broadcast Data Packets", value);
			}
			else {
				int count = 0;
				int sum = 0;
				int j = 0;
				getEthInterfaceName("lan", laninf);
				getEthInterfaceName("wan", waninf);
				if (strcmp(inf, laninf) == 0){
					for(j=1; j<=4; j++)
					{
						count = get_ssdk_mib_statistics(j, "RxBroad");
						sum = sum + count;
						count = 0;
					}
				}
				else if (strcmp(inf, waninf) == 0){
					for(j=1; j<=4; j++)
					{
						count = get_ssdk_mib_statistics(5, "RxBroad");
						sum = sum + count;
					}
				}
				else
					sum = 0;

				sprintf(value, "%d", sum);
			}
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DBBtPtS_UnknownProtoPacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DBBtPtS_UnknownProtoPacketsReceived, value);
	if(ret)
	{
		return -1;
	}*/
	char str[256] = {0};
	char inf[32] = {0};
	int i = 0;
	char *index = parseTemplate(path_name, ".Port.");

	if (index != NULL){
		ret = lib_getvalue_mapfile_byinstance(BridgingBridge1PortMap, str, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			for (i = 0; i < strlen(str); i ++){
				if (str[i] == '|')
					str[i] = ' ';
			}
			sscanf(str, "%s %*s", inf);
			getDevStatus(inf, "rx_frame_errors", value);
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DBBtVt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DBBtVt_Enable, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DBBtVt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DBBtVt_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DBBtVt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DBBtVt_Alias, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DBBtVt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DBBtVt_Alias, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DBBtVt_Name(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DBBtVt_Name, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DBBtVt_Name(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DBBtVt_Name, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DBBtVt_VLANID(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DBBtVt_VLANID, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DBBtVt_VLANID(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DBBtVt_VLANID, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DBBtVt_Enable_2007(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DBBtVt_Enable_2007, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DBBtVt_Enable_2007(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DBBtVt_Enable_2007, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DBBtVt_Alias_2009(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DBBtVt_Alias_2009, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DBBtVt_Alias_2009(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DBBtVt_Alias_2009, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DBBtVt_VLAN(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DBBtVt_VLAN, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DBBtVt_VLAN(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DBBtVt_VLAN, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DBBtVt_Port(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DBBtVt_Port, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DBBtVt_Port(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DBBtVt_Port, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DBBtVt_Untagged(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DBBtVt_Untagged, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DBBtVt_Untagged(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DBBtVt_Untagged, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DBFt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DBFt_Enable, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DBFt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DBFt_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DBFt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DBFt_Alias, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DBFt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DBFt_Alias, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DBFt_Status(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DBFt_Status, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DBFt_Bridge(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DBFt_Bridge, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DBFt_Bridge(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DBFt_Bridge, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DBFt_Order(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DBFt_Order, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DBFt_Order(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DBFt_Order, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DBFt_Interface(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DBFt_Interface, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DBFt_Interface(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DBFt_Interface, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DBFt_DHCPType(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DBFt_DHCPType, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DBFt_DHCPType(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DBFt_DHCPType, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DBFt_VLANIDFilter(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DBFt_VLANIDFilter, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DBFt_VLANIDFilter(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DBFt_VLANIDFilter, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DBFt_EthertypeFilterList(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DBFt_EthertypeFilterList, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DBFt_EthertypeFilterList(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DBFt_EthertypeFilterList, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DBFt_EthertypeFilterExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DBFt_EthertypeFilterExclude, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DBFt_EthertypeFilterExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DBFt_EthertypeFilterExclude, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DBFt_SourceMACAddressFilterList(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DBFt_SourceMACAddressFilterList, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DBFt_SourceMACAddressFilterList(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DBFt_SourceMACAddressFilterList, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DBFt_SourceMACAddressFilterExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DBFt_SourceMACAddressFilterExclude, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DBFt_SourceMACAddressFilterExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DBFt_SourceMACAddressFilterExclude, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DBFt_DestMACAddressFilterList(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DBFt_DestMACAddressFilterList, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DBFt_DestMACAddressFilterList(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DBFt_DestMACAddressFilterList, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DBFt_DestMACAddressFilterExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DBFt_DestMACAddressFilterExclude, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DBFt_DestMACAddressFilterExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DBFt_DestMACAddressFilterExclude, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DBFt_SourceMACFromVendorClassIDFilter(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DBFt_SourceMACFromVendorClassIDFilter, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DBFt_SourceMACFromVendorClassIDFilter(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DBFt_SourceMACFromVendorClassIDFilter, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DBFt_SourceMACFromVendorClassIDFilterv6(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DBFt_SourceMACFromVendorClassIDFilterv6, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DBFt_SourceMACFromVendorClassIDFilterv6(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DBFt_SourceMACFromVendorClassIDFilterv6, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DBFt_SourceMACFromVendorClassIDFilterExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DBFt_SourceMACFromVendorClassIDFilterExclude, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DBFt_SourceMACFromVendorClassIDFilterExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DBFt_SourceMACFromVendorClassIDFilterExclude, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DBFt_SourceMACFromVendorClassIDMode(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DBFt_SourceMACFromVendorClassIDMode, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DBFt_SourceMACFromVendorClassIDMode(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DBFt_SourceMACFromVendorClassIDMode, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DBFt_estMACFromVendorClassIDFilter(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DBFt_estMACFromVendorClassIDFilter, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DBFt_estMACFromVendorClassIDFilter(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DBFt_estMACFromVendorClassIDFilter, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DBFt_DestMACFromVendorClassIDFilterv6(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DBFt_DestMACFromVendorClassIDFilterv6, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DBFt_DestMACFromVendorClassIDFilterv6(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DBFt_DestMACFromVendorClassIDFilterv6, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DBFt_DestMACFromVendorClassIDFilterExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DBFt_DestMACFromVendorClassIDFilterExclude, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DBFt_DestMACFromVendorClassIDFilterExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DBFt_DestMACFromVendorClassIDFilterExclude, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DBFt_DestMACFromVendorClassIDMode(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DBFt_DestMACFromVendorClassIDMode, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DBFt_DestMACFromVendorClassIDMode(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DBFt_DestMACFromVendorClassIDMode, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DBFt_SourceMACFromClientIDFilter(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DBFt_SourceMACFromClientIDFilter, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DBFt_SourceMACFromClientIDFilter(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DBFt_SourceMACFromClientIDFilter, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DBFt_SourceMACFromClientIDFilterExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DBFt_SourceMACFromClientIDFilterExclude, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DBFt_SourceMACFromClientIDFilterExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DBFt_SourceMACFromClientIDFilterExclude, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DBFt_DestMACFromClientIDFilter(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DBFt_DestMACFromClientIDFilter, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DBFt_DestMACFromClientIDFilter(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DBFt_DestMACFromClientIDFilter, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DBFt_DestMACFromClientIDFilterExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DBFt_DestMACFromClientIDFilterExclude, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DBFt_DestMACFromClientIDFilterExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DBFt_DestMACFromClientIDFilterExclude, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DBFt_SourceMACFromUserClassIDFilter(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DBFt_SourceMACFromUserClassIDFilter, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DBFt_SourceMACFromUserClassIDFilter(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DBFt_SourceMACFromUserClassIDFilter, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DBFt_SourceMACFromUserClassIDFilterExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DBFt_SourceMACFromUserClassIDFilterExclude, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DBFt_SourceMACFromUserClassIDFilterExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DBFt_SourceMACFromUserClassIDFilterExclude, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DBFt_DestMACFromUserClassIDFilter(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DBFt_DestMACFromUserClassIDFilter, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DBFt_DestMACFromUserClassIDFilter(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DBFt_DestMACFromUserClassIDFilter, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DBFt_DestMACFromUserClassIDFilterExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DBFt_DestMACFromUserClassIDFilterExclude, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DBFt_DestMACFromUserClassIDFilterExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DBFt_DestMACFromUserClassIDFilterExclude, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DBFt_DestIP(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DBFt_DestIP, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DBFt_DestIP(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DBFt_DestIP, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DBFt_DestMask(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DBFt_DestMask, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DBFt_DestMask(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DBFt_DestMask, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DBFt_DestIPExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DBFt_DestIPExclude, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DBFt_DestIPExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DBFt_DestIPExclude, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DBFt_SourceIP(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DBFt_SourceIP, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DBFt_SourceIP(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DBFt_SourceIP, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DBFt_SourceMask(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DBFt_SourceMask, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DBFt_SourceMask(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DBFt_SourceMask, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DBFt_SourceIPExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DBFt_SourceIPExclude, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DBFt_SourceIPExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DBFt_SourceIPExclude, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DBFt_Protocol(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DBFt_Protocol, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DBFt_Protocol(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DBFt_Protocol, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DBFt_ProtocolExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DBFt_ProtocolExclude, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DBFt_ProtocolExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DBFt_ProtocolExclude, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DBFt_DestPort(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DBFt_DestPort, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DBFt_DestPort(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DBFt_DestPort, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DBFt_DestPortRangeMax(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DBFt_DestPortRangeMax, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DBFt_DestPortRangeMax(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DBFt_DestPortRangeMax, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DBFt_DestPortExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DBFt_DestPortExclude, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DBFt_DestPortExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DBFt_DestPortExclude, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DBFt_SourcePort(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DBFt_SourcePort, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DBFt_SourcePort(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DBFt_SourcePort, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DBFt_SourcePortRangeMax(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DBFt_SourcePortRangeMax, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DBFt_SourcePortRangeMax(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DBFt_SourcePortRangeMax, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DBFt_SourcePortExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DBFt_SourcePortExclude, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DBFt_SourcePortExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DBFt_SourcePortExclude, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DBPt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DBPt_Enable, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DBPt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DBPt_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DBPt_Status(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DBPt_Status, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DBPt_Status(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DBPt_Status, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DBPt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DBPt_Alias, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DBPt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DBPt_Alias, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DBPt_Type(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DBPt_Type, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DBPt_Type(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DBPt_Type, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DBPt_SVLANComponent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DBPt_SVLANComponent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DBPt_SVLANComponent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DBPt_SVLANComponent, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DBPt_CVLANComponents(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DBPt_CVLANComponents, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DBPt_CVLANComponents(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DBPt_CVLANComponents, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DP_InterfaceNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DP_InterfaceNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DP_SupportedNCPs(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DP_SupportedNCPs, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DPIt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DPIt_Enable, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DPIt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DPIt_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DPIt_Status(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DPIt_Status, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DPIt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DPIt_Alias, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DPIt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DPIt_Alias, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DPIt_Name(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DPIt_Name, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DPIt_LastChange(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DPIt_LastChange, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DPIt_LowerLayers(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DPIt_LowerLayers, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DPIt_LowerLayers(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DPIt_LowerLayers, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DPIt_Reset(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DPIt_Reset, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DPIt_Reset(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DPIt_Reset, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DPIt_ConnectionStatus(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DPIt_ConnectionStatus, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DPIt_LastConnectionError(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DPIt_LastConnectionError, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DPIt_AutoDisconnectTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DPIt_AutoDisconnectTime, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DPIt_AutoDisconnectTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DPIt_AutoDisconnectTime, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DPIt_IdleDisconnectTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DPIt_IdleDisconnectTime, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DPIt_IdleDisconnectTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DPIt_IdleDisconnectTime, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DPIt_WarnDisconnectDelay(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DPIt_WarnDisconnectDelay, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DPIt_WarnDisconnectDelay(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DPIt_WarnDisconnectDelay, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DPIt_Username(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DPIt_Username, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DPIt_Username(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DPIt_Username, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DPIt_Password(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DPIt_Password, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DPIt_Password(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DPIt_Password, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DPIt_EncryptionProtocol(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DPIt_EncryptionProtocol, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DPIt_EncryptionProtocol(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DPIt_EncryptionProtocol, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DPIt_CompressionProtocol(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DPIt_CompressionProtocol, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DPIt_CompressionProtocol(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DPIt_CompressionProtocol, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DPIt_AuthenticationProtocol(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DPIt_AuthenticationProtocol, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DPIt_AuthenticationProtocol(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DPIt_AuthenticationProtocol, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DPIt_MaxMRUSize(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DPIt_MaxMRUSize, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DPIt_MaxMRUSize(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DPIt_MaxMRUSize, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DPIt_CurrentMRUSize(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DPIt_CurrentMRUSize, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DPIt_ConnectionTrigger(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DPIt_ConnectionTrigger, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DPIt_ConnectionTrigger(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DPIt_ConnectionTrigger, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DPIt_LCPEcho(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DPIt_LCPEcho, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DPIt_LCPEchoRetry(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DPIt_LCPEchoRetry, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DPIt_IPCPEnable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DPIt_IPCPEnable, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DPIt_IPCPEnable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DPIt_IPCPEnable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DPIt_IPv6CPEnable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DPIt_IPv6CPEnable, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DPIt_IPv6CPEnable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DPIt_IPv6CPEnable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DPItP_SessionID(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DPItP_SessionID, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DPItP_ACName(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DPItP_ACName, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DPItP_ACName(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DPItP_ACName, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DPItP_ServiceName(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DPItP_ServiceName, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DPItP_ServiceName(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DPItP_ServiceName, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DPItI_LocalIPAddress(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DPItI_LocalIPAddress, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DPItI_RemoteIPAddress(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DPItI_RemoteIPAddress, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DPItI_DNSServers(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DPItI_DNSServers, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DPItI_PassthroughEnable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DPItI_PassthroughEnable, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DPItI_PassthroughEnable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DPItI_PassthroughEnable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DPItI_PassthroughDHCPPool(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DPItI_PassthroughDHCPPool, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DPItI_PassthroughDHCPPool(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DPItI_PassthroughDHCPPool, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DPItI_LocalInterfaceIdentifier(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DPItI_LocalInterfaceIdentifier, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DPItI_RemoteInterfaceIdentifier(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DPItI_RemoteInterfaceIdentifier, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DPItS_BytesSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DPItS_BytesSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DPItS_BytesReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DPItS_BytesReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DPItS_PacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DPItS_PacketsSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DPItS_PacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DPItS_PacketsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DPItS_ErrorsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DPItS_ErrorsSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DPItS_ErrorsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DPItS_ErrorsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DPItS_UnicastPacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DPItS_UnicastPacketsSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DPItS_UnicastPacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DPItS_UnicastPacketsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DPItS_DiscardPacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DPItS_DiscardPacketsSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DPItS_DiscardPacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DPItS_DiscardPacketsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DPItS_MulticastPacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DPItS_MulticastPacketsSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DPItS_MulticastPacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DPItS_MulticastPacketsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DPItS_BroadcastPacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DPItS_BroadcastPacketsSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DPItS_BroadcastPacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DPItS_BroadcastPacketsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DPItS_UnknownProtoPacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DPItS_UnknownProtoPacketsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DI_IPv4Capable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DI_IPv4Capable, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "1"); //always true
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DI_IPv4Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DI_IPv4Enable, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "1"); //always enable
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DI_IPv4Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DI_IPv4Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DI_IPv4Status(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DI_IPv4Status, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "Enabled"); //don't allow to set
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DI_IPv6Capable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DI_IPv6Capable, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "1"); //always 1
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DI_IPv6Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("ipv6.@global[0].enable", value);
	if(ret)
	{
		strcpy(value, "0");
		ret = 0;
	}
	if (atoi(value) == 0)
		strcpy(value, "0");
	else
		strcpy(value, "1");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DI_IPv6Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char ipv6en[32] = {0};
	
	if (atoi(value) == 0)
		strcpy(ipv6en, "0");
	else
		strcpy(ipv6en, "1"); //always make the ipv6 with Native mode
		
	ret = do_uci_set("ipv6.@global[0].enable", ipv6en);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("ipv6");
		if(ret)
		{
			return (-1);
		}
		//ret = 1; //means need to reboot for taking effect
		doIPv6Restart();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DI_IPv6Status(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get("ipv6.@global[0].enable", value);
	if(ret)
	{
		strcpy(value, "0");
		ret = 0;
	}
	if (atoi(value) == 0)
		strcpy(value, "Disabled");
	else
		strcpy(value, "Enabled"); */
	ret = do_uci_get("ipv6.@global[0].status", value);
	if(ret)
	{
		strcpy(value, "Disabled");
		ret = 0;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DI_ULAPrefix(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DI_ULAPrefix, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, ""); //always an empty string
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DI_ULAPrefix(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DI_ULAPrefix, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DI_InterfaceNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DI_InterfaceNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}*/
	sprintf(value, "%d", IP_LAN_INSTANCE_NUM+IP_WAN_INSTANCE_NUM);
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DI_ActivePortNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DI_ActivePortNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}*/
	FILE *fp = NULL;
	char buff[1024] = {0};
	char localIP[256] = {0};
	char remoteIP[256] = {0};
	char state[64] = {0};
	int i = 0;
	
	system("netstat -n -t > /tmp/netstatresult");
	system("netstat -n -t -l >> /tmp/netstatresult");

	fp = fopen("/tmp/netstatresult", "r");
	if(fp != NULL)
	{
		while(fgets(buff, sizeof(buff), fp))
		{
			if(strstr(buff, "tcp") != NULL)
			{
				sscanf(buff, "%*s %*s %*s %s %s %s", localIP, remoteIP, state);
				if(strcmp(state, "LISTEN") == 0 || strcmp(state, "ESTABLISHED") == 0)
				{
					i++;
				}
			}
		}
		fclose(fp);
	}
	unlink("/tmp/netstatresult");
	sprintf(value, "%d", i);
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIIt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIIt_Enable, value);
	if(ret)
	{
		return -1;
	}*/
	char *p = parseTemplate(path_name, ".Interface.");

	if (p == NULL)
		return -1;

	if (atoi(p) >= IP_LAN_START_INSTANCE_NUM && atoi(p) <= IP_LAN_END_INSTANCE_NUM)
	{
		char inf[32] = {0};
		a_infinfo infStatus;

		memset(&infStatus, 0, sizeof(infStatus));
		getLanUbsInterfaceNameWithInstanceNum(p, inf);
		getInterfaceInfo(inf, &infStatus);

		if (infStatus.status == 1)
			strcpy(value, "1");
		else
			strcpy(value, "0");
	}
	else if(atoi(p) == IP_WAN_INSTANCE_INDEX)
	{
		char wanup[32] = {0};
		ret = do_uci_get("network.wan.disabled", wanup);
		if(ret)
		{
			strcpy(value, "1"); //no this uci node with default settings
			ret = 0;
		}
		else
		{
			if (atoi(wanup) == 1)
				strcpy(value, "0");
			else
				strcpy(value, "1");
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIIt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DIIt_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char *p = parseTemplate(path_name, ".Interface.");

	if (p == NULL)
		return -1;

	if(atoi(p) == IP_WAN_INSTANCE_INDEX)
	{
		char wanup[32] = {0};
		if (atoi(value) == 1)
			strcpy(wanup, "0");
		else{
			//strcpy(wanup, "1");
			return -3; //CS attempt to disable the WAN interface, that parameter setting MUST be rejected and reported to ACS as an error, now the error code is 9001(Request denied)
		}
		ret = do_uci_set("network.wan.disabled", wanup);
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit("network");
			if(ret)
			{
				return (-1);
			}
			/*if(atoi(buff) != atoi(value))
			{
				system("/etc/init.d/network restart &");
			}*/
			//ret = 1; //means need to reboot for taking effect
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIIt_IPv4Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIIt_IPv4Enable, value);
	if(ret)
	{
		return -1;
	}*/
	char *p = parseTemplate(path_name, ".Interface.");

	if (p == NULL)
		return -1;

	if (atoi(p) >= IP_LAN_START_INSTANCE_NUM && atoi(p) <= IP_LAN_END_INSTANCE_NUM)
	{
		char inf[32] = {0};
		a_infinfo infStatus;

		memset(&infStatus, 0, sizeof(infStatus));
		getLanUbsInterfaceNameWithInstanceNum(p, inf);
		getInterfaceInfo(inf, &infStatus);

		if (infStatus.status == 1)
			strcpy(value, "1");
		else
			strcpy(value, "0");
	}
	else if(atoi(p) == IP_WAN_INSTANCE_INDEX)
	{
		char ipv4up[32] = {0};
		ret = do_uci_get("network.wan.ipv4_disabled", ipv4up);
		if(ret)
		{
			strcpy(value, "1"); //no this uci node with default settings
			ret = 0;
		}
		else
		{
			if (atoi(ipv4up) == 1)
				strcpy(value, "0");
			else
				strcpy(value, "1");
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIIt_IPv4Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DIIt_IPv4Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char *p = parseTemplate(path_name, ".Interface.");

	if (p == NULL)
		return -1;

	if(atoi(p) == IP_WAN_INSTANCE_INDEX)
	{
		char ipv4up[32] = {0};
		if (atoi(value) == 1)
			strcpy(ipv4up, "0");
		else
			//strcpy(ipv4up, "1");
			return -3; //CS attempt to disable the WAN interface, that parameter setting MUST be rejected and reported to ACS as an error, now the error code is 9001(Request denied)
		ret = do_uci_set("network.wan.ipv4_disabled", ipv4up);
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit("network");
			if(ret)
			{
				return (-1);
			}
			//ret = 1; //means need to reboot for taking effect
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIIt_IPv6Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	int ipv6capable = 0;
	char *p = parseTemplate(path_name, ".Interface.");

	if (p == NULL)
		return -1;

	//only network.lan and network.wan support ipv6, network.lan1 ~ network.lan3 don't support
	if (atoi(p) >= IP_LAN_START_INSTANCE_NUM && atoi(p) <= IP_LAN_END_INSTANCE_NUM)
	{
		ipv6capable = getLanIPv6CapableWithInstanceNum(p);
	}
	else
		ipv6capable = 1;

	if (ipv6capable == 0)
		strcpy(value, "0");
	else{
		//LAN and WAN with the same node for ipv6
		ret = do_uci_get("ipv6.@global[0].connection_type", value);
		if(ret)
		{
			strcpy(value, "0");
			ret = 0;
		}
		if (atoi(value) == 0)
			strcpy(value, "0");
		else
			strcpy(value, "1");
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIIt_IPv6Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char ipv6en[32] = {0};
	int ipv6capable = 0;
	char *p = parseTemplate(path_name, ".Interface.");

	if (p == NULL)
		return -1;

	//only network.lan and network.wan support ipv6, network.lan1 ~ network.lan3 don't support
	if (atoi(p) >= IP_LAN_START_INSTANCE_NUM && atoi(p) <= IP_LAN_END_INSTANCE_NUM)
	{
		ipv6capable = getLanIPv6CapableWithInstanceNum(p);
		if (ipv6capable != 1)
			return 0;
	}
	
	if (atoi(value) == 0)
		strcpy(ipv6en, "0");
	else
		strcpy(ipv6en, "1"); //always make the ipv6 with Native mode

	ret = do_uci_set("ipv6.@global[0].enable", ipv6en);
	if(ret)
	{
		return (-1);
	}

	ret = do_uci_set("ipv6.@global[0].connection_type", ipv6en);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("ipv6");
		if(ret)
		{
			return (-1);
		}
		//ret = 1; //means need to reboot for taking effect
		doIPv6Restart();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIIt_ULAEnable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIIt_ULAEnable, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "0"); //always 0
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIIt_ULAEnable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DIIt_ULAEnable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIIt_Status(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIIt_Status, value);
	if(ret)
	{
		return -1;
	}*/
	char *p = parseTemplate(path_name, ".Interface.");

	if (p == NULL)
		return -1;

	if (atoi(p) >= IP_LAN_START_INSTANCE_NUM && atoi(p) <= IP_LAN_END_INSTANCE_NUM)
	{
		char inf[32] = {0};
		a_infinfo infStatus;

		memset(&infStatus, 0, sizeof(infStatus));
		getLanUbsInterfaceNameWithInstanceNum(p, inf);
		getInterfaceInfo(inf, &infStatus);

		if (infStatus.status == 1)
			strcpy(value, "Up");
		else
			strcpy(value, "Down");
	}
	else if(atoi(p) == IP_WAN_INSTANCE_INDEX)
	{
		char waninf[32] = {0};
		getWanHigherLayerInterface(waninf);
		if (waninf[0] != '\0')
			strcpy(value, "Up");
		else
			strcpy(value, "Down");
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIIt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIIt_Alias, value);
	if(ret)
	{
		return -1;
	}*/
	ret = 1; //getting from tr.xml
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIIt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (!isalpha(value[0]))
		return -2;
	
	if (strlen(value) > 64)
		return -2;
	
	/*ret = do_uci_set(DIIt_Alias, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);*/
	//set to tr.xml
	return ret;
}
int get_DIIt_Name(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIIt_Name, value);
	if(ret)
	{
		return -1;
	}*/
	char *p = parseTemplate(path_name, ".Interface.");

	if (p == NULL)
		return -1;
	
	if (atoi(p) >= IP_LAN_START_INSTANCE_NUM && atoi(p) <= IP_LAN_END_INSTANCE_NUM)
	{
		char inf[32] = {0};
		getLanInterfaceNameWithInstanceNum(p, inf);
		sprintf(value, "LAN Group %s", inf);
	}
	else
	{
		//getWanHigherLayerInterface(value);
		char wanmode[32] = {0};
		getWanMode(wanmode);
		sprintf(value, "WAN %s Mode", wanmode); //textual name
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIIt_LastChange(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIIt_LastChange, value);
	if(ret)
	{
		return -1;
	}*/
	a_infinfo infStatus;
	char *p = parseTemplate(path_name, ".Interface.");

	if (p == NULL)
		return -1;

	memset(&infStatus, 0, sizeof(infStatus));
	
	if (atoi(p) >= IP_LAN_START_INSTANCE_NUM && atoi(p) <= IP_LAN_END_INSTANCE_NUM)
	{
		char inf[32] = {0};
		getLanUbsInterfaceNameWithInstanceNum(p, inf);
		getInterfaceInfo(inf, &infStatus);
	}
	else
	{
		char wanmode[32] = {0};
		char wantype[32] = {0};
		getWanMode(wanmode);
		if (strcmp(wanmode, "pptp") == 0 || strcmp(wanmode, "l2tp") == 0)
			strcpy(wantype, "wan0");
		else
			strcpy(wantype, "wan");
		memset(&infStatus, 0, sizeof(infStatus));
		getInterfaceInfo(wantype, &infStatus);
	}
	if (strcmp(infStatus.uptime, "") != 0)
		strcpy(value, infStatus.uptime);
	else
		strcpy(value, "0");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIIt_LowerLayers(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIIt_LowerLayers, value);
	if(ret)
	{
		return -1;
	}*/
	char *p = parseTemplate(path_name, ".Interface.");

	if (p == NULL)
		return -1;
	
	if (atoi(p) >= IP_LAN_START_INSTANCE_NUM && atoi(p) <= IP_LAN_END_INSTANCE_NUM)
	{
		char inf[32] = {0};
		char inf2[128] = {0};
		int has24g = 0;
		int has5g = 0;
		int i = 0;

		getLanInterfaceNameWithInstanceNum(p, inf);
		getLanLowerLayerInterface(inf2, inf);
		if (strstr(inf2, "eth") != NULL){
			strcpy(value, ETHERNET_LAN_INTERFACE_PATH);
		}

		for (i = 0; i < WIFI_MAX_INSTANCE_NUM; i ++){
			if (strstr(inf2, wifi_map[i].wlaninf) != NULL){
				if (wifi_map[i].num >= WIFI5G_START_INSTANCE_NUM && wifi_map[i].num <= WIFI5G_END_INSTANCE_NUM)
					has5g ++;
				else
					has24g ++;
			}
		}

		if (has5g != 0){
			if (strcmp(value, "") == 0)
				strcpy(value, WIFI_RADIO_5G_PATH);
			else
				sprintf(value, "%s,%s", value, WIFI_RADIO_5G_PATH);
		}

		if (has24g != 0){
			if (strcmp(value, "") == 0)
				strcpy(value, WIFI_RADIO_24G_PATH);
			else
				sprintf(value, "%s,%s", value, WIFI_RADIO_24G_PATH);
		}
	}
	else
	{
		char wanup[32] = {0};
		ret = do_uci_get("network.wan.disabled", wanup);
		if(ret)
		{
			strcpy(wanup, "0"); //no this uci node with defalut settings
			ret = 0;
		}
		if (atoi(wanup) == 0) //0 means up, 1 means down
			strcpy(value, ETHERNET_WAN_INTERFACE_PATH);
		else
			strcpy(value, "");
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIIt_LowerLayers(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DIIt_LowerLayers, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIIt_Router(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIIt_Router, value);
	if(ret)
	{
		return -1;
	}*/
	char routerinfo[128] = {0};
	char inf[32] = {0};
	int i =0;
	char *p = parseTemplate(path_name, ".Interface.");

	if (p == NULL)
		return -1;

	if (atoi(p) >= IP_LAN_START_INSTANCE_NUM && atoi(p) <= IP_LAN_END_INSTANCE_NUM)
	{
		getLanInterfaceNameWithInstanceNum(p, inf);
	}
	else
	{
		getEthInterfaceName("wan", inf);
	}

	for (i = 1; ;i ++){
		ret = lib_getvalue_mapfile_byinstance(RouterIPv4Map, routerinfo, i);
		if(ret)
		{
			strcpy(value, "");
			ret = 0; //must
			break;
		}
		else
		{
			char inf2[32] = {0};
			getRouterIPv4Option(routerinfo, inf2, "Iface");
			if (strcmp(inf, inf2) == 0){
				if (strcmp(value, "") == 0)
					sprintf(value, "Device.Routing.Router.1.IPv4Forwarding.%d", i);
				else
					sprintf(value, "%s,Device.Routing.Router.1.IPv4Forwarding.%d", value, i);
			}
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIIt_Router(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DIIt_Router, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIIt_Reset(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIIt_Reset, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "0");//always false
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIIt_Reset(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DIIt_Reset, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char *p = parseTemplate(path_name, ".Interface.");

	if (p == NULL)
		return -1;
	
	if (atoi(p) >= IP_LAN_START_INSTANCE_NUM && atoi(p) <= IP_LAN_END_INSTANCE_NUM)
	{
		doIPInterfaceReset();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIIt_MaxMTUSize(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIIt_MaxMTUSize, value);
	if(ret)
	{
		return -1;
	}*/
	char inf[32] = {0};
	char *p = parseTemplate(path_name, ".Interface.");

	if (p == NULL)
		return -1;
	
	if (atoi(p) >= IP_LAN_START_INSTANCE_NUM && atoi(p) <= IP_LAN_END_INSTANCE_NUM)
	{
		char ucipath[64] = {0};
		getLanInterfaceNameWithInstanceNum(p, inf);
		getLanUciPathWithInstanceNum(p, ucipath);
		sprintf(ucipath, "%s.mtu", ucipath);
		ret = do_uci_get(ucipath, value);
		if(ret)
		{
			getNetMtu(inf, value);
			ret = 0;
		}
	}
	else
	{
		char wanmode[32] = {0};
		char str[64] = {0};
		char mtu[64] = {0};
		getWanMode(wanmode);
		if (strcmp(wanmode, "pptp") == 0 || strcmp(wanmode, "l2tp") == 0)
			strcpy(str, "network.wan0.mtu");
		else
			strcpy(str, "network.wan.mtu");

		ret = do_uci_get(str, mtu);
		if(ret)
		{ //for network.wan.mtu and network.wan0.mtu value are null
			getWanHigherLayerInterface(inf);
			getNetMtu(inf, mtu);
			ret = 0; //MUST
		}

		strcpy(value, mtu);
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIIt_MaxMTUSize(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char *p = parseTemplate(path_name, ".Interface.");

	if (atoi(value) < 64 || atoi(value) > 1500)
		return -2;

	if (p == NULL)
		return -1;

	if (atoi(p) >= IP_LAN_START_INSTANCE_NUM && atoi(p) <= IP_LAN_END_INSTANCE_NUM)
	{
		char ucipath[64] = {0};
		char name[64] = {0};
		char tmpvalue[64] = {0};

		getLanUbsInterfaceNameWithInstanceNum(p, name);
		getLanUciPathWithInstanceNum(p, ucipath);

		//ucipath==>network.lan%d, name==>lan%d
		ret = do_uci_get(ucipath, tmpvalue);
		if(ret)
		{
			addUciTopNode("network", name);
			ret = 0;
		}

		sprintf(ucipath, "%s.mtu", ucipath);
		ret = do_uci_set(ucipath, value);
		if(ret)
	    {
		    return (-1);
	    }
	    else
	    {
		    ret = do_uci_commit("network");
		    if(ret)
		    {
			    return (-1);
		    }
			//ret = 1; //means need to reboot for taking effect
	    }
	}
	else if(atoi(p) == IP_WAN_INSTANCE_INDEX){
		char wanmode[32] = {0};
		char str[64] = {0};
		char str2[64] = {0};
		getWanMode(wanmode);
		if (strcmp(wanmode, "pptp") == 0 || strcmp(wanmode, "l2tp") == 0)
			strcpy(str, "network.wan0.mtu");
		else{
			strcpy(str, "network.wan.mtu");
			strcpy(str2, "network.commwan.mtu"); //new SDK need
		}

		if (str2[0] != '\0'){
			ret = do_uci_set(str2, value);
			if(ret)
	    	{
		    	return (-1);
	    	}
		}
			
	    ret = do_uci_set(str, value);
	    if(ret)
	    {
		    return (-1);
	    }
	    else
	    {
		    ret = do_uci_commit("network");
		    if(ret)
		    {
			    return (-1);
		    }
			//ret = 1; //means need to reboot for taking effect
	    }
	}
	else
		return -1;
	
	doRestartNetwork();
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIIt_Type(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIIt_Type, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "Normal"); //always normal
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIIt_Loopback(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIIt_Loopback, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "0");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIIt_Loopback(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DIIt_Loopback, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIIt_IPv4AddressNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIIt_IPv4AddressNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "1"); //always 1
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIIt_IPv6AddressNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIIt_IPv6AddressNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}*/
	int ipv6capable = 0;
	char *p = parseTemplate(path_name, ".Interface.");

	if (p == NULL)
		return -1;

	if (atoi(p) >= IP_LAN_START_INSTANCE_NUM && atoi(p) <= IP_LAN_END_INSTANCE_NUM)
	{
		ipv6capable = getLanIPv6CapableWithInstanceNum(p);
		if (ipv6capable == 1)
			strcpy(value, "1");
		else
			strcpy(value, "0");
	}
	else
		strcpy(value, "1");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIIt_IPv6PrefixNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIIt_IPv6PrefixNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}*/
	int ipv6capable = 0;
	char *p = parseTemplate(path_name, ".Interface.");

	if (p == NULL)
		return -1;

	if (atoi(p) >= IP_LAN_START_INSTANCE_NUM && atoi(p) <= IP_LAN_END_INSTANCE_NUM)
	{
		if (ipv6capable == 1)
			strcpy(value, "1");
		else
			strcpy(value, "0");
	}
	else
		strcpy(value, "1");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIIt_AutoIPEnable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIIt_AutoIPEnable, value);
	if(ret)
	{
		return -1;
	}*/
	char buff[32] = {0};
	char *p = parseTemplate(path_name, ".Interface.");

	if (p == NULL)
		return -1;

	if (atoi(p) >= IP_LAN_START_INSTANCE_NUM && atoi(p) <= IP_LAN_END_INSTANCE_NUM)
	{
		char ucipath[64] = {0};
		getLanUciPathWithInstanceNum(p, ucipath);
		sprintf(ucipath, "%s.proto", ucipath);

		ret = do_uci_get(ucipath, buff);
		if(ret)
		{
			strcpy(value, "0");
			ret = 0;
		}
		else{
			if(strcmp(buff, "static") == 0)
			{
				strcpy(value, "0");		
			}
			else
			{
				strcpy(value, "1");
			}
		}
	}
	else
	{
		ret = do_uci_get("network.wan.proto", buff);
		if(ret)
		{
			strcpy(value, "1");
			ret = 0;
		}
		if(strcmp(buff, "static") == 0)
		{
			strcpy(value, "0");		
		}
		else
		{
			strcpy(value, "1");
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIIt_AutoIPEnable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DIIt_AutoIPEnable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char *p = parseTemplate(path_name, ".Interface.");

	if (p == NULL)
		return -1;

	if (atoi(p) >= IP_LAN_START_INSTANCE_NUM && atoi(p) <= IP_LAN_END_INSTANCE_NUM)
	{
		return 0; //don't support to set
	}
	else
	{
		if (atoi(value) == 1){
			ret = do_uci_set("network.wan.proto", "dhcp");
			if(ret)
			{
				return (-1);
			}
			else
			{
				ret = do_uci_commit("network");
				if(ret)
				{
					return (-1);
				}
				//ret = 1; //means need to reboot for taking effect
				doRestartNetwork();
			}
		}
	}

	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIItIt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIItIt_Enable, value);
	if(ret)
	{
		return -1;
	}*/
	char inf[32] = {0};
	a_infinfo infStatus;
	char *p = parseTemplate(path_name, ".Interface.");

	if (p == NULL)
		return -1;

	if (atoi(p) >= IP_LAN_START_INSTANCE_NUM && atoi(p) <= IP_LAN_END_INSTANCE_NUM)
	{
		memset(&infStatus, 0, sizeof(infStatus));
		getLanUbsInterfaceNameWithInstanceNum(p, inf);
		getInterfaceInfo(inf, &infStatus);
	}
	else
	{
		char wanmode[32] = {0};
		char wantype[32] = {0};
		getWanMode(wanmode);
		if (strcmp(wanmode, "pptp") == 0 || strcmp(wanmode, "l2tp") == 0)
			strcpy(wantype, "wan0");
		else
			strcpy(wantype, "wan");
		memset(&infStatus, 0, sizeof(infStatus));
		getInterfaceInfo(wantype, &infStatus);
	}

	if (infStatus.status == 1)
		strcpy(value, "1");
	else
		strcpy(value, "0");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIItIt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DIItIt_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIItIt_Status(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIItIt_Status, value);
	if(ret)
	{
		return -1;
	}*/
	char inf[32] = {0};
 	a_infinfo infStatus;
	char *p = parseTemplate(path_name, ".Interface.");

	if (p == NULL)
		return -1;

	if (atoi(p) >= IP_LAN_START_INSTANCE_NUM && atoi(p) <= IP_LAN_END_INSTANCE_NUM)
	{
		memset(&infStatus, 0, sizeof(infStatus));
		getLanUbsInterfaceNameWithInstanceNum(p, inf);
		getInterfaceInfo(inf, &infStatus);
	}
	else{
		char wanmode[32] = {0};
		char wantype[32] = {0};
		getWanMode(wanmode);
		if (strcmp(wanmode, "pptp") == 0 || strcmp(wanmode, "l2tp") == 0)
			strcpy(wantype, "wan0");
		else
			strcpy(wantype, "wan");
		memset(&infStatus, 0, sizeof(infStatus));
		getInterfaceInfo(wantype, &infStatus);
	}

	if (infStatus.status == 1)
 		strcpy(value, "Enabled");
 	else
		strcpy(value, "Disabled");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIItIt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIItIt_Alias, value);
	if(ret)
	{
		return -1;
	}*/
	ret = 1; //getting from tr.xml
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIItIt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (!isalpha(value[0]))
		return -2;
	
	if (strlen(value) > 64)
		return -2;
	
	/*ret = do_uci_set(DIItIt_Alias, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//set to tr.xml
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIItIt_IPAddress(char * path_name, char *value)
{
	int ret = 0;
	char is_send_notify[8]={0};
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	executeCMD("cat /var/is_send_notify", is_send_notify);
	tr_log(LOG_DEBUG,"is_send_notify=[%s]",is_send_notify);

	/*ret = do_uci_get(DIItIt_IPAddress, value);
	if(ret)
	{
		return -1;
	}*/
	char inf[32] = {0};
	a_infinfo infStatus;
	char *p = parseTemplate(path_name, ".Interface.");
	if( strcmp(is_send_notify,"1") != 0){//for runtime
		if (p == NULL)
			return -1;

		if (atoi(p) >= IP_LAN_START_INSTANCE_NUM && atoi(p) <= IP_LAN_END_INSTANCE_NUM)
		{
			memset(&infStatus, 0, sizeof(infStatus));
			getLanUbsInterfaceNameWithInstanceNum(p, inf);
			getInterfaceInfo(inf, &infStatus);
		}
		else{
			char wanmode[32] = {0};
			char wantype[32] = {0};
			getWanMode(wanmode);
			if (strcmp(wanmode, "pptp") == 0 || strcmp(wanmode, "l2tp") == 0)
				strcpy(wantype, "wan0");
			else
				strcpy(wantype, "wan");
			memset(&infStatus, 0, sizeof(infStatus));
			getInterfaceInfo(wantype, &infStatus);
		}

		if (infStatus.status == 1)
		{
			strcpy(value, infStatus.ipv4_address);
		}
	}
	else if (strcmp(is_send_notify,"1") == 0){//for send_notify
		char buff[32] = {0};
		if (atoi(p) >= IP_LAN_START_INSTANCE_NUM && atoi(p) <= IP_LAN_END_INSTANCE_NUM)
		{

			char ucipath[64] = {0};
			char ucipath1[64] = {0};
			char ucipath2[64] = {0};
			char name[64] = {0};
			char tmpvalue[64] = {0};

			getLanUbsInterfaceNameWithInstanceNum(p, name);
			getLanUciPathWithInstanceNum(p, ucipath);
			tr_log(LOG_DEBUG,"###############ucipath===[%s]",ucipath);

			//ucipath==>network.lan%d, name==>lan%d
			do_uci_get(ucipath, tmpvalue);
			//	if(ret)
			//	{
			//		addUciTopNode("network", name);
			//		ret = 0;
			//	}
			tr_log(LOG_DEBUG,"###############tmpvalue===[%s]",tmpvalue);
			sprintf(ucipath1, "%s.proto", ucipath);
			sprintf(ucipath2, "%s.ipaddr", ucipath);

			ret = do_uci_get(ucipath1, buff);
			if(ret)
			{
				strcpy(buff, "static"); //set to static anyway
				ret = 0;
			}
			if(strcmp(buff, "static") == 0)
			{
				ret = do_uci_get(ucipath2, value);
				if(ret)
				{
					return (-1);
				}
			}
		}
		else{
			ret = do_uci_get("network.wan.proto", buff);
			if(ret)
			{
				return -1;
			}
			if(strcmp(buff, "static") == 0)
			{
				ret = do_uci_get("network.wan.ipaddr", value);
				if(ret)
				{
					return (-1);
				}
			}
			else
			{
				char wanmode[32] = {0};
				char wantype[32] = {0};
				getWanMode(wanmode);
				if (strcmp(wanmode, "pptp") == 0 || strcmp(wanmode, "l2tp") == 0)
					strcpy(wantype, "wan0");
				else
					strcpy(wantype, "wan");
				memset(&infStatus, 0, sizeof(infStatus));
				getInterfaceInfo(wantype, &infStatus);
	
				if (infStatus.status == 1)
				{
					strcpy(value, infStatus.ipv4_address);
				}
			}
		}
		system("echo 0 >/var/is_send_notify");
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIItIt_IPAddress(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	char buff[32] = {0};
	char *p = parseTemplate(path_name, ".Interface.");

	if (p == NULL)
		return -1;

	if (strlen(value) > 15)
		return -2;

	if (isValidIP(value) == 0)
		return -2;

	if (atoi(p) >= IP_LAN_START_INSTANCE_NUM && atoi(p) <= IP_LAN_END_INSTANCE_NUM)
	{
 		char ucipath[64] = {0};
		char ucipath1[64] = {0};
		char ucipath2[64] = {0};
		char name[64] = {0};
		char tmpvalue[64] = {0};

		getLanUbsInterfaceNameWithInstanceNum(p, name);
		getLanUciPathWithInstanceNum(p, ucipath);

		//ucipath==>network.lan%d, name==>lan%d
		ret = do_uci_get(ucipath, tmpvalue);
		if(ret)
		{
			addUciTopNode("network", name);
			ret = 0;
		}

		sprintf(ucipath1, "%s.proto", ucipath);
		sprintf(ucipath2, "%s.ipaddr", ucipath);

		ret = do_uci_get(ucipath1, buff);
		if(ret)
		{
			strcpy(buff, "static"); //set to static anyway
			ret = 0;
		}
		if(strcmp(buff, "static") == 0)
		{
			ret = do_uci_set(ucipath2, value);
			if(ret)
			{
				return (-1);
			}
			else
			{
				ret = do_uci_commit("network");
				if(ret)
				{
					return (-1);
				}
				//ret = 1; //means need to reboot for taking effect
				doRestartLanNetwork();
			}	
		}
	}
	else{
		ret = do_uci_get("network.wan.proto", buff);
		if(ret)
		{
			return -1;
		}
		if(strcmp(buff, "static") == 0)
		{
			ret = do_uci_set("network.wan.ipaddr", value);
			if(ret)
			{
				return (-1);
			}
			else
			{
				ret = do_uci_commit("network");
				if(ret)
				{
					return (-1);
				}
				//ret = 1; //means need to reboot for taking effect
				doRestartNetwork();
			}	
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIItIt_SubnetMask(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIItIt_SubnetMask, value);
	if(ret)
	{
		return -1;
	}*/
	char *p = parseTemplate(path_name, ".Interface.");

	if (p == NULL)
		return -1;

	if (atoi(p) >= IP_LAN_START_INSTANCE_NUM && atoi(p) <= IP_LAN_END_INSTANCE_NUM)
	{
		char ucipath[64] = {0};
		getLanUciPathWithInstanceNum(p, ucipath);

		sprintf(ucipath, "%s.netmask", ucipath);

		ret = do_uci_get(ucipath, value);
		if(ret)
		{
			strcpy(value, "");
			ret = 0;
		}
	}
	else if(atoi(p) == IP_WAN_INSTANCE_INDEX)
	{
		char inf[32] = {0};
		getWanHigherLayerInterface(inf);
		getNetmask(inf, value);
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIItIt_SubnetMask(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DIItIt_Enable_2237, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char buff[32] = {0};
	char *p = parseTemplate(path_name, ".Interface.");

	if (p == NULL)
		return -1;

	if (strlen(value) > 15)
		return -2;

	if (isValidNetmask(value) == 0)
		return -2;

	if (atoi(p) >= IP_LAN_START_INSTANCE_NUM && atoi(p) <= IP_LAN_END_INSTANCE_NUM)
	{
		char ucipath[64] = {0};
		char ucipath1[64] = {0};
		char ucipath2[64] = {0};
		char name[64] = {0};
		char tmpvalue[64] = {0};

		getLanUbsInterfaceNameWithInstanceNum(p, name);
		getLanUciPathWithInstanceNum(p, ucipath);

		//ucipath==>network.lan%d, name==>lan%d
		ret = do_uci_get(ucipath, tmpvalue);
		if(ret)
		{
			addUciTopNode("network", name);
			ret = 0;
		}

		sprintf(ucipath1, "%s.proto", ucipath);
		sprintf(ucipath2, "%s.netmask", ucipath);

		ret = do_uci_get(ucipath1, buff);
		if(ret)
		{
			strcpy(buff, "static"); //set to static anyway
			ret = 0;
		}
		if(strcmp(buff, "static") == 0)
		{
			ret = do_uci_set(ucipath2, value);
			if(ret)
			{
				return (-1);
			}
			else
			{
				ret = do_uci_commit("network");
				if(ret)
				{
					return (-1);
				}
				//ret = 1; //means need to reboot for taking effect
				doRestartLanNetwork();
			}	
		}
	}
	else{
		ret = do_uci_get("network.wan.proto", buff);
		if(ret)
		{
			return -1;
		}
		if(strcmp(buff, "static") == 0)
		{
			ret = do_uci_set("network.wan.netmask", value);
			if(ret)
			{
				return (-1);
			}
			else
			{
				ret = do_uci_commit("network");
				if(ret)
				{
					return (-1);
				}
				//ret = 1; //means need to reboot for taking effect
				doRestartNetwork();
			}	
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}

int get_DIItIt_AddressingType(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIItIt_AddressingType, value);
	if(ret)
	{
		return -1;
	}*/
	char buff[32] = {0};
	char *p = parseTemplate(path_name, ".Interface.");

	if (p == NULL)
		return -1;

	if (atoi(p) >= IP_LAN_START_INSTANCE_NUM && atoi(p) <= IP_LAN_END_INSTANCE_NUM)
	{
		char ucipath[64] = {0};
		getLanUciPathWithInstanceNum(p, ucipath);

		sprintf(ucipath, "%s.proto", ucipath);

		ret = do_uci_get(ucipath, buff);
		if(ret)
		{
			strcpy(buff, "static"); //set to static anyway
			ret = 0;
		}
		if(strcmp(buff, "static") == 0)
			strcpy(value, "Static");
		else
			strcpy(value, "DHCP");
	}
	else{
		a_infinfo wanStatus;
		memset(&wanStatus, 0, sizeof(wanStatus));
		getInterfaceInfo("wan0", &wanStatus);
		if(wanStatus.status == 1){ //for pptp and l2tp
			strcpy(value, "IPCP");
		}
		else{
			memset(&wanStatus, 0, sizeof(wanStatus));
			getInterfaceInfo("wan", &wanStatus);
			if(wanStatus.status == 1){
				if(strcmp(wanStatus.proto, "dhcp") == 0){
					strcpy(value, "DHCP");
				}else if(strcmp(wanStatus.proto, "pppoe") == 0){
					strcpy(value, "IPCP");
				}else
					strcpy(value, "Static");
			}
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIItIt_Enable_2237(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIItIt_Enable_2237, value);
	if(ret)
	{
		return -1;
	}*/
	int ipv6capable = 0;
	char *p = parseTemplate(path_name, ".Interface.");

	if (p == NULL)
		return -1;

	if (atoi(p) >= IP_LAN_START_INSTANCE_NUM && atoi(p) <= IP_LAN_END_INSTANCE_NUM)
	{
		ipv6capable = getLanIPv6CapableWithInstanceNum(p);
	}
	else
		ipv6capable = 1;

	if (ipv6capable == 0)
		strcpy(value, "0");
	else
		sprintf(value, "%d", getIPv6Enable());
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIItIt_Enable_2237(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DIItIt_Enable_2237, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIItIt_Status_2239(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIItIt_Status_2239, value);
	if(ret)
	{
		return -1;
	}*/
	char inf[32] = {0};
	a_infinfo wanStatus;
	int ipv6capable = 0;
	char *p = parseTemplate(path_name, ".Interface.");

	if (p == NULL)
		return -1;
	
	if (atoi(p) >= IP_LAN_START_INSTANCE_NUM && atoi(p) <= IP_LAN_END_INSTANCE_NUM)
	{
		ipv6capable = getLanIPv6CapableWithInstanceNum(p);
		getLanUbsInterfaceNameWithInstanceNum(p, inf);
	}
	else
	{
		strcpy(inf, "wan6");
		ipv6capable = 1;
	}

	memset(&wanStatus, 0, sizeof(wanStatus));
	getInterfaceInfo(inf, &wanStatus);
	if (strcmp(wanStatus.ipv6_address, "") == 0)
		strcpy(value, "Disabled");
	else
		strcpy(value, "Enabled");

	if ((ipv6capable == 1) && (strcmp(wanStatus.ipv6_address, "") == 0))
	{
		char active[32] = {0};
		char ipv6addr[128] = {0};
		ret = do_uci_get("ipv6.@global[0].connection_type", active);
		if (ret){
			strcpy(active, "0");
			ret = 0;
		}
		if (atoi(active) != 0){ //for LAN with active and static ipv6 mode, 'ubus call' can't get ipv6 info
			if (atoi(active) == 1) //active mode
				ret = do_uci_get("ipv6.@native[0].ipv6_addr", ipv6addr);
			else //static
				ret = do_uci_get("ipv6.@static[0].lanipv6_addr", ipv6addr);
			if (ret){
				strcpy(ipv6addr, "");
				ret = 0;
			}
			if (strcmp(ipv6addr, "") == 0)
				strcpy(value, "Disabled");
			else
				strcpy(value, "Enabled");
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIItIt_IPAddressStatus(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIItIt_IPAddressStatus, value);
	if(ret)
	{
		return -1;
	}*/
	char inf[32] = {0};
	a_infinfo wanStatus;
	int ipv6capable = 0;
	char *p = parseTemplate(path_name, ".Interface.");

	if (p == NULL)
		return -1;
	
	if (atoi(p) >= IP_LAN_START_INSTANCE_NUM && atoi(p) <= IP_LAN_END_INSTANCE_NUM)
	{
		ipv6capable = getLanIPv6CapableWithInstanceNum(p);
		getLanUbsInterfaceNameWithInstanceNum(p, inf);
	}
	else
	{
		strcpy(inf, "wan6");
		ipv6capable = 1;
	}

	memset(&wanStatus, 0, sizeof(wanStatus));
	getInterfaceInfo(inf, &wanStatus);
	if (strcmp(wanStatus.ipv6_address, "") == 0)
		strcpy(value, "Invalid");
	else
		strcpy(value, "Preferred");

	if ((ipv6capable == 1) && (strcmp(wanStatus.ipv6_address, "") == 0))
	{
		char active[32] = {0};
		char ipv6addr[128] = {0};
		ret = do_uci_get("ipv6.@global[0].connection_type", active);
		if (ret){
			strcpy(active, "0");
			ret = 0;
		}
		if (atoi(active) != 0){ //for LAN with active and static ipv6 mode, 'ubus call' can't get ipv6 info
			if (atoi(active) == 1) //active mode
				ret = do_uci_get("ipv6.@native[0].ipv6_addr", ipv6addr);
			else //static
				ret = do_uci_get("ipv6.@static[0].lanipv6_addr", ipv6addr);
			if (ret){
				strcpy(ipv6addr, "");
				ret = 0;
			}
			if (strcmp(ipv6addr, "") == 0)
				strcpy(value, "Invalid");
			else
				strcpy(value, "Preferred");
		}
	}

	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIItIt_Alias_2241(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIItIt_Alias_2241, value);
	if(ret)
	{
		return -1;
	}*/
	ret = 1; //getting from tr.xml
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIItIt_Alias_2241(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (!isalpha(value[0]))
		return -2;
	
	if (strlen(value) > 64)
		return -2;
	
	/*ret = do_uci_set(DIItIt_Alias_2241, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//set to tr.xml
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIItIt_IPAddress_2242(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIItIt_IPAddress_2242, value);
	if(ret)
	{
		return -1;
	}*/
	char inf[32] = {0};
	a_infinfo wanStatus;
	int ipv6capable = 0;
	char *p = parseTemplate(path_name, ".Interface.");

	if (p == NULL)
		return -1;
	
	if (atoi(p) >= IP_LAN_START_INSTANCE_NUM && atoi(p) <= IP_LAN_END_INSTANCE_NUM)
	{
		ipv6capable = getLanIPv6CapableWithInstanceNum(p);
		getLanUbsInterfaceNameWithInstanceNum(p, inf);
	}
	else
	{
		strcpy(inf, "wan6");
		ipv6capable = 1;
	}

	memset(&wanStatus, 0, sizeof(wanStatus));
	getInterfaceInfo(inf, &wanStatus);
	strcpy(value, wanStatus.ipv6_address);

	if ((ipv6capable == 1) && (strcmp(wanStatus.ipv6_address, "") == 0))
	{
		char active[32] = {0};
		char ipv6addr[128] = {0};
		ret = do_uci_get("ipv6.@global[0].connection_type", active);
		if (ret){
			strcpy(active, "0");
			ret = 0;
		}
		if (atoi(active) != 0){ //for LAN with active and static ipv6 mode, 'ubus call' can't get ipv6 info
			if (atoi(active) == 1) //active mode
				ret = do_uci_get("ipv6.@native[0].ipv6_addr", value);
			else //static
				ret = do_uci_get("ipv6.@static[0].lanipv6_addr", value);
			if (ret){
				strcpy(value, "");
				ret = 0;
			}
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIItIt_IPAddress_2242(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char inf[32] = {0};
	a_infinfo wanStatus;
	char inf_name_path[64] = {0};
	int ipv6capable = 0;
	char *p = parseTemplate(path_name, ".Interface.");

	if (p == NULL)
		return -1;

	if (strlen(value) > 39)
		return -2;
	
	if (atoi(p) >= IP_LAN_START_INSTANCE_NUM && atoi(p) <= IP_LAN_END_INSTANCE_NUM)
	{
		ipv6capable = getLanIPv6CapableWithInstanceNum(p);
		if (ipv6capable == 1)
			strcpy(inf_name_path, "ipv6.@static[0].lanipv6_addr");
		else
			return (-1);
	}else{
		strcpy(inf_name_path, "ipv6.@static[0].wanipv6_addr");
	}

	strcpy(inf, "wan6"); //all of the lan and wan MUST check the wan6 status
	memset(&wanStatus, 0, sizeof(wanStatus));
	getInterfaceInfo(inf, &wanStatus);
	if (strcmp(wanStatus.proto, "static") != 0)
		return -1;
	
	ret = do_uci_set(inf_name_path, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("ipv6");
		if(ret)
		{
			return (-1);
		}
		//ret = 1; //means need to reboot for taking effect
		doRestartNetwork();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIItIt_Origin(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char connection_type[32] = {0};
	char *p = parseTemplate(path_name, ".Interface.");

	if (p == NULL)
		return -1;

	ret = do_uci_get("ipv6.@global[0].connection_type", connection_type);
	if(ret)
	{
		return -1;
	}

	if (atoi(connection_type) == 5){ //static
		strcpy(value, "Static");
	}
	else if (atoi(connection_type) == 1){ //Native
		if (atoi(p) == 1)
			strcpy(value, "AutoConfigured"); //for lan
		else
			strcpy(value, "DHCPv6"); //for wan
	}
	else
		strcpy(value, "WellKnown");
	
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIItIt_Prefix(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIItIt_Prefix, value);
	if(ret)
	{
		return -1;
	}*/
	char native[32] = {0};
	char dhcp_pd[32] = {0};
	char inf[32] = {0};
	int ipv6capable = 0;
	a_infinfo wanStatus;
	char *p = parseTemplate(path_name, ".Interface.");

	if (p == NULL)
		return -1;

	if (atoi(p) >= IP_LAN_START_INSTANCE_NUM && atoi(p) <= IP_LAN_END_INSTANCE_NUM)
	{
		ipv6capable = getLanIPv6CapableWithInstanceNum(p);
		getLanUbsInterfaceNameWithInstanceNum(p, inf);
	}
	else
	{
		strcpy(inf, "wan6");
		ipv6capable = 1;
	}

	memset(&wanStatus, 0, sizeof(wanStatus));
	getInterfaceInfo(inf, &wanStatus);
	if (strcmp(wanStatus.ipv6_prefix_address, "") != 0)
		sprintf(value, "Device.IP.Interface.%s.IPv6Prefix.1.Prefix", p);
	else
		strcpy(value, "");

	if (strcmp(value, "") == 0 && ipv6capable == 1){ //double check
		ret = do_uci_get("ipv6.@global[0].connection_type", native);
		if(ret)
		{
			return -1;
		}

		ret = do_uci_get("ipv6.@native[0].dhcp_pd", dhcp_pd);
		if(ret)
		{
			return -1;
		}

		if (atoi(native) == 1 && atoi(dhcp_pd) == 1) //native mode(dhcpv6 client and enable IA_PD)
			sprintf(value, "Device.IP.Interface.%s.IPv6Prefix.1.Prefix", p);
		else if (atoi(native) == 5 && atoi(p) == 1) //static mode
			sprintf(value, "Device.IP.Interface.%s.IPv6Prefix.1.Prefix", p);
		else
			strcpy(value, "");
	}
	
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIItIt_PreferredLifetime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIItIt_PreferredLifetime, value);
	if(ret)
	{
		return -1;
	}*/
	char native[32] = {0};
	char lifetime[128] = {0};
	long int lifetime2 = 0;
	char *ptr;
	char *p = parseTemplate(path_name, ".Interface.");

	if (p == NULL)
		return -1;

	//only network.lan and network.wan support ipv6, network.lan1 ~ network.lan3 don't support
	if (atoi(p) >= IP_LAN_START_INSTANCE_NUM && atoi(p) <= IP_LAN_END_INSTANCE_NUM){
		int ipv6capable = 0;
		ipv6capable = getLanIPv6CapableWithInstanceNum(p);
		if (ipv6capable != 1)
			return 0;
	}

	ret = do_uci_get("ipv6.@global[0].connection_type", native);
	if(ret)
	{
		strcpy(native, "0");
		ret = 0;
	}
	if (atoi(native) != 0)
	{
		if (atoi(native) == 1)
		{
			if(atoi(p) == 5)
			{
				ret = do_uci_get("ipv6.@wan_addr[0].wan_ipv6addres_tr_preferlifetime", value);
			}
			else if(atoi(p) == 1)
			{
				ret = do_uci_get("ipv6.@native[0].pd_preferred_tr_lifetime", value);
			}
		}
		else
		{
			if(atoi(p) == 5)
			{
				ret = do_uci_get("ipv6.@static[0].wan_tr_prefer_lifetime", value);
			}
			else if(atoi(p) == 1)
			{
				ret = do_uci_get("ipv6.@static[0].lan_tr_prefer_lifetime", value);
			}
		}

		if(ret)
		{
			strcpy(value, "0001-01-01T00:00:00Z");
			ret = 0;
		}
	}
	else
		strcpy(value, "0001-01-01T00:00:00Z");

	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIItIt_PreferredLifetime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char *p = parseTemplate(path_name, ".Interface.");

	if (p == NULL)
		return -1;

	//only network.lan and network.wan support ipv6, network.lan1 ~ network.lan3 don't support
	if (atoi(p) >= IP_LAN_START_INSTANCE_NUM && atoi(p) <= IP_LAN_END_INSTANCE_NUM){
		int ipv6capable = 0;
		ipv6capable = getLanIPv6CapableWithInstanceNum(p);
		if (ipv6capable != 1)
			return 0;
	}

	char native[32] = {0};
	ret = do_uci_get("ipv6.@global[0].connection_type", native);
	if(ret)
	{
		strcpy(native, "0");
		ret = 0;
	}

	if (atoi(native) != 5)// only for static mode
		return -1;
	
	long int currenttimesec = 0;
	long int preferlifetime = 0;
	char tmp[128] = {0};
	currenttimesec = getLocalTimeWithSeconds();
	preferlifetime = changedDateTimeToSeconds(value);
	sprintf(tmp, "%ld", preferlifetime-currenttimesec);

	if(atoi(p) == 5)
	{
		ret = do_uci_set("ipv6.@static[0].wan_tr_prefer_lifetime", value);
		ret = do_uci_set("ipv6.@static[0].wan_preferred_lifetime", tmp);
	}
	else if(atoi(p) == 1)
	{
		ret = do_uci_set("ipv6.@static[0].lan_tr_prefer_lifetime", value);
		ret = do_uci_set("ipv6.@static[0].pd_preferred_lifetime", tmp);
	}

	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("ipv6");
		if(ret)
		{
			return (-1);
		}
		//ret = 1; //means need to reboot for taking effect
		doRestartNetwork();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIItIt_ValidLifetime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIItIt_ValidLifetime, value);
	if(ret)
	{
		return -1;
	}*/
	char native[32] = {0};
	char lifetime[128] = {0};
	long int lifetime2 = 0;
	char *ptr;
	char *p = parseTemplate(path_name, ".Interface.");

	if (p == NULL)
		return -1;

	//only network.lan and network.wan support ipv6, network.lan1 ~ network.lan3 don't support
	if (atoi(p) >= IP_LAN_START_INSTANCE_NUM && atoi(p) <= IP_LAN_END_INSTANCE_NUM){
		int ipv6capable = 0;
		ipv6capable = getLanIPv6CapableWithInstanceNum(p);
		if (ipv6capable != 1)
			return 0;
	}

	ret = do_uci_get("ipv6.@global[0].connection_type", native);
	if(ret)
	{
		strcpy(native, "0");
		ret = 0;
	}
	if (atoi(native) != 0)
	{
		if (atoi(native) == 1)
		{
			if(atoi(p) == 5)
			{
				ret = do_uci_get("ipv6.@wan_addr[0].wan_ipv6addres_tr_vaillifetime", value);
			}
			else if(atoi(p) == 1)
			{
				ret = do_uci_get("ipv6.@native[0].pd_valid_tr_lifetime", value);
			}
		}
		else
		{
			if(atoi(p) == 5)
			{
				ret = do_uci_get("ipv6.@static[0].wan_tr_valid_lifetime", value);
			}
			else if(atoi(p) == 1)
			{
				ret = do_uci_get("ipv6.@static[0].lan_tr_valid_lifetime", value);
			}
		}

		if(ret)
		{
			strcpy(value, "0001-01-01T00:00:00Z");
			ret = 0;
		}
	}
	else
		strcpy(value, "0001-01-01T00:00:00Z");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIItIt_ValidLifetime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char *p = parseTemplate(path_name, ".Interface.");

	if (p == NULL)
		return -1;

	//only network.lan and network.wan support ipv6, network.lan1 ~ network.lan3 don't support
	if (atoi(p) >= IP_LAN_START_INSTANCE_NUM && atoi(p) <= IP_LAN_END_INSTANCE_NUM){
		int ipv6capable = 0;
		ipv6capable = getLanIPv6CapableWithInstanceNum(p);
		if (ipv6capable != 1)
			return 0;
	}

	char native[32] = {0};

	ret = do_uci_get("ipv6.@global[0].connection_type", native);
	if(ret)
	{
		strcpy(native, "0");
		ret = 0;
	}

	if (atoi(native) != 5)// only for static mode
		return -1;

	long int currenttimesec = 0;
	long int preferlifetime = 0;
	char tmp[128] = {0};
	currenttimesec = getLocalTimeWithSeconds();
	preferlifetime = changedDateTimeToSeconds(value);
	sprintf(tmp, "%ld", preferlifetime-currenttimesec);

	if(atoi(p) == 5)
	{
		ret = do_uci_set("ipv6.@static[0].wan_tr_valid_lifetime", value);
		ret = do_uci_set("ipv6.@static[0].wan_valid_lifetime", tmp);
	}
	else if(atoi(p) == 1)
	{
		ret = do_uci_set("ipv6.@static[0].lan_tr_valid_lifetime", value);
		ret = do_uci_set("ipv6.@static[0].pd_valid_lifetime", tmp);
	}

	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("ipv6");
		if(ret)
		{
			return (-1);
		}
		//ret = 1; //means need to reboot for taking effect
		doRestartNetwork();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIItIt_Anycast(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIItIt_Anycast, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "0"); //always 0
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIItIt_Enable_2248(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIItIt_Enable_2248, value);
	if(ret)
	{
		return -1;
	}*/
	int ipv6capable = 0;
	char *p = parseTemplate(path_name, ".Interface.");

	if (p == NULL)
		return -1;

	if (atoi(p) >= IP_LAN_START_INSTANCE_NUM && atoi(p) <= IP_LAN_END_INSTANCE_NUM)
	{
		ipv6capable = getLanIPv6CapableWithInstanceNum(p);
	}
	else
		ipv6capable = 1;

	if (ipv6capable == 0)
		strcpy(value, "0");
	else
		sprintf(value, "%d", getIPv6Enable());
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIItIt_Enable_2248(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DIItIt_Enable_2248, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIItIt_Status_2250(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIItIt_Status_2250, value);
	if(ret)
	{
		return -1;
	}*/
	char inf[32] = {0};
	char native[32] = {0};
	int ipv6capable = 0;
	a_infinfo wanStatus;
	char *p = parseTemplate(path_name, ".Interface.");

	if (p == NULL)
		return -1;
	
	if (atoi(p) >= IP_LAN_START_INSTANCE_NUM && atoi(p) <= IP_LAN_END_INSTANCE_NUM)
	{
		ipv6capable = getLanIPv6CapableWithInstanceNum(p);
		getLanUbsInterfaceNameWithInstanceNum(p, inf);
	}
	else
	{
		strcpy(inf, "wan6");
		ipv6capable = 1;
	}

	memset(&wanStatus, 0, sizeof(wanStatus));
	getInterfaceInfo(inf, &wanStatus);
	if (strcmp(wanStatus.ipv6_prefix_address, "") == 0)
		strcpy(value, "Disabled");
	else
		strcpy(value, "Enabled");

	if (strcmp(value, "Disabled") == 0 && ipv6capable == 1){ //double check
		ret = do_uci_get("ipv6.@global[0].connection_type", native);
		if(ret)
		{
			strcpy(native, "0");
			ret = 0;
		}
		if (atoi(native) != 0){
			char prefix[128] = {0};
			if (atoi(native) == 1)
				ret = do_uci_get("ipv6.@native[0].ipv6_prefix", prefix);
			else
				ret = do_uci_get("ipv6.@static[0].lanipv6_prefix", prefix);
			if(ret)
			{
				ret = 0;
			}
			if (strcmp(prefix, "") != 0)
				strcpy(value, "Enabled");
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIItIt_PrefixStatus(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIItIt_PrefixStatus, value);
	if(ret)
	{
		return -1;
	}*/
	char inf[32] = {0};
	char native[32] = {0};
	int ipv6capable = 0;
	a_infinfo wanStatus;
	char *p = parseTemplate(path_name, ".Interface.");

	if (p == NULL)
		return -1;
	
	if (atoi(p) >= IP_LAN_START_INSTANCE_NUM && atoi(p) <= IP_LAN_END_INSTANCE_NUM)
	{
		ipv6capable = getLanIPv6CapableWithInstanceNum(p);
		getLanUbsInterfaceNameWithInstanceNum(p, inf);
	}
	else
	{
		strcpy(inf, "wan6");
		ipv6capable = 1;
	}

	memset(&wanStatus, 0, sizeof(wanStatus));
	getInterfaceInfo(inf, &wanStatus);
	if (strcmp(wanStatus.ipv6_prefix_address, "") == 0)
		strcpy(value, "Invalid");
	else
		strcpy(value, "Preferred");

	if (strcmp(value, "Invalid") == 0 && ipv6capable == 1){ //double check
		ret = do_uci_get("ipv6.@global[0].connection_type", native);
		if(ret)
		{
			strcpy(native, "0");
			ret = 0;
		}
		if (atoi(native) != 0){
			char prefix[128] = {0};
			if (atoi(native) == 1)
				ret = do_uci_get("ipv6.@native[0].ipv6_prefix", prefix);
			else
				ret = do_uci_get("ipv6.@static[0].lanipv6_prefix", prefix);
			if(ret)
			{
				ret = 0;
			}
			if (strcmp(prefix, "") != 0)
				strcpy(value, "Preferred");
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIItIt_Alias_2252(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIItIt_Alias_2252, value);
	if(ret)
	{
		return -1;
	}*/
	ret = 1; //getting from tr.xml
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIItIt_Alias_2252(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (!isalpha(value[0]))
		return -2;
	
	if (strlen(value) > 64)
		return -2;
	
	/*ret = do_uci_set(DIItIt_Alias_2252, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//set to tr.xml
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIItIt_Prefix_2254(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIItIt_Prefix_2254, value);
	if(ret)
	{
		return -1;
	}*/
	char inf[32] = {0};
	char native[32] = {0};
	int ipv6capable = 0;
	a_infinfo wanStatus;
	char *p = parseTemplate(path_name, ".Interface.");

	if (p == NULL)
		return -1;
	
	if (atoi(p) >= IP_LAN_START_INSTANCE_NUM && atoi(p) <= IP_LAN_END_INSTANCE_NUM)
	{
		ipv6capable = getLanIPv6CapableWithInstanceNum(p);
		getLanUbsInterfaceNameWithInstanceNum(p, inf);
	}
	else
	{
		strcpy(inf, "wan6");
		ipv6capable = 1;
	}

	memset(&wanStatus, 0, sizeof(wanStatus));
	getInterfaceInfo(inf, &wanStatus);
	sprintf(value, "%s/%s", wanStatus.ipv6_prefix_address, wanStatus.ipv6_prefix_mask);

	if (strcmp(wanStatus.ipv6_prefix_address, "") == 0 && ipv6capable == 1){ //double check
		ret = do_uci_get("ipv6.@global[0].connection_type", native);
		if(ret)
		{
			strcpy(native, "0");
			ret = 0;
		}
		if (atoi(native) != 0){
			char prefix[128] = {0};
			char prefix_len[32] = {0};
			if (atoi(native) == 1){
				ret = do_uci_get("ipv6.@native[0].ipv6_prefix", prefix);
				ret = do_uci_get("ipv6.@native[0].prefix_len", prefix_len);
			}
			else{
				ret = do_uci_get("ipv6.@static[0].lanipv6_prefix", prefix);
				ret = do_uci_get("ipv6.@static[0].prefix_len", prefix_len);
			}

			
			if(ret)
			{
				ret = 0;
			}
			if (strcmp(prefix, "") != 0){
				if (strcmp(prefix_len, "") != 0)
					sprintf(value, "%s/%s", prefix, prefix_len);
				else
					sprintf(value, "%s/64", prefix);
			}
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIItIt_Prefix_2254(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char inf[32] = {0};
	a_infinfo wanStatus;
	int ipv6capable = 0;
	char inf_name_path[64] = {0};
	char *p = parseTemplate(path_name, ".Interface.");

	if (p == NULL)
		return -1;

	if (strlen(value) > 39)
		return -2;
	
	if(atoi(p) == 1){
		ipv6capable = getLanIPv6CapableWithInstanceNum(p);
		if (ipv6capable == 1)
			strcpy(inf_name_path, "ipv6.@static[0].lanipv6_prefix");
		else{
			strcpy(value, "");
			return 0;
		}
	}else{
		strcpy(value, ""); //wan no prefix
		return 0;
	}

	strcpy(inf, "wan6"); //all of the lan and wan MUST check the wan6 status

	memset(&wanStatus, 0, sizeof(wanStatus));
	getInterfaceInfo(inf, &wanStatus);
	if (strcmp(wanStatus.proto, "static") != 0)
		return -1;
	
	ret = do_uci_set(inf_name_path, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("ipv6");
		if(ret)
		{
			return (-1);
		}
		//ret = 1; //means need to reboot for taking effect
		doRestartNetwork();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIItIt_Origin_2256(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIItIt_Origin_2256, value);
	if(ret)
	{
		return -1;
	}*/
	char connection_type[32] = {0};
	char dhcp_pd[32] = {0};
	char *p = parseTemplate(path_name, ".Interface.");

	if (p == NULL)
		return -1;

	ret = do_uci_get("ipv6.@global[0].connection_type", connection_type);
	if(ret)
	{
		return -1;
	}

	ret = do_uci_get("ipv6.@native[0].dhcp_pd", dhcp_pd);
	if(ret)
	{
		return -1;
	}

	if (atoi(connection_type) == 5){ //static
		strcpy(value, "Static");
	}
	else if (atoi(connection_type) == 1){ //Native
		if (atoi(dhcp_pd) == 1)
			strcpy(value, "PrefixDelegation");
		else
			strcpy(value, "AutoConfigured"); //for lan
	}
	else
		strcpy(value, "WellKnown");
	
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIItIt_StaticType(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIItIt_StaticType, value);
	if(ret)
	{
		return -1;
	}*/
	char connection_type[32] = {0};
	char dhcp_pd[32] = {0};
	char *p = parseTemplate(path_name, ".Interface.");

	if (p == NULL)
		return -1;

	ret = do_uci_get("ipv6.@global[0].connection_type", connection_type);
	if(ret)
	{
		return -1;
	}

	ret = do_uci_get("ipv6.@native[0].dhcp_pd", dhcp_pd);
	if(ret)
	{
		return -1;
	}

	if (atoi(connection_type) == 5){ //static
		strcpy(value, "Static");
	}
	else if (atoi(connection_type) == 1 && atoi(dhcp_pd) == 1)
		strcpy(value, "PrefixDelegation");
	else
		strcpy(value, "Inapplicable");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIItIt_StaticType(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DIItIt_StaticType, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIItIt_ParentPrefix(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIItIt_ParentPrefix, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, ""); //always null
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIItIt_ParentPrefix(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DIItIt_ParentPrefix, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIItIt_ChildPrefixBits(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIItIt_ChildPrefixBits, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, ""); //always null
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIItIt_ChildPrefixBits(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DIItIt_ChildPrefixBits, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIItIt_OnLink(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIItIt_OnLink, value);
	if(ret)
	{
		return -1;
	}*/
	char *p = parseTemplate(path_name, ".Interface.");

	if (p == NULL)
		return -1;

	if (atoi(p) == IP_WAN_INSTANCE_INDEX){ //only check lan
		return 0; 
	}

	ret = do_uci_get("radvd.@prefix[0].AdvOnLink", value);
	if(ret)
	{
		strcpy(value, "1");
		ret = 0;
	}
	
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIItIt_OnLink(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char *p = parseTemplate(path_name, ".Interface.");

	if (p == NULL)
		return -1;

	if (atoi(p) == IP_WAN_INSTANCE_INDEX){ //only check lan
		return 0; 
	}
	
	ret = do_uci_set("radvd.@prefix[0].AdvOnLink", value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("radvd");
		if(ret)
		{
			return (-1);
		}
		//ret = 1; //means need to reboot for taking effect
		doRadvdRestart();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIItIt_Autonomous(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIItIt_Autonomous, value);
	if(ret)
	{
		return -1;
	}*/
	char *p = parseTemplate(path_name, ".Interface.");

	if (p == NULL)
		return -1;

	if (atoi(p) == IP_WAN_INSTANCE_INDEX){ //only check lan
		return 0; 
	}

	ret = do_uci_get("radvd.@prefix[0].AdvAutonomous", value);
	if(ret)
	{
		strcpy(value, "1");
		ret = 0;
	}
	
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIItIt_Autonomous(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char *p = parseTemplate(path_name, ".Interface.");

	if (p == NULL)
		return -1;

	if (atoi(p) == IP_WAN_INSTANCE_INDEX){ //only check lan
		return 0; 
	}
	
	ret = do_uci_set("radvd.@prefix[0].AdvAutonomous", value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("radvd");
		if(ret)
		{
			return (-1);
		}
		//ret = 1; //means need to reboot for taking effect
		doRadvdRestart();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIItIt_PreferredLifetime_2267(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIItIt_PreferredLifetime_2267, value);
	if(ret)
	{
		return -1;
	}*/

	char *p = parseTemplate(path_name, ".Interface.");

	if (p == NULL)
		return -1;

	//only network.lan support IPv6Prefix, network.lan1 ~ network.lan3 and network.wan don't support
	if (atoi(p) == IP_WAN_INSTANCE_INDEX)
	{
		return 0;
	}

	char native[32] = {0};
	ret = do_uci_get("ipv6.@global[0].connection_type", native);
	if(ret)
	{
		strcpy(native, "0");
		ret = 0;
	}
	if (atoi(native) != 0)
	{
		if (atoi(native) == 1)
			ret = do_uci_get("ipv6.@native[0].pd_preferred_tr_lifetime", value);
		else
			ret = do_uci_get("ipv6.@static[0].lan_tr_prefer_lifetime", value);

		if(ret)
		{
			strcpy(value, "0001-01-01T00:00:00Z");
			ret = 0;
		}
	}
	else
		strcpy(value, "0001-01-01T00:00:00Z");
	
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIItIt_PreferredLifetime_2267(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	char *p = parseTemplate(path_name, ".Interface.");

	if (p == NULL)
		return -1;

	//only network.lan support IPv6Prefix, network.lan1 ~ network.lan3 and network.wan don't support
	if (atoi(p) == IP_WAN_INSTANCE_INDEX)
	{
		return 0;
	}

	char native[32] = {0};
	ret = do_uci_get("ipv6.@global[0].connection_type", native);
	if(ret)
	{
		strcpy(native, "0");
		ret = 0;
	}

	if (atoi(native) != 5)// only for static mode
		return -1;

	long int currenttimesec = 0;
	long int preferlifetime = 0;
	char tmp[128] = {0};
	currenttimesec = getLocalTimeWithSeconds();
	preferlifetime = changedDateTimeToSeconds(value);
	sprintf(tmp, "%ld", preferlifetime-currenttimesec);

	ret = do_uci_set("ipv6.@static[0].lan_tr_prefer_lifetime", value);
	ret = do_uci_set("ipv6.@static[0].pd_preferred_lifetime", tmp);
	
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("ipv6");
		if(ret)
		{
			return (-1);
		}
		//ret = 1; //means need to reboot for taking effect
		doRestartNetwork();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIItIt_ValidLifetime_2269(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIItIt_ValidLifetime_2269, value);
	if(ret)
	{
		return -1;
	}*/
	char *p = parseTemplate(path_name, ".Interface.");

	if (p == NULL)
		return -1;

	//only network.lan support IPv6Prefix, network.lan1 ~ network.lan3 and network.wan don't support
	if (atoi(p) == IP_WAN_INSTANCE_INDEX)
	{
		return 0;
	}

	char native[32] = {0};

	ret = do_uci_get("ipv6.@global[0].connection_type", native);
	if(ret)
	{
		strcpy(native, "0");
		ret = 0;
	}
	if (atoi(native) != 0)
	{
		if (atoi(native) == 1)
			ret = do_uci_get("ipv6.@native[0].pd_valid_tr_lifetime", value);
		else
			ret = do_uci_get("ipv6.@static[0].lan_tr_valid_lifetime", value);

		if(ret)
		{
			strcpy(value, "0001-01-01T00:00:00Z");
			ret = 0;
		}
	}
	else
		strcpy(value, "0001-01-01T00:00:00Z");
	
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIItIt_ValidLifetime_2269(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char *p = parseTemplate(path_name, ".Interface.");

	if (p == NULL)
		return -1;

	//only network.lan support IPv6Prefix, network.lan1 ~ network.lan3 and network.wan don't support
	if (atoi(p) == IP_WAN_INSTANCE_INDEX)
	{
		return 0;
	}

	char native[32] = {0};

	ret = do_uci_get("ipv6.@global[0].connection_type", native);
	if(ret)
	{
		strcpy(native, "0");
		ret = 0;
	}

	if (atoi(native) != 5)// only for static mode
		return -1;
	
	long int currenttimesec = 0;
	long int preferlifetime = 0;
	char tmp[128] = {0};
	currenttimesec = getLocalTimeWithSeconds();
	preferlifetime = changedDateTimeToSeconds(value);
	sprintf(tmp, "%ld", preferlifetime-currenttimesec);

	ret = do_uci_set("ipv6.@static[0].lan_tr_valid_lifetime", value);
	ret = do_uci_set("ipv6.@static[0].pd_valid_lifetime", tmp);

	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("ipv6");
		if(ret)
		{
			return (-1);
		}
		//ret = 1; //means need to reboot for taking effect
		doRestartNetwork();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIItS_BytesSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIItS_BytesSent, value);
	if(ret)
	{
		return -1;
	}*/
	char inf[32] = {0};
	char *index = parseTemplate(path_name, ".Interface.");

	if (index != NULL){
		if (atoi(index) >= IP_LAN_START_INSTANCE_NUM && atoi(index) <= IP_LAN_END_INSTANCE_NUM)
		{
			getLanInterfaceNameWithInstanceNum(index, inf);
			
		}
		else if (atoi(index) == IP_WAN_INSTANCE_INDEX)
		{
			getWanHigherLayerInterface(inf);
		}
		else
		{
			return (-1);
		}
		getDevStatus(inf, "tx_bytes", value);
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIItS_BytesReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIItS_BytesReceived, value);
	if(ret)
	{
		return -1;
	}*/
	char inf[32] = {0};
	char *index = parseTemplate(path_name, ".Interface.");

	if (index != NULL){
		if (atoi(index) >= IP_LAN_START_INSTANCE_NUM && atoi(index) <= IP_LAN_END_INSTANCE_NUM)
		{
			getLanInterfaceNameWithInstanceNum(index, inf);
			
		}
		else if (atoi(index) == IP_WAN_INSTANCE_INDEX)
		{
			getWanHigherLayerInterface(inf);
		}
		else
		{
			return (-1);
		}
		getDevStatus(inf, "rx_bytes", value);
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIItS_PacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIItS_PacketsSent, value);
	if(ret)
	{
		return -1;
	}*/
	char inf[32] = {0};
	char *index = parseTemplate(path_name, ".Interface.");

	if (index != NULL){
		if (atoi(index) >= IP_LAN_START_INSTANCE_NUM && atoi(index) <= IP_LAN_END_INSTANCE_NUM)
		{
			getLanInterfaceNameWithInstanceNum(index, inf);
			
		}
		else if (atoi(index) == IP_WAN_INSTANCE_INDEX)
		{
			getWanHigherLayerInterface(inf);
		}
		else
		{
			return (-1);
		}
		getDevStatus(inf, "tx_packets", value);
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIItS_PacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIItS_PacketsReceived, value);
	if(ret)
	{
		return -1;
	}*/
	char inf[32] = {0};
	char *index = parseTemplate(path_name, ".Interface.");

	if (index != NULL){
		if (atoi(index) >= IP_LAN_START_INSTANCE_NUM && atoi(index) <= IP_LAN_END_INSTANCE_NUM)
		{
			getLanInterfaceNameWithInstanceNum(index, inf);
			
		}
		else if (atoi(index) == IP_WAN_INSTANCE_INDEX)
		{
			getWanHigherLayerInterface(inf);
		}
		else
		{
			return (-1);
		}
		getDevStatus(inf, "rx_packets", value);
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIItS_ErrorsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIItS_ErrorsSent, value);
	if(ret)
	{
		return -1;
	}*/
	char inf[32] = {0};
	char *index = parseTemplate(path_name, ".Interface.");

	if (index != NULL){
		if (atoi(index) >= IP_LAN_START_INSTANCE_NUM && atoi(index) <= IP_LAN_END_INSTANCE_NUM)
		{
			getLanInterfaceNameWithInstanceNum(index, inf);
			
		}
		else if (atoi(index) == IP_WAN_INSTANCE_INDEX)
		{
			getWanHigherLayerInterface(inf);
		}
		else
		{
			return (-1);
		}
		getDevStatus(inf, "tx_errors", value);
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIItS_ErrorsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIItS_ErrorsReceived, value);
	if(ret)
	{
		return -1;
	}*/
	char inf[32] = {0};
	char *index = parseTemplate(path_name, ".Interface.");

	if (index != NULL){
		if (atoi(index) >= IP_LAN_START_INSTANCE_NUM && atoi(index) <= IP_LAN_END_INSTANCE_NUM)
		{
			getLanInterfaceNameWithInstanceNum(index, inf);
			
		}
		else if (atoi(index) == IP_WAN_INSTANCE_INDEX)
		{
			getWanHigherLayerInterface(inf);
		}
		else
		{
			return (-1);
		}
		getDevStatus(inf, "rx_errors", value);
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIItS_UnicastPacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIItS_UnicastPacketsSent, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Interface.");
	int count = 0;
	int sum = 0;
	int i = 0;

	if (index != NULL)
	{
		if (atoi(index) >= IP_LAN_START_INSTANCE_NUM && atoi(index) <= IP_LAN_END_INSTANCE_NUM)
		{
			for(i=1; i<=4; i++)
			{
				count = get_ssdk_mib_statistics(i, "TxUniCast");
				sum = sum + count;
				count = 0;
			}
		}
		else if (atoi(index) == IP_WAN_INSTANCE_INDEX)
		{
			
			char inf[32] = {0};
			char inf2[32] = {0};
			getWanHigherLayerInterface(inf);
			getEthInterfaceName("wan", inf2);
			if(strcmp(inf, inf2) == 0)
			{
				count = get_ssdk_mib_statistics(5, "TxUniCast");
				sum = sum + count;
			}
		}
		else
		{
			return (-1);
		}
	}
	sprintf(value, "%d", sum);

	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIItS_UnicastPacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIItS_UnicastPacketsReceived, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Interface.");
	int count = 0;
	int sum = 0;
	int i = 0;

	if (index != NULL)
	{
		if (atoi(index) >= IP_LAN_START_INSTANCE_NUM && atoi(index) <= IP_LAN_END_INSTANCE_NUM)
		{
			for(i=1; i<=4; i++)
			{
				count = get_ssdk_mib_statistics(i, "RxUniCast");
				sum = sum + count;
				count = 0;
			}
		}
		else if (atoi(index) == IP_WAN_INSTANCE_INDEX)
		{
			
			char inf[32] = {0};
			char inf2[32] = {0};
			getWanHigherLayerInterface(inf);
			getEthInterfaceName("wan", inf2);
			if(strcmp(inf, inf2) == 0)
			{
				count = get_ssdk_mib_statistics(5, "RxUniCast");
				sum = sum + count;
			}
		}
		else
		{
			return (-1);
		}
	}
	sprintf(value, "%d", sum);
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIItS_DiscardPacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIItS_DiscardPacketsSent, value);
	if(ret)
	{
		return -1;
	}*/
	char inf[32] = {0};
	char *index = parseTemplate(path_name, ".Interface.");

	if (index != NULL){
		if (atoi(index) >= IP_LAN_START_INSTANCE_NUM && atoi(index) <= IP_LAN_END_INSTANCE_NUM)
		{
			getLanInterfaceNameWithInstanceNum(index, inf);
			
		}
		else if (atoi(index) == IP_WAN_INSTANCE_INDEX)
		{
			getWanHigherLayerInterface(inf);
		}
		else
		{
			return (-1);
		}
		getDevStatus(inf, "tx_dropped", value);
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIItS_DiscardPacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIItS_DiscardPacketsReceived, value);
	if(ret)
	{
		return -1;
	}*/
	char inf[32] = {0};
	char *index = parseTemplate(path_name, ".Interface.");

	if (index != NULL){
		if (atoi(index) >= IP_LAN_START_INSTANCE_NUM && atoi(index) <= IP_LAN_END_INSTANCE_NUM)
		{
			getLanInterfaceNameWithInstanceNum(index, inf);
			
		}
		else if (atoi(index) == IP_WAN_INSTANCE_INDEX)
		{
			getWanHigherLayerInterface(inf);
		}
		else
		{
			return (-1);
		}
		getDevStatus(inf, "rx_dropped", value);
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIItS_MulticastPacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIItS_MulticastPacketsSent, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Interface.");
	int count = 0;
	int sum = 0;
	int i = 0;

	if (index != NULL)
	{
		if (atoi(index) >= IP_LAN_START_INSTANCE_NUM && atoi(index) <= IP_LAN_END_INSTANCE_NUM)
		{
			for(i=1; i<=4; i++)
			{
				count = get_ssdk_mib_statistics(i, "TxMulti");
				sum = sum + count;
				count = 0;
			}
		}
		else if (atoi(index) == IP_WAN_INSTANCE_INDEX)
		{
			
			char inf[32] = {0};
			char inf2[32] = {0};
			getWanHigherLayerInterface(inf);
			getEthInterfaceName("wan", inf2);
			if(strcmp(inf, inf2) == 0)
			{
				count = get_ssdk_mib_statistics(5, "TxMulti");
				sum = sum + count;
			}
		}
		else
		{
			return (-1);
		}
	}
	sprintf(value, "%d", sum);
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIItS_MulticastPacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIItS_MulticastPacketsReceived, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Interface.");
	int count = 0;
	int sum = 0;
	int i = 0;

	if (index != NULL)
	{
		if (atoi(index) >= IP_LAN_START_INSTANCE_NUM && atoi(index) <= IP_LAN_END_INSTANCE_NUM)
		{
			for(i=1; i<=4; i++)
			{
				count = get_ssdk_mib_statistics(i, "RxMulti");
				sum = sum + count;
				count = 0;
			}
		}
		else if (atoi(index) == IP_WAN_INSTANCE_INDEX)
		{
			
			char inf[32] = {0};
			char inf2[32] = {0};
			getWanHigherLayerInterface(inf);
			getEthInterfaceName("wan", inf2);
			if(strcmp(inf, inf2) == 0)
			{
				count = get_ssdk_mib_statistics(5, "RxMulti");
				sum = sum + count;
			}
		}
		else
		{
			return (-1);
		}
	}
	sprintf(value, "%d", sum);
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIItS_BroadcastPacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIItS_BroadcastPacketsSent, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Interface.");
	int count = 0;
	int sum = 0;
	int i = 0;

	if (index != NULL)
	{
		if (atoi(index) >= IP_LAN_START_INSTANCE_NUM && atoi(index) <= IP_LAN_END_INSTANCE_NUM)
		{
			for(i=1; i<=4; i++)
			{
				count = get_ssdk_mib_statistics(i, "TxBroad");
				sum = sum + count;
				count = 0;
			}
		}
		else if (atoi(index) == IP_WAN_INSTANCE_INDEX)
		{
			
			char inf[32] = {0};
			char inf2[32] = {0};
			getWanHigherLayerInterface(inf);
			getEthInterfaceName("wan", inf2);
			if(strcmp(inf, inf2) == 0)
			{
				count = get_ssdk_mib_statistics(5, "TxBroad");
				sum = sum + count;
			}
		}
		else
		{
			return (-1);
		}
	}
	sprintf(value, "%d", sum);
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIItS_BroadcastPacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIItS_BroadcastPacketsReceived, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Interface.");
	int count = 0;
	int sum = 0;
	int i = 0;

	if (index != NULL)
	{
		if (atoi(index) >= IP_LAN_START_INSTANCE_NUM && atoi(index) <= IP_LAN_END_INSTANCE_NUM)
		{
			for(i=1; i<=4; i++)
			{
				count = get_ssdk_mib_statistics(i, "RxBroad");
				sum = sum + count;
				count = 0;
			}
		}
		else if (atoi(index) == IP_WAN_INSTANCE_INDEX)
		{
			
			char inf[32] = {0};
			char inf2[32] = {0};
			getWanHigherLayerInterface(inf);
			getEthInterfaceName("wan", inf2);
			if(strcmp(inf, inf2) == 0)
			{
				count = get_ssdk_mib_statistics(5, "RxBroad");
				sum = sum + count;
			}
		}
		else
		{
			return (-1);
		}
	}
	sprintf(value, "%d", sum);
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIItS_UnknownProtoPacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIItS_UnknownProtoPacketsReceived, value);
	if(ret)
	{
		return -1;
	}*/
	char inf[32] = {0};
	char *index = parseTemplate(path_name, ".Interface.");

	if (index != NULL){
		if (atoi(index) >= IP_LAN_START_INSTANCE_NUM && atoi(index) <= IP_LAN_END_INSTANCE_NUM)
		{
			getLanInterfaceNameWithInstanceNum(index, inf);
			
		}
		else if (atoi(index) == IP_WAN_INSTANCE_INDEX)
		{
			getWanHigherLayerInterface(inf);
		}
		else
		{
			return (-1);
		}
		getDevStatus(inf, "rx_frame_errors", value);
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIAt_LocalIPAddress(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIAt_LocalIPAddress, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".ActivePort.");
	char buff[256] = {0};
	char *p = NULL;	
	char *q = NULL;

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(ActivePortMap, buff, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			if (strstr(buff, "_LISTEN") != NULL) //for listen status, value always is null
				strcpy(value, "");
			else{	
				q = strchr(buff, '_');
				if(q != NULL)
				{
					*q = '\0';
				}
				tr_log(LOG_DEBUG,"################################################localIP[%s]",buff);

				p = strstr(buff, ":");
				if(p != NULL)
				{
					*p = '\0';
				}
				strcpy(value, buff);
			}
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIAt_LocalPort(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIAt_LocalPort, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".ActivePort.");
	char buff[256] = {0};
	char *p = NULL;	
	char *q = NULL;

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(ActivePortMap, buff, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			q = strchr(buff, '_');
			if(q != NULL)
			{
				*q = '\0';
			}
			tr_log(LOG_DEBUG,"################################################localIP[%s]",buff);

			p = strrchr(buff, ':');
			if(p != NULL)
			{
				strcpy(value, p+1);
			}
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIAt_RemoteIPAddress(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIAt_RemoteIPAddress, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".ActivePort.");
	char buff[256] = {0};
	char *p = NULL;	
	char *q = NULL;

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(ActivePortMap, buff, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			if (strstr(buff, "_LISTEN") != NULL) //for listen status, value always is null
				strcpy(value, "");
			else{
				q = strchr(buff, '_');
				
				if(q != NULL)
				{
					tr_log(LOG_DEBUG,"################################################remoteIP[%s]",q+1);
					p = strstr(q, ":");
					if(p != NULL)
					{
						*p = '\0';
					}
					strcpy(value, q+1);
				}
			}
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIAt_RemotePort(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIAt_RemotePort, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".ActivePort.");
	char buff[256] = {0};
	char *p = NULL; 
	char *q = NULL; 
	char *s = NULL;

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(ActivePortMap, buff, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			if (strstr(buff, "_LISTEN") != NULL) //for listen status, value always is 0
				strcpy(value, "0");
			else{
				q = strchr(buff, '_');
				s = strrchr(buff, '_');
				if(s != NULL)
				{
					*s = '\0';
				}
				
				if(q != NULL)
				{
					p = strstr(q, ":");
					if(p != NULL)
					{
						tr_log(LOG_DEBUG,"################################################remoteIP[%s]",q+1);
						if (strcmp(p+1, "::*") == 0)
							strcpy(value, "0"); //for listen status, the value is 0
						else
							strcpy(value, p+1);
					}
				}
			}
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIAt_Status(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIAt_Status, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".ActivePort.");
	char buff[256] = {0};
	char *p = NULL; 
	char *q = NULL;

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(ActivePortMap, buff, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			p = strrchr(buff, '_');
			if(p != NULL)
			{
				tr_log(LOG_DEBUG,"################################################state[%s]",p+1);
				strcpy(value, p+1);
			}
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DID_IPv4PingSupported(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DID_IPv4PingSupported, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "1");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DID_IPv6PingSupported(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DID_IPv6PingSupported, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "1");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DID_IPv4TraceRouteSupported(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DID_IPv4TraceRouteSupported, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "1");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DID_IPv6TraceRouteSupported(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DID_IPv6TraceRouteSupported, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "0");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DID_IPv4DownloadDiagnosticsSupported(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DID_IPv4DownloadDiagnosticsSupported, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "1");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DID_IPv6DownloadDiagnosticsSupported(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DID_IPv6DownloadDiagnosticsSupported, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "0");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DID_IPv4UploadDiagnosticsSupported(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DID_IPv4UploadDiagnosticsSupported, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "1");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DID_IPv6UploadDiagnosticsSupported(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DID_IPv6UploadDiagnosticsSupported, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "0");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DID_IPv4UDPEchoDiagnosticsSupported(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DID_IPv4UDPEchoDiagnosticsSupported, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "1");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DID_IPv6UDPEchoDiagnosticsSupported(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DID_IPv6UDPEchoDiagnosticsSupported, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "0");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DID_IPv4ServerSelectionDiagnosticsSupported(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DID_IPv4ServerSelectionDiagnosticsSupported, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "1");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DID_IPv6ServerSelectionDiagnosticsSupported(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DID_IPv6ServerSelectionDiagnosticsSupported, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "0");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIDI_DiagnosticsState(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIDI_DiagnosticsState, value);
	if(ret)
	{
		strcpy(value, "None");
		ret = 0;
	}
	if (strcmp(value, " ") == 0)
		strcpy(value, "None");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIDI_DiagnosticsState(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if(strcasecmp(value, "requested") == 0)
	{
		ret = do_uci_set(DIDI_DiagnosticsState, value);
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit(MS);
			if(ret)
			{
				return (-1);
			}
		}
		startIPPing();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIDI_Interface(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIDI_Interface, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIDI_Interface(char * path_name, char *value)
{
	int ret = 0;
	int i = 0;
	char buff[64] = {0};
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	/*for (i = 0; i <= IP_LAN_INSTANCE_NUM; i ++){
		memset(buff, 0, sizeof(buff));
		sprintf(buff, "Device.IP.Interface.%d", lan_map[i].num);
		if (strcasecmp(value, buff) != 0 && strcasecmp(value, IP_WAN_INTERFACE_PATH) != 0)
			return (-2);
	}*/

	if(strlen(value) > 0 && checkInterface(value) != 1)
	{
		return (-2);
	}
	
	ret = do_uci_set(DIDI_Interface, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
		startIPPing();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIDI_ProtocolVersion(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIDI_ProtocolVersion, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIDI_ProtocolVersion(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if(strcasecmp(value, "Any") != 0 && strcasecmp(value, "IPv4") != 0 && strcasecmp(value, "IPv6") != 0)
		return (-2);
	
	ret = do_uci_set(DIDI_ProtocolVersion, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
		startIPPing();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIDI_Host(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIDI_Host, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIDI_Host(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if(strlen(value) > 256)
	{
		return (-2);
	}
	
	ret = do_uci_set(DIDI_Host, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
		startIPPing();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIDI_NumberOfRepetitions(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIDI_NumberOfRepetitions, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIDI_NumberOfRepetitions(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if(atoi(value) < 1)
	{
		return -2;
	}
		
	ret = do_uci_set(DIDI_NumberOfRepetitions, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
		startIPPing();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIDI_Timeout(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIDI_Timeout, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIDI_Timeout(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if(atoi(value) < 1)
	{
		return -2;
	}

	ret = do_uci_set(DIDI_Timeout, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
		startIPPing();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIDI_DataBlockSize(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIDI_DataBlockSize, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIDI_DataBlockSize(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if(atoi(value) < 1 || atoi(value) > 65535)
	{
		return -2;
	}
	
	ret = do_uci_set(DIDI_DataBlockSize, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
		startIPPing();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIDI_DSCP(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIDI_DSCP, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIDI_DSCP(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if(atoi(value) < 0 || atoi(value) > 63)
	{
		return -2;
	}

	ret = do_uci_set(DIDI_DSCP, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
		startIPPing();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIDI_IPAddressUsed(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIDI_IPAddressUsed, value);
	if(ret)
	{
		return -1;
	}*/
	char interface[128] = {0};
	char interface2[128] = {0};
	char protocol[128] = {0};
	char buff[128] = {0};
	int i = 0;
	a_infinfo wanStatus;

	ret = do_uci_get(DIDI_Interface, interface);
	if(ret)
	{
		return -1;
	}

	do_uci_get(DIDI_ProtocolVersion, protocol);
	if(interface[0] != '\0')
	{
		for (i = 0; i <= IP_LAN_INSTANCE_NUM; i ++){
			memset(interface2, 0, sizeof(interface2));
			sprintf(interface2, "Device.IP.Interface.%d", lan_map[i].num);
			if(strcmp(interface, interface2) == 0)
			{
				sprintf(buff, "%s.ipaddr", lan_map[i].uci_path);
				if(strcasecmp(protocol, "IPv6") == 0) //only br-lan support ipv6
					ret = do_uci_get("network.lan.ip6addr", value);
				else
					ret = do_uci_get(buff, value);
				if(ret)
				{
					return -1;
				}
				break;
			}
		}

		if(strcmp(interface, IP_WAN_INTERFACE_PATH) == 0)
		{
			char wanmode[32] = {0};
			char wantype[32] = {0};
			getWanMode(wanmode);
			if (strcmp(wanmode, "pptp") == 0 || strcmp(wanmode, "l2tp") == 0)
				strcpy(wantype, "wan0");
			else
				strcpy(wantype, "wan");
			memset(&wanStatus, 0, sizeof(wanStatus));
			getInterfaceInfo(wantype, &wanStatus);
			if (wanStatus.status == 1)
			{
				if(strcasecmp(protocol, "IPv6") == 0)
					strcpy(value, wanStatus.ipv6_address);
				else
					strcpy(value, wanStatus.ipv4_address);
			}
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIDI_IPAddressUsed(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DIDI_IPAddressUsed, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIDI_SuccessCount(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIDI_SuccessCount, value);
	if(ret)
	{
		return -1;
	}*/
	FILE *fp = NULL;
	char buff[128] = {0};
	char *p = NULL, *q = NULL;

	fp = fopen("/tmp/pingresult", "r");
	if(fp != NULL)
	{
		while(fgets(buff, sizeof(buff), fp))
		{
			p = strstr(buff, ", ");
			if (p != NULL){
				q = strstr(p, "packets received");
				if(q != NULL)
				{
					*(q-1) = '\0';
					strcpy(value, p+2);
				}
			}
		}
		fclose(fp);
	}
	else
		strcpy(value, "0");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIDI_SuccessCount(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DIDI_SuccessCount, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIDI_FailureCount(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIDI_FailureCount, value);
	if(ret)
	{
		return -1;
	}*/
	FILE *fp = NULL;
	char buff[128] = {0};
	char *p = NULL, *q = NULL;
	char tmp[128] = {0};
	int number = 0;
	
	ret = do_uci_get(DIDI_NumberOfRepetitions, tmp);

	if(atoi(tmp) == 0)
	{
		number = 5;
	}
	else
	{
		number = atoi(tmp);
	}
	fp = fopen("/tmp/pingresult", "r");
	if(fp != NULL)
	{
		while(fgets(buff, sizeof(buff), fp))
		{
			p = strstr(buff, ", ");
			if(p != NULL){
				q = strstr(p, "packets received");
				if(q != NULL)
				{
					*(q-1) = '\0';
					sprintf(value, "%d", number-atoi(p+2));
				}
			}
		}
		fclose(fp);
	}	
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIDI_FailureCount(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DIDI_FailureCount, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIDI_AverageResponseTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIDI_AverageResponseTime, value);
	if(ret)
	{
		return -1;
	}*/
	FILE *fp = NULL;
	char buff[128] = {0};
	char *p = NULL;
	char *q = NULL;
	char *s = NULL;

	fp = fopen("/tmp/pingresult", "r");//round-trip min/avg/max = 6.622/7.746/8.402 ms
	if(fp != NULL)
	{
		while(fgets(buff, sizeof(buff), fp))
		{
			p = strchr(buff, '=');
			if(p != NULL)
			{
				q = strchr(p, '/');
				s = strrchr(p, '/');
				if(q != NULL && s != NULL)
				{
					*s = '\0';
					strcpy(value, q+1);
				}
			}
		}
		fclose(fp);
	}

	if (strcmp(value, "") == 0)
		strcpy(value, "0");
	
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIDI_AverageResponseTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DIDI_AverageResponseTime, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIDI_MinimumResponseTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIDI_MinimumResponseTime, value);
	if(ret)
	{
		return -1;
	}*/
	FILE *fp = NULL;
	char buff[128] = {0};
	char *p = NULL;
	char *q = NULL;

	fp = fopen("/tmp/pingresult", "r");//round-trip min/avg/max = 6.622/7.746/8.402 ms
	if(fp != NULL)
	{
		while(fgets(buff, sizeof(buff), fp))
		{
			p = strchr(buff, '=');
			if(p != NULL)
			{
				q = strchr(p, '/');
				if(q != NULL)
				{
					*q = '\0';
					strcpy(value, p+2);
				}
			}
		}
		fclose(fp);
	}

	if (strcmp(value, "") == 0)
		strcpy(value, "0");
	
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIDI_MinimumResponseTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DIDI_MinimumResponseTime, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIDI_MaximumResponseTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIDI_MaximumResponseTime, value);
	if(ret)
	{
		return -1;
	}*/
	FILE *fp = NULL;
	char buff[128] = {0};
	char *p = NULL;
	char *q = NULL;
	char *s = NULL;

	fp = fopen("/tmp/pingresult", "r");//round-trip min/avg/max = 6.622/7.746/8.402 ms
	if(fp != NULL)
	{
		while(fgets(buff, sizeof(buff), fp))
		{
			p = strchr(buff, '=');
			if(p != NULL)
			{
				q = strrchr(p, '/');
				s = strstr(p, "ms");
				if(q != NULL && s != NULL)
				{
					*s = '\0';
					strcpy(value, q+1);
				}
			}
		}
		fclose(fp);
	}

	if (strcmp(value, "") == 0)
		strcpy(value, "0");
	
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIDI_MaximumResponseTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DIDI_MaximumResponseTime, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIDI_AverageResponseTimeDetailed(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIDI_AverageResponseTimeDetailed, value);
	if(ret)
	{
		return -1;
	}*/
	FILE *fp = NULL;
	char buff[128] = {0};
	char *p = NULL;
	char *q = NULL;
	char *s = NULL;

	fp = fopen("/tmp/pingresult", "r");//round-trip min/avg/max = 6.622/7.746/8.402 ms
	if(fp != NULL)
	{
		while(fgets(buff, sizeof(buff), fp))
		{
			p = strchr(buff, '=');
			if(p != NULL)
			{
				q = strchr(p, '/');
				s = strrchr(p, '/');
				if(q != NULL && s != NULL)
				{
					*s = '\0';
					strcpy(value, q+1);
				}
			}
		}
		fclose(fp);
	}

	if (strcmp(value, "") == 0)
		strcpy(value, "0");
	
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIDI_AverageResponseTimeDetailed(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DIDI_AverageResponseTimeDetailed, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIDI_MinimumResponseTimeDetailed(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIDI_MinimumResponseTimeDetailed, value);
	if(ret)
	{
		return -1;
	}*/
	FILE *fp = NULL;
	char buff[128] = {0};
	char *p = NULL;
	char *q = NULL;

	fp = fopen("/tmp/pingresult", "r");//round-trip min/avg/max = 6.622/7.746/8.402 ms
	if(fp != NULL)
	{
		while(fgets(buff, sizeof(buff), fp))
		{
			p = strchr(buff, '=');
			if(p != NULL)
			{
				q = strchr(p, '/');
				if(q != NULL)
				{
					*q = '\0';
					strcpy(value, p+2);
				}
			}
		}
		fclose(fp);
	}

	if (strcmp(value, "") == 0)
		strcpy(value, "0");
	
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIDI_MinimumResponseTimeDetailed(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DIDI_MinimumResponseTimeDetailed, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIDI_MaximumResponseTimeDetailed(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIDI_MaximumResponseTimeDetailed, value);
	if(ret)
	{
		return -1;
	}*/
	FILE *fp = NULL;
	char buff[128] = {0};
	char *p = NULL;
	char *q = NULL;
	char *s = NULL;

	fp = fopen("/tmp/pingresult", "r");//round-trip min/avg/max = 6.622/7.746/8.402 ms
	if(fp != NULL)
	{
		while(fgets(buff, sizeof(buff), fp))
		{
			p = strchr(buff, '=');
			if(p != NULL)
			{
				q = strrchr(p, '/');
				s = strstr(p, "ms");
				if(q != NULL && s != NULL)
				{
					*s = '\0';
					strcpy(value, q+1);
				}
			}
		}
		fclose(fp);
	}

	if (strcmp(value, "") == 0)
		strcpy(value, "0");
	
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIDI_MaximumResponseTimeDetailed(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DIDI_MaximumResponseTimeDetailed, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIDT_DiagnosticsState(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIDT_DiagnosticsState, value);
	if(ret)
	{
		strcpy(value, "None");
		ret = 0;
	}
	if (strcmp(value, " ") == 0)
		strcpy(value, "None");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIDT_DiagnosticsState(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DIDT_DiagnosticsState, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/

	if(strcasecmp(value, "requested") == 0)
	{
		ret = do_uci_set(DIDT_DiagnosticsState, value);
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit(MS);
			if(ret)
			{
				return (-1);
			}
		}
		startTraceRoute();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIDT_Interface(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIDT_Interface, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIDT_Interface(char * path_name, char *value)
{
	int ret = 0;
	int i = 0;
	char buff[64] = {0};
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	/*for (i = 0; i <= IP_LAN_INSTANCE_NUM; i ++){
		memset(buff, 0, sizeof(buff));
		sprintf(buff, "Device.IP.Interface.%d", lan_map[i].num);
		if (strcasecmp(value, buff) != 0 && strcasecmp(value, IP_WAN_INTERFACE_PATH) != 0)
			return (-2);
	}*/

	if(strlen(value) > 0 && checkInterface(value) != 1)
	{
		return (-2);
	}
		
	ret = do_uci_set(DIDT_Interface, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
		startTraceRoute();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIDT_ProtocolVersion(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIDT_ProtocolVersion, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIDT_ProtocolVersion(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if(strcasecmp(value, "IPv4") != 0)
		return (-2);
	
	ret = do_uci_set(DIDT_ProtocolVersion, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
		startTraceRoute();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIDT_Host(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIDT_Host, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIDT_Host(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if(strlen(value) > 256)	
	{
		return (-2);
	}
	
	ret = do_uci_set(DIDT_Host, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
		startTraceRoute();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIDT_NumberOfTries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIDT_NumberOfTries, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIDT_NumberOfTries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIDT_NumberOfTries, value);

	if(atoi(value) < 1 || atoi(value) > 3)
	{
		return (-2);
	}
		
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
		startTraceRoute();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIDT_Timeout(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIDT_Timeout, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIDT_Timeout(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if(atoi(value) < 1)
	{
		return (-2);
	}

	ret = do_uci_set(DIDT_Timeout, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
		startTraceRoute();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIDT_DataBlockSize(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIDT_DataBlockSize, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIDT_DataBlockSize(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (atoi(value) < 1 || atoi(value) > 65535)
		return (-2);
	
	ret = do_uci_set(DIDT_DataBlockSize, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
		startTraceRoute();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIDT_DSCP(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIDT_DSCP, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIDT_DSCP(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if(atoi(value) < 0 || atoi(value) > 63)
	{
		return (-2);
	}
	
	ret = do_uci_set(DIDT_DSCP, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
		startTraceRoute();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIDT_MaxHopCount(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIDT_MaxHopCount, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIDT_MaxHopCount(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIDT_MaxHopCount, value);

	if(atoi(value) < 1 || atoi(value) > 64)
	{
		return (-2);
	}

	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
		startTraceRoute();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIDT_IPAddressUsed(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIDT_IPAddressUsed, value);
	if(ret)
	{
		return -1;
	}*/
	char interface[128] = {0};
	char interface2[128] = {0};
	char buff[128] = {0};
	a_infinfo wanStatus;
	int i = 0;

	ret = do_uci_get(DIDT_Interface, interface);
	if(ret)
	{
		return -1;
	}

	if(interface[0] != '\0')
	{
		for (i = 0; i <= IP_LAN_INSTANCE_NUM; i ++){
			memset(interface2, 0, sizeof(interface2));
			sprintf(interface2, "Device.IP.Interface.%d", lan_map[i].num);
			if(strcmp(interface, interface2) == 0)
			{
				sprintf(buff, "%s.ipaddr", lan_map[i].uci_path);
				ret = do_uci_get(buff, value);
				if(ret)
				{
					return -1;
				}
				break;
			}
		}

		if(strcmp(interface, IP_WAN_INTERFACE_PATH) == 0)
		{
			char wanmode[32] = {0};
			char wantype[32] = {0};
			getWanMode(wanmode);
			if (strcmp(wanmode, "pptp") == 0 || strcmp(wanmode, "l2tp") == 0)
				strcpy(wantype, "wan0");
			else
				strcpy(wantype, "wan");
			memset(&wanStatus, 0, sizeof(wanStatus));
			getInterfaceInfo(wantype, &wanStatus);
			if (wanStatus.status == 1)
			{
				strcpy(value, wanStatus.ipv4_address);
			}
		}
	}	
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIDT_IPAddressUsed(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DIDT_IPAddressUsed, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIDT_ResponseTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIDT_ResponseTime, value);
	if(ret)
	{
		return -1;
	}*/
	char buff[256] = {0};
	FILE *fp = NULL;
	char *p = NULL;
	char *q = NULL;	
	float time = 0;
	
	fp = fopen("/tmp/tracerouteresult", "r");
	if(fp != NULL)
	{
		memset(buff, 0, sizeof(buff));
		while(fgets(buff, sizeof(buff), fp))
		{
			while((p = strrchr(buff, ')')) != NULL)
			{
				*p = '\0';
				p = p + 3;
				tr_log(LOG_DEBUG,"###################################p[%s]",p);
				while((q = strstr(p, "ms")) != NULL)
				{
					tr_log(LOG_DEBUG,"###################################q[%s]",q);
					*(q-1) = '\0';
					time = time + atof(p);
					tr_log(LOG_DEBUG,"###################################time[%f]",time);
					p = q + 4;
					tr_log(LOG_DEBUG,"###################################p[%s]",p);
				}
			}
			memset(buff, 0, sizeof(buff));			
		}
		sprintf(value, "%.0f", time);
		fclose(fp);
	}
	else
		strcpy(value, "0");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIDT_ResponseTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DIDT_ResponseTime, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIDT_RouteHopsNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIDT_RouteHopsNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}*/
	FILE *fp = NULL;
	char buff[1024] = {0};
	int i = 0;
	char *p = NULL;
	char *q = NULL;
	
	fp = fopen("/tmp/tracerouteresult", "r");
	if(fp != NULL)
	{
		while(fgets(buff, sizeof(buff), fp))
		{
			if(strstr(buff, "traceroute to") != NULL)
			{
				continue;
			}

			p = strrchr(buff, '(');
			q = strrchr(buff, ')');

			if(p != NULL && q != NULL)
			{
				i++;
			}
		}
		fclose(fp);
	}	
	sprintf(value, "%d", i);
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIDTRt_Host(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIDTRt_Host, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".RouteHops.");
	char buff[256] = {0};
	char tmp[256] = {0};
	FILE *fp = NULL;
	char *p = NULL;
	char *q = NULL;
	
	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(RouteHopsMap, buff, atoi(index));
		if(ret)
		{
			return (-1);
		}
		sprintf(tmp, "(%s)", buff);
	}
	
	fp = fopen("/tmp/tracerouteresult", "r");
	if(fp != NULL)
	{
		while(fgets(buff, sizeof(buff), fp))
		{
			if((p = strstr(buff, tmp)) != NULL)
			{
				*(p-1) = '\0';
				q = strrchr(buff, ' ');
				tr_log(LOG_DEBUG,"###########################################q[%s]",q);
				if(q != NULL)
				{
					strcpy(value, q+1);
				}
			}
		}
		fclose(fp);
	}	
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIDTRt_HostAddress(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIDTRt_HostAddress, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".RouteHops.");
	char buff[256] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(RouteHopsMap, buff, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			strcpy(value, buff);
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIDTRt_ErrorCode(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIDTRt_ErrorCode, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "0"); //because the items all for successful
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIDTRt_RTTimes(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIDTRt_RTTimes, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".RouteHops.");
	char buff[256] = {0};
	char tmp[256] = {0};
	char tmp1[256] = {0};
	FILE *fp = NULL;
	char *p = NULL;
	char *q = NULL;
	
	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(RouteHopsMap, buff, atoi(index));
		if(ret)
		{
			return (-1);
		}
		sprintf(tmp, "(%s)", buff);
		tr_log(LOG_DEBUG,"###################################tmp[%s]",tmp);
	}
	
	fp = fopen("/tmp/tracerouteresult", "r");
	if(fp != NULL)
	{
		memset(buff, 0, sizeof(buff));
		while(fgets(buff, sizeof(buff), fp))
		{
			if((p = strstr(buff, tmp)) != NULL)
			{
				tr_log(LOG_DEBUG,"###################################p[%s]",p);
				p = p + strlen(tmp) + 2;
				tr_log(LOG_DEBUG,"###################################p1[%s]",p);
				while((q = strstr(p, "ms")) != NULL)
				{
					tr_log(LOG_DEBUG,"###################################q[%s]",q);
					*(q-1) = '\0';
					strcat(tmp1, p);
					strcat(tmp1, ",");
					tr_log(LOG_DEBUG,"###################################tmp1[%s]",tmp1);
					tr_log(LOG_DEBUG,"###################################p[%s]",p);
					p = q + 4;
					tr_log(LOG_DEBUG,"###################################p[%s]",p);
				}
				strcpy(value, tmp1);
				tr_log(LOG_DEBUG,"###################################value[%s]",value);
				q = strrchr(value, ',');
				if(q != NULL)
				{
					*q = '\0';
				}
			}
			memset(buff, 0, sizeof(buff));			
		}
		fclose(fp);
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIDD_DiagnosticsState(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIDD_DiagnosticsState, value);
	if(ret)
	{
		strcpy(value, "None");
		ret = 0;
	}
	if (strcmp(value, " ") == 0)
		strcpy(value, "None");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIDD_DiagnosticsState(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DIDD_DiagnosticsState, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/

	tr_log(LOG_DEBUG,"parameternum[%d]",parameternum);
	if(strcasecmp(value, "requested") == 0)
	{
		ret = do_uci_set(DIDD_DiagnosticsState, value);
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit(MS);
			if(ret)
			{
				return (-1);
			}
		}
		startDownload();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIDD_Interface(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIDD_Interface, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIDD_Interface(char * path_name, char *value)
{
	int ret = 0;
	int i = 0;
	char buff[64] = {0};
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	/*for (i = 0; i <= IP_LAN_INSTANCE_NUM; i ++){
		memset(buff, 0, sizeof(buff));
		sprintf(buff, "Device.IP.Interface.%d", lan_map[i].num);
		if (strcasecmp(value, buff) != 0 && strcasecmp(value, IP_WAN_INTERFACE_PATH) != 0)
			return (-2);
	}*/

	if(strlen(value) > 0 && checkInterface(value) != 1)
	{
		return (-2);
	}
	
	ret = do_uci_set(DIDD_Interface, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
		startDownload();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIDD_DownloadURL(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIDD_DownloadURL, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIDD_DownloadURL(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if(strlen(value) > 256)
	{
		return (-2);
	}
	
	tr_log(LOG_DEBUG,"parameternum[%d]",parameternum);
	ret = do_uci_set(DIDD_DownloadURL, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
		startDownload();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIDD_DownloadTransports(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIDD_DownloadTransports, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "HTTP,FTP");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIDD_DownloadDiagnosticMaxConnections(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIDD_DownloadDiagnosticMaxConnections, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "1");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIDD_DownloadDiagnosticMaxConnections(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DIDD_DownloadDiagnosticMaxConnections, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIDD_DownloadDiagnosticsMaxIncrementalResult(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIDD_DownloadDiagnosticsMaxIncrementalResult, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "1");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIDD_DSCP(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIDD_DSCP, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIDD_DSCP(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if(atoi(value) < 0 || atoi(value) > 63)
	{
		return (-2);
	}
	
	tr_log(LOG_DEBUG,"parameternum[%d]",parameternum);
	ret = do_uci_set(DIDD_DSCP, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
		startDownload();
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIDD_EthernetPriority(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIDD_EthernetPriority, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIDD_EthernetPriority(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if(atoi(value) < 0 || atoi(value) > 7)
	{
		return (-2);
	}

	tr_log(LOG_DEBUG,"parameternum[%d]",parameternum);
	ret = do_uci_set(DIDD_EthernetPriority, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
		startDownload();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIDD_TimeBasedTestDuration(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIDD_TimeBasedTestDuration, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIDD_TimeBasedTestDuration(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if(atoi(value) < 0 || atoi(value) > 999)
	{
		return (-2);
	}

	ret = do_uci_set(DIDD_TimeBasedTestDuration, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
		startDownload();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIDD_TimeBasedTestMeasurementInterval(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIDD_TimeBasedTestMeasurementInterval, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIDD_TimeBasedTestMeasurementInterval(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if(atoi(value) < 0 || atoi(value) > 999)
	{
		return (-2);
	}

	ret = do_uci_set(DIDD_TimeBasedTestMeasurementInterval, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
		startDownload();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIDD_TimeBasedTestMeasurementOffset(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIDD_TimeBasedTestMeasurementOffset, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIDD_TimeBasedTestMeasurementOffset(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if(atoi(value) < 0 || atoi(value) > 255)
	{
		return (-2);
	}

	ret = do_uci_set(DIDD_TimeBasedTestMeasurementOffset, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
		startDownload();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIDD_ProtocolVersion(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIDD_ProtocolVersion, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIDD_ProtocolVersion(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if(strcasecmp(value, "IPv4") != 0)
		return (-2);
	
	tr_log(LOG_DEBUG,"parameternum[%d]",parameternum);
	ret = do_uci_set(DIDD_ProtocolVersion, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
		startDownload();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIDD_NumberOfConnections(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIDD_NumberOfConnections, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "1");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIDD_NumberOfConnections(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DIDD_NumberOfConnections, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIDD_IPAddressUsed(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIDD_IPAddressUsed, value);
	if(ret)
	{
		return -1;
	}*/
	char interface[128] = {0};
	char interface2[128] = {0};
	char buff[128] = {0};
	a_infinfo wanStatus;
	int i = 0;

	ret = do_uci_get(DIDD_Interface, interface);
	if(ret)
	{
		return -1;
	}

	if(interface[0] != '\0')
	{
		for (i = 0; i <= IP_LAN_INSTANCE_NUM; i ++){
			memset(interface2, 0, sizeof(interface2));
			sprintf(interface2, "Device.IP.Interface.%d", lan_map[i].num);
			if(strcmp(interface, interface2) == 0)
			{
				sprintf(buff, "%s.ipaddr", lan_map[i].uci_path);
				ret = do_uci_get(buff, value);
				if(ret)
				{
					return -1;
				}
				break;
			}
		}

		if(strcmp(interface, IP_WAN_INTERFACE_PATH) == 0)
		{
			char wanmode[32] = {0};
			char wantype[32] = {0};
			getWanMode(wanmode);
			if (strcmp(wanmode, "pptp") == 0 || strcmp(wanmode, "l2tp") == 0)
				strcpy(wantype, "wan0");
			else
				strcpy(wantype, "wan");
			memset(&wanStatus, 0, sizeof(wanStatus));
			getInterfaceInfo(wantype, &wanStatus);
			if (wanStatus.status == 1)
			{
				strcpy(value, wanStatus.ipv4_address);
			}
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIDD_ROMTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIDD_ROMTime, value);
	if(ret)
	{
		return -1;
	}*/
	FILE *fp = NULL;
	char buff[256] = {0};
	char *p = NULL;
	char *ptr = NULL;

	fp = fopen("/tmp/wgetresult", "r");
	if(fp != NULL)
	{
		while(fgets(buff, sizeof(buff), fp))
		{
			if(strstr(buff, "ROMTime") != NULL)
			{
				p = strchr(buff, '=');
				if(p != NULL)
				{
					if ((ptr = strstr(p+1, "\n")) != NULL || (ptr = strstr(p+1, "\r")) != NULL)
						*ptr = '\0';
					strcpy(value, p+1);
					break;
				}
			}
		}
		fclose(fp);
	}
	else
	{
		strcpy(value, "0001-01-01T00:00:00Z");
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIDD_BOMTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIDD_BOMTime, value);
	if(ret)
	{
		return -1;
	}*/
	FILE *fp = NULL;
	char buff[256] = {0};
	char *p = NULL;
	char *ptr = NULL;

	fp = fopen("/tmp/wgetresult", "r");
	if(fp != NULL)
	{
		while(fgets(buff, sizeof(buff), fp))
		{
			if(strstr(buff, "BOMTime") != NULL)
			{
				p = strchr(buff, '=');
				if(p != NULL)
				{
					if ((ptr = strstr(p+1, "\n")) != NULL || (ptr = strstr(p+1, "\r")) != NULL)
						*ptr = '\0';
					strcpy(value, p+1);
					break;
				}
			}
		}
		fclose(fp);
	}
	else
	{
		strcpy(value, "0001-01-01T00:00:00Z");
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIDD_EOMTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIDD_EOMTime, value);
	if(ret)
	{
		return -1;
	}*/
	FILE *fp = NULL;
	char buff[256] = {0};
	char *p = NULL;
	char *ptr = NULL;

	fp = fopen("/tmp/wgetresult", "r");
	if(fp != NULL)
	{
		while(fgets(buff, sizeof(buff), fp))
		{
			if(strstr(buff, "EOMTime") != NULL)
			{
				p = strchr(buff, '=');
				if(p != NULL)
				{
					if ((ptr = strstr(p+1, "\n")) != NULL || (ptr = strstr(p+1, "\r")) != NULL)
						*ptr = '\0';
					strcpy(value, p+1);
					break;
				}
			}
		}
		fclose(fp);
	}
	else
	{
		strcpy(value, "0001-01-01T00:00:00Z");
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIDD_TestBytesReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIDD_TestBytesReceived, value);
	if(ret)
	{
		return -1;
	}*/
	FILE *fp = NULL;
	char buff[256] = {0};
	char *p = NULL;
	char tmp1[256] = {0};
	char tmp2[256] = {0};
	
	fp = fopen("/tmp/wgetresult", "r");
	if(fp != NULL)
	{
		while(fgets(buff, sizeof(buff), fp))
		{
			if(strstr(buff, "TotalBytesReceived") != NULL)
			{
				p = strchr(buff, '=');
				if(p != NULL)
				{
					strcpy(tmp1, p+1);
				}
			}
			if(strstr(buff, "HeaderReceived") != NULL)
			{
				p = strchr(buff, '=');
				if(p != NULL)
				{
					strcpy(tmp2, p+1);
				}
			}
		}
		sprintf(value, "%d", atoi(tmp1)+atoi(tmp2));
		fclose(fp);
	}
	else
	{
		strcpy(value, "0");
	}		
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIDD_TotalBytesReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIDD_TotalBytesReceived, value);
	if(ret)
	{
		return -1;
	}*/
	FILE *fp = NULL;
	char buff[256] = {0};
	char *p = NULL;
	char *ptr = NULL;
	
	fp = fopen("/tmp/wgetresult", "r");
	if(fp != NULL)
	{
		while(fgets(buff, sizeof(buff), fp))
		{
			if(strstr(buff, "TotalBytesReceived") != NULL)
			{
				p = strchr(buff, '=');
				if(p != NULL)
				{
					if ((ptr = strstr(p+1, "\n")) != NULL || (ptr = strstr(p+1, "\r")) != NULL)
						*ptr = '\0';
					strcpy(value, p+1);
					break;
				}
			}
		}
		fclose(fp);
	}
	else
	{
		strcpy(value, "0");
	}		
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIDD_TotalBytesSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIDD_TotalBytesSent, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "0");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIDD_TestBytesReceivedUnderFullLoading(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIDD_TestBytesReceivedUnderFullLoading, value);
	if(ret)
	{
		return -1;
	}*/
	FILE *fp = NULL;
	char buff[256] = {0};
	char *p = NULL;
	char tmp1[256] = {0};
	char tmp2[256] = {0};
	
	fp = fopen("/tmp/wgetresult", "r");
	if(fp != NULL)
	{
		while(fgets(buff, sizeof(buff), fp))
		{
			if(strstr(buff, "TotalBytesReceived") != NULL)
			{
				p = strchr(buff, '=');
				if(p != NULL)
				{
					strcpy(tmp1, p+1);
				}
			}
			if(strstr(buff, "HeaderReceived") != NULL)
			{
				p = strchr(buff, '=');
				if(p != NULL)
				{
					strcpy(tmp2, p+1);
				}
			}
		}
		sprintf(value, "%d", atoi(tmp1)+atoi(tmp2));
		fclose(fp);
	}
	else
	{
		strcpy(value, "0");
	}		
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIDD_TotalBytesReceivedUnderFullLoading(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIDD_TotalBytesReceivedUnderFullLoading, value);
	if(ret)
	{
		return -1;
	}*/
	FILE *fp = NULL;
	char buff[256] = {0};
	char *p = NULL;
	char *ptr = NULL;
	
	fp = fopen("/tmp/wgetresult", "r");
	if(fp != NULL)
	{
		while(fgets(buff, sizeof(buff), fp))
		{
			if(strstr(buff, "TotalBytesReceived") != NULL)
			{
				p = strchr(buff, '=');
				if(p != NULL)
				{
					if ((ptr = strstr(p+1, "\n")) != NULL || (ptr = strstr(p+1, "\r")) != NULL)
						*ptr = '\0';
					strcpy(value, p+1);
					break;
				}
			}
		}
		fclose(fp);
	}
	else
	{
		strcpy(value, "0");
	}		
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIDD_TotalBytesSentUnderFullLoading(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIDD_TotalBytesSentUnderFullLoading, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "0");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIDD_PeriodOfFullLoading(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIDD_PeriodOfFullLoading, value);
	if(ret)
	{
		return -1;
	}*/
	FILE *fp = NULL;
	char buff[256] = {0};
	char *p = NULL;
	char tmp1[256] = {0};
	char tmp2[256] = {0};
	
	fp = fopen("/tmp/wgetresult", "r");
	if(fp != NULL)
	{
		while(fgets(buff, sizeof(buff), fp))
		{
			if(strstr(buff, "BOMTime_org") != NULL)
			{
				p = strchr(buff, '=');
				if(p != NULL)
				{
					strcpy(tmp1, p+1);
				}
			}
			if(strstr(buff, "EOMTime_org") != NULL)
			{
				p = strchr(buff, '=');
				if(p != NULL)
				{
					strcpy(tmp2, p+1);
				}
			}
		}
		sprintf(value, "%f", atof(tmp2)-atof(tmp1));
		fclose(fp);
	}
	else
	{
		strcpy(value, "0");
	}		
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIDD_TCPOpenRequestTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIDD_TCPOpenRequestTime, value);
	if(ret)
	{
		return -1;
	}*/
	FILE *fp = NULL;
	char buff[256] = {0};
	char *p = NULL;
	char *ptr = NULL;
	
	fp = fopen("/tmp/wgetresult", "r");
	if(fp != NULL)
	{
		while(fgets(buff, sizeof(buff), fp))
		{
			if(strstr(buff, "TCPOpenRequestTime") != NULL)
			{
				p = strchr(buff, '=');
				if(p != NULL)
				{
					if ((ptr = strstr(p+1, "\n")) != NULL || (ptr = strstr(p+1, "\r")) != NULL)
						*ptr = '\0';
					strcpy(value, p+1);
					break;
				}
			}
		}
		fclose(fp);
	}
	else
	{
		strcpy(value, "0001-01-01T00:00:00Z");
	}		
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIDD_TCPOpenResponseTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIDD_TCPOpenResponseTime, value);
	if(ret)
	{
		return -1;
	}*/
	FILE *fp = NULL;
	char buff[256] = {0};
	char *p = NULL;
	char *ptr = NULL;
	
	fp = fopen("/tmp/wgetresult", "r");
	if(fp != NULL)
	{
		while(fgets(buff, sizeof(buff), fp))
		{
			if(strstr(buff, "TCPOpenResponseTime") != NULL)
			{
				p = strchr(buff, '=');
				if(p != NULL)
				{
					if ((ptr = strstr(p+1, "\n")) != NULL || (ptr = strstr(p+1, "\r")) != NULL)
						*ptr = '\0';
					strcpy(value, p+1);
					break;
				}
			}
		}
		fclose(fp);
	}
	else
	{
		strcpy(value, "0001-01-01T00:00:00Z");
	}		
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIDD_PerConnectionResultNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIDD_PerConnectionResultNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "1");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIDD_EnablePerConnectionResults(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIDD_EnablePerConnectionResults, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIDD_EnablePerConnectionResults(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	
	ret = do_uci_set(DIDD_EnablePerConnectionResults, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
		startDownload();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIDD_IncrementalResultNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIDD_IncrementalResultNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "0");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIDDPt_ROMTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIDDPt_ROMTime, value);
	if(ret)
	{
		return -1;
	}*/
	FILE *fp = NULL;
	char buff[256] = {0};
	char *p = NULL;
	char *ptr = NULL;

	fp = fopen("/tmp/wgetresult", "r");
	if(fp != NULL)
	{
		while(fgets(buff, sizeof(buff), fp))
		{
			if(strstr(buff, "ROMTime") != NULL)
			{
				p = strchr(buff, '=');
				if(p != NULL)
				{
					if ((ptr = strstr(p+1, "\n")) != NULL || (ptr = strstr(p+1, "\r")) != NULL)
						*ptr = '\0';
					strcpy(value, p+1);
					break;
				}
			}
		}
		fclose(fp);
	}
	else
	{
		strcpy(value, "0001-01-01T00:00:00Z");
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIDDPt_BOMTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIDDPt_BOMTime, value);
	if(ret)
	{
		return -1;
	}*/
	FILE *fp = NULL;
	char buff[256] = {0};
	char *p = NULL;
	char *ptr = NULL;
	
	fp = fopen("/tmp/wgetresult", "r");
	if(fp != NULL)
	{
		while(fgets(buff, sizeof(buff), fp))
		{
			if(strstr(buff, "BOMTime") != NULL)
			{
				p = strchr(buff, '=');
				if(p != NULL)
				{
					if ((ptr = strstr(p+1, "\n")) != NULL || (ptr = strstr(p+1, "\r")) != NULL)
						*ptr = '\0';
					strcpy(value, p+1);
					break;
				}
			}
		}
		fclose(fp);
	}
	else
	{
		strcpy(value, "0001-01-01T00:00:00Z");
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIDDPt_EOMTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIDDPt_EOMTime, value);
	if(ret)
	{
		return -1;
	}*/
	FILE *fp = NULL;
	char buff[256] = {0};
	char *p = NULL;
	char *ptr = NULL;
	
	fp = fopen("/tmp/wgetresult", "r");
	if(fp != NULL)
	{
		while(fgets(buff, sizeof(buff), fp))
		{
			if(strstr(buff, "EOMTime") != NULL)
			{
				p = strchr(buff, '=');
				if(p != NULL)
				{
					if ((ptr = strstr(p+1, "\n")) != NULL || (ptr = strstr(p+1, "\r")) != NULL)
						*ptr = '\0';
					strcpy(value, p+1);
					break;
				}
			}
		}
		fclose(fp);
	}
	else
	{
		strcpy(value, "0001-01-01T00:00:00Z");
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIDDPt_TestBytesReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIDDPt_TestBytesReceived, value);
	if(ret)
	{
		return -1;
	}*/
	FILE *fp = NULL;
	char buff[256] = {0};
	char *p = NULL;
	char tmp1[256] = {0};
	char tmp2[256] = {0};
	
	fp = fopen("/tmp/wgetresult", "r");
	if(fp != NULL)
	{
		while(fgets(buff, sizeof(buff), fp))
		{
			if(strstr(buff, "TotalBytesReceived") != NULL)
			{
				p = strchr(buff, '=');
				if(p != NULL)
				{
					strcpy(tmp1, p+1);
				}
			}
			if(strstr(buff, "HeaderReceived") != NULL)
			{
				p = strchr(buff, '=');
				if(p != NULL)
				{
					strcpy(tmp2, p+1);
				}
			}
		}
		sprintf(value, "%d", atoi(tmp1)+atoi(tmp2));
		fclose(fp);
	}
	else
	{
		strcpy(value, "0");
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIDDPt_TotalBytesReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIDDPt_TotalBytesReceived, value);
	if(ret)
	{
		return -1;
	}*/
	FILE *fp = NULL;
	char buff[256] = {0};
	char *p = NULL;
	char *ptr = NULL;
	
	fp = fopen("/tmp/wgetresult", "r");
	if(fp != NULL)
	{
		while(fgets(buff, sizeof(buff), fp))
		{
			if(strstr(buff, "TotalBytesReceived") != NULL)
			{
				p = strchr(buff, '=');
				if(p != NULL)
				{
					if ((ptr = strstr(p+1, "\n")) != NULL || (ptr = strstr(p+1, "\r")) != NULL)
						*ptr = '\0';
					strcpy(value, p+1);
					break;
				}
			}
		}
		fclose(fp);
	}
	else
	{
		strcpy(value, "0");
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIDDPt_TotalBytesSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIDDPt_TotalBytesSent, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "0");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIDDPt_TCPOpenRequestTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIDDPt_TCPOpenRequestTime, value);
	if(ret)
	{
		return -1;
	}*/
	FILE *fp = NULL;
	char buff[256] = {0};
	char *p = NULL;
	char *ptr = NULL;
	
	fp = fopen("/tmp/wgetresult", "r");
	if(fp != NULL)
	{
		while(fgets(buff, sizeof(buff), fp))
		{
			if(strstr(buff, "TCPOpenRequestTime") != NULL)
			{
				p = strchr(buff, '=');
				if(p != NULL)
				{
					if ((ptr = strstr(p+1, "\n")) != NULL || (ptr = strstr(p+1, "\r")) != NULL)
						*ptr = '\0';
					strcpy(value, p+1);
					break;
				}
			}
		}
		fclose(fp);
	}
	else
	{
		strcpy(value, "0001-01-01T00:00:00Z");
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIDDPt_TCPOpenResponseTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIDDPt_TCPOpenResponseTime, value);
	if(ret)
	{
		return -1;
	}*/
	FILE *fp = NULL;
	char buff[256] = {0};
	char *p = NULL;
	char *ptr = NULL;
	
	fp = fopen("/tmp/wgetresult", "r");
	if(fp != NULL)
	{
		while(fgets(buff, sizeof(buff), fp))
		{
			if(strstr(buff, "TCPOpenResponseTime") != NULL)
			{
				p = strchr(buff, '=');
				if(p != NULL)
				{
					if ((ptr = strstr(p+1, "\n")) != NULL || (ptr = strstr(p+1, "\r")) != NULL)
						*ptr = '\0';
					strcpy(value, p+1);
					break;
				}
			}
		}
		fclose(fp);
	}
	else
	{
		strcpy(value, "0001-01-01T00:00:00Z");
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIDDIt_TestBytesReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIDDIt_TestBytesReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIDDIt_TotalBytesReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIDDIt_TotalBytesReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIDDIt_TotalBytesSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIDDIt_TotalBytesSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIDDIt_StartTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIDDIt_StartTime, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIDDIt_EndTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIDDIt_EndTime, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIDU_DiagnosticsState(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIDU_DiagnosticsState, value);
	if(ret)
	{
		strcpy(value, "None");
		ret = 0;
	}
	if (strcmp(value, " ") == 0)
		strcpy(value, "None");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIDU_DiagnosticsState(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DIDU_DiagnosticsState, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/

	if(strcasecmp(value, "requested") == 0)
	{
		ret = do_uci_set(DIDU_DiagnosticsState, value);
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit(MS);
			if(ret)
			{
				return (-1);
			}
		}
		startUpload();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIDU_Interface(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIDU_Interface, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIDU_Interface(char * path_name, char *value)
{
	int ret = 0;
	int i = 0;
	char buff[64] = {0};
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	/*for (i = 0; i <= IP_LAN_INSTANCE_NUM; i ++){
		memset(buff, 0, sizeof(buff));
		sprintf(buff, "Device.IP.Interface.%d", lan_map[i].num);
		if (strcasecmp(value, buff) != 0 && strcasecmp(value, IP_WAN_INTERFACE_PATH) != 0)
			return (-2);
	}*/

	if(strlen(value) > 0 && checkInterface(value) != 1)
	{
		return (-2);
	}
	
	ret = do_uci_set(DIDU_Interface, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
		startUpload();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIDU_UploadURL(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIDU_UploadURL, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIDU_UploadURL(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (strlen(value) > 256)
		return -2;
	
	ret = do_uci_set(DIDU_UploadURL, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
		startUpload();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIDU_UploadTransports(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIDU_UploadTransports, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "HTTP,FTP");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIDU_UploadDiagnosticsMaxConnections(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIDU_UploadDiagnosticsMaxConnections, value);
	if(ret)
	{
		return -1;
	}
	strcpy(value, "1");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIDU_UploadDiagnosticsMaxIncrementalResult(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIDU_UploadDiagnosticsMaxIncrementalResult, value);
	if(ret)
	{
		return -1;
	}
	strcpy(value, "1");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIDU_DSCP(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIDU_DSCP, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIDU_DSCP(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if(atoi(value) < 0 || atoi(value) > 63)
	{
		return (-2);
	}

	ret = do_uci_set(DIDU_DSCP, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
		startUpload();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIDU_EthernetPriority(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIDU_EthernetPriority, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIDU_EthernetPriority(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if(atoi(value) < 0 || atoi(value) > 7)
	{
		return (-2);
	}

	ret = do_uci_set(DIDU_EthernetPriority, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
		startUpload();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIDU_TestFileLength(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIDU_TestFileLength, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIDU_TestFileLength(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIDU_TestFileLength, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
		startUpload();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIDU_TimeBasedTestDuration(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIDU_TimeBasedTestDuration, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIDU_TimeBasedTestDuration(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if(atoi(value) < 0 || atoi(value) > 999)
	{
		return (-2);
	}

	ret = do_uci_set(DIDU_TimeBasedTestDuration, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
		startUpload();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIDU_TimeBasedTestMeasurementInterval(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIDU_TimeBasedTestMeasurementInterval, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIDU_TimeBasedTestMeasurementInterval(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if(atoi(value) < 0 || atoi(value) > 999)
	{
		return (-2);
	}

	ret = do_uci_set(DIDU_TimeBasedTestMeasurementInterval, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
		startUpload();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIDU_TimeBasedTestMeasurementOffset(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIDU_TimeBasedTestMeasurementOffset, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIDU_TimeBasedTestMeasurementOffset(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if(atoi(value) < 0 || atoi(value) > 255)
	{
		return (-2);
	}

	ret = do_uci_set(DIDU_TimeBasedTestMeasurementOffset, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
		startUpload();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIDU_ProtocolVersion(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIDU_ProtocolVersion, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIDU_ProtocolVersion(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if(strcasecmp(value, "IPv4") != 0)
		return (-2);
	
	ret = do_uci_set(DIDU_ProtocolVersion, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
		startUpload();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIDU_NumberOfConnections(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIDU_NumberOfConnections, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "1");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIDU_NumberOfConnections(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DIDU_NumberOfConnections, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIDU_IPAddressUsed(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIDU_IPAddressUsed, value);
	if(ret)
	{
		return -1;
	}*/
	char interface[128] = {0};
	char interface2[128] = {0};
	char buff[128] = {0};
	a_infinfo wanStatus;
	int i = 0;

	ret = do_uci_get(DIDU_Interface, interface);
	if(ret)
	{
		return -1;
	}

	if(interface[0] != '\0')
	{
		for (i = 0; i <= IP_LAN_INSTANCE_NUM; i ++){
			memset(interface2, 0, sizeof(interface2));
			sprintf(interface2, "Device.IP.Interface.%d", lan_map[i].num);
			if(strcmp(interface, interface2) == 0)
			{
				sprintf(buff, "%s.ipaddr", lan_map[i].uci_path);
				ret = do_uci_get(buff, value);
				if(ret)
				{
					return -1;
				}
				break;
			}
		}

		if(strcmp(interface, IP_WAN_INTERFACE_PATH) == 0)
		{
			char wanmode[32] = {0};
			char wantype[32] = {0};
			getWanMode(wanmode);
			if (strcmp(wanmode, "pptp") == 0 || strcmp(wanmode, "l2tp") == 0)
				strcpy(wantype, "wan0");
			else
				strcpy(wantype, "wan");
			memset(&wanStatus, 0, sizeof(wanStatus));
			getInterfaceInfo(wantype, &wanStatus);
			if (wanStatus.status == 1)
			{
				strcpy(value, wanStatus.ipv4_address);
			}
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIDU_ROMTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIDU_ROMTime, value);
	if(ret)
	{
		return -1;
	}*/
	FILE *fp = NULL;
	char buff[256] = {0};
	char *p = NULL;
	
	fp = fopen("/tmp/TR143UP_DIAG.txt", "r");
	if(fp != NULL)
	{
		while(fgets(buff, sizeof(buff), fp))
		{
			if(strstr(buff, "ROMTime") != NULL)
			{
				p = strchr(buff, ':');
				if(p != NULL)
				{
					strcpy(value, p+1);
					break;
				}
			}
		}
		fclose(fp);
	}
	else
	{
		strcpy(value, "0001-01-01T00:00:00Z");
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIDU_BOMTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIDU_BOMTime, value);
	if(ret)
	{
		return -1;
	}*/
	FILE *fp = NULL;
	char buff[256] = {0};
	char *p = NULL;
	
	fp = fopen("/tmp/TR143UP_DIAG.txt", "r");
	if(fp != NULL)
	{
		while(fgets(buff, sizeof(buff), fp))
		{
			if(strstr(buff, "BOMTime") != NULL)
			{
				p = strchr(buff, ':');
				if(p != NULL)
				{
					strcpy(value, p+1);
					break;
				}
			}
		}
		fclose(fp);
	}
	else
	{
		strcpy(value, "0001-01-01T00:00:00Z");
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIDU_EOMTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIDU_EOMTime, value);
	if(ret)
	{
		return -1;
	}*/
	FILE *fp = NULL;
	char buff[256] = {0};
	char *p = NULL;
	
	fp = fopen("/tmp/TR143UP_DIAG.txt", "r");
	if(fp != NULL)
	{
		while(fgets(buff, sizeof(buff), fp))
		{
			if(strstr(buff, "EOMTime") != NULL)
			{
				p = strchr(buff, ':');
				if(p != NULL)
				{
					strcpy(value, p+1);
					break;
				}
			}
		}
		fclose(fp);
	}
	else
	{
		strcpy(value, "0001-01-01T00:00:00Z");
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIDU_TestBytesSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIDU_TestBytesSent, value);
	if(ret)
	{
		return -1;
	}*/
	FILE *fp = NULL;
	char buff[256] = {0};
	char *p = NULL;
	char tmp1[256] = {0};
	char tmp2[256] = {0};
	
	fp = fopen("/tmp/TR143UP_DIAG.txt", "r");
	if(fp != NULL)
	{
		while(fgets(buff, sizeof(buff), fp))
		{
			if(strstr(buff, "TestBytesSent") != NULL)
			{
				p = strchr(buff, ':');
				if(p != NULL)
				{
					strcpy(tmp1, p+1);
				}
			}
		}
		sprintf(value, "%d", atoi(tmp1)+atoi(tmp2));
		fclose(fp);
	}
	else
	{
		strcpy(value, "0");
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIDU_TotalBytesReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIDU_TotalBytesReceived, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "0");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIDU_TotalBytesSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIDU_TotalBytesSent, value);
	if(ret)
	{
		return -1;
	}*/
	FILE *fp = NULL;
	char buff[256] = {0};
	char *p = NULL;
	
	fp = fopen("/tmp/TR143UP_DIAG.txt", "r");
	if(fp != NULL)
	{
		while(fgets(buff, sizeof(buff), fp))
		{
			if(strstr(buff, "TotalBytesSent") != NULL)
			{
				p = strchr(buff, ':');
				if(p != NULL)
				{
					strcpy(value, p+1);
					break;
				}
			}
		}
		fclose(fp);
	}
	else
	{
		strcpy(value, "0");
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIDU_TestBytesSentUnderFullLoading(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIDU_TestBytesSentUnderFullLoading, value);
	if(ret)
	{
		return -1;
	}*/
	FILE *fp = NULL;
	char buff[256] = {0};
	char *p = NULL;
	char tmp1[256] = {0};
	char tmp2[256] = {0};
	
	fp = fopen("/tmp/TR143UP_DIAG.txt", "r");
	if(fp != NULL)
	{
		while(fgets(buff, sizeof(buff), fp))
		{
			if(strstr(buff, "TestBytesSent") != NULL)
			{
				p = strchr(buff, ':');
				if(p != NULL)
				{
					strcpy(tmp1, p+1);
				}
			}
		}
		sprintf(value, "%d", atoi(tmp1)+atoi(tmp2));
		fclose(fp);
	}
	else
	{
		strcpy(value, "0");
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIDU_TotalBytesReceivedUnderFullLoading(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIDU_TotalBytesReceivedUnderFullLoading, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "0");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIDU_TotalBytesSentUnderFullLoading(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIDU_TotalBytesSentUnderFullLoading, value);
	if(ret)
	{
		return -1;
	}*/
	FILE *fp = NULL;
	char buff[256] = {0};
	char *p = NULL;
	
	fp = fopen("/tmp/TR143UP_DIAG.txt", "r");
	if(fp != NULL)
	{
		while(fgets(buff, sizeof(buff), fp))
		{
			if(strstr(buff, "TotalBytesSent") != NULL)
			{
				p = strchr(buff, ':');
				if(p != NULL)
				{
					strcpy(value, p+1);
					break;
				}
			}
		}
		fclose(fp);
	}
	else
	{
		strcpy(value, "0");
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIDU_PeriodOfFullLoading(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIDU_PeriodOfFullLoading, value);
	if(ret)
	{
		return -1;
	}*/
	FILE *fp = NULL;
	char buff[256] = {0};
	char *p = NULL;
	char tmp1[256] = {0};
	char tmp2[256] = {0};
	
	fp = fopen("/tmp/TR143UP_DIAG.txt", "r");
	if(fp != NULL)
	{
		while(fgets(buff, sizeof(buff), fp))
		{
			if(strstr(buff, "BOMTime_org") != NULL)
			{
				p = strchr(buff, ':');
				if(p != NULL)
				{
					strcpy(tmp1, p+1);
				}
			}
			if(strstr(buff, "EOMTime_org") != NULL)
			{
				p = strchr(buff, ':');
				if(p != NULL)
				{
					strcpy(tmp2, p+1);
				}
			}
		}
		sprintf(value, "%f", atof(tmp2)-atof(tmp1));
		fclose(fp);
	}
	else
	{
		strcpy(value, "0");
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIDU_TCPOpenRequestTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIDU_TCPOpenRequestTime, value);
	if(ret)
	{
		return -1;
	}*/
	FILE *fp = NULL;
	char buff[256] = {0};
	char *p = NULL;
	
	fp = fopen("/tmp/TR143UP_DIAG.txt", "r");
	if(fp != NULL)
	{
		while(fgets(buff, sizeof(buff), fp))
		{
			if(strstr(buff, "TCPOpenRequestTime") != NULL)
			{
				p = strchr(buff, ':');
				if(p != NULL)
				{
					strcpy(value, p+1);
					break;
				}
			}
		}
		fclose(fp);
	}
	else
	{
		strcpy(value, "0001-01-01T00:00:00Z");
	}		
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIDU_TCPOpenResponseTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIDU_TCPOpenResponseTime, value);
	if(ret)
	{
		return -1;
	}*/
	FILE *fp = NULL;
	char buff[256] = {0};
	char *p = NULL;
	
	fp = fopen("/tmp/TR143UP_DIAG.txt", "r");
	if(fp != NULL)
	{
		while(fgets(buff, sizeof(buff), fp))
		{
			if(strstr(buff, "TCPOpenResponseTime") != NULL)
			{
				p = strchr(buff, ':');
				if(p != NULL)
				{
					strcpy(value, p+1);
					break;
				}
			}
		}
		fclose(fp);
	}
	else
	{
		strcpy(value, "0001-01-01T00:00:00Z");
	}		
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIDU_PerConnectionResultNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIDU_PerConnectionResultNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "1");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIDU_EnablePerConnectionResults(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIDU_EnablePerConnectionResults, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIDU_EnablePerConnectionResults(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	
	ret = do_uci_set(DIDU_EnablePerConnectionResults, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
		startUpload();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIDU_IncrementalResultNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIDU_IncrementalResultNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}
	strcpy(value, "0");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIDUPt_ROMTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIDUPt_ROMTime, value);
	if(ret)
	{
		return -1;
	}*/
	FILE *fp = NULL;
	char buff[256] = {0};
	char *p = NULL;
	
	fp = fopen("/tmp/TR143UP_DIAG.txt", "r");
	if(fp != NULL)
	{
		while(fgets(buff, sizeof(buff), fp))
		{
			if(strstr(buff, "ROMTime") != NULL)
			{
				p = strchr(buff, ':');
				if(p != NULL)
				{
					strcpy(value, p+1);
					break;
				}
			}
		}
		fclose(fp);
	}
	else
	{
		strcpy(value, "0001-01-01T00:00:00Z");
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIDUPt_BOMTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIDUPt_BOMTime, value);
	if(ret)
	{
		return -1;
	}*/
	FILE *fp = NULL;
	char buff[256] = {0};
	char *p = NULL;
	
	fp = fopen("/tmp/TR143UP_DIAG.txt", "r");
	if(fp != NULL)
	{
		while(fgets(buff, sizeof(buff), fp))
		{
			if(strstr(buff, "BOMTime") != NULL)
			{
				p = strchr(buff, ':');
				if(p != NULL)
				{
					strcpy(value, p+1);
					break;
				}
			}
		}
		fclose(fp);
	}
	else
	{
		strcpy(value, "0001-01-01T00:00:00Z");
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIDUPt_EOMTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIDUPt_EOMTime, value);
	if(ret)
	{
		return -1;
	}*/
	FILE *fp = NULL;
	char buff[256] = {0};
	char *p = NULL;
	
	fp = fopen("/tmp/TR143UP_DIAG.txt", "r");
	if(fp != NULL)
	{
		while(fgets(buff, sizeof(buff), fp))
		{
			if(strstr(buff, "EOMTime") != NULL)
			{
				p = strchr(buff, ':');
				if(p != NULL)
				{
					strcpy(value, p+1);
					break;
				}
			}
		}
		fclose(fp);
	}
	else
	{
		strcpy(value, "0001-01-01T00:00:00Z");
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIDUPt_TestBytesSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIDUPt_TestBytesSent, value);
	if(ret)
	{
		return -1;
	}*/
	FILE *fp = NULL;
	char buff[256] = {0};
	char *p = NULL;
	char tmp1[256] = {0};
	char tmp2[256] = {0};
	
	fp = fopen("/tmp/TR143UP_DIAG.txt", "r");
	if(fp != NULL)
	{
		while(fgets(buff, sizeof(buff), fp))
		{
			if(strstr(buff, "TestBytesSent") != NULL)
			{
				p = strchr(buff, ':');
				if(p != NULL)
				{
					strcpy(tmp1, p+1);
				}
			}
		}
		sprintf(value, "%d", atoi(tmp1)+atoi(tmp2));
		fclose(fp);
	}
	else
	{
		strcpy(value, "0");
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIDUPt_TotalBytesReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIDUPt_TotalBytesReceived, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "0");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIDUPt_TotalBytesSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIDUPt_TotalBytesSent, value);
	if(ret)
	{
		return -1;
	}*/
	FILE *fp = NULL;
	char buff[256] = {0};
	char *p = NULL;
	
	fp = fopen("/tmp/TR143UP_DIAG.txt", "r");
	if(fp != NULL)
	{
		while(fgets(buff, sizeof(buff), fp))
		{
			if(strstr(buff, "TotalBytesSent") != NULL)
			{
				p = strchr(buff, ':');
				if(p != NULL)
				{
					strcpy(value, p+1);
					break;
				}
			}
		}
		fclose(fp);
	}
	else
	{
		strcpy(value, "0");
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIDUPt_TCPOpenRequestTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIDUPt_TCPOpenRequestTime, value);
	if(ret)
	{
		return -1;
	}*/
	FILE *fp = NULL;
	char buff[256] = {0};
	char *p = NULL;
	
	fp = fopen("/tmp/TR143UP_DIAG.txt", "r");
	if(fp != NULL)
	{
		while(fgets(buff, sizeof(buff), fp))
		{
			if(strstr(buff, "TCPOpenRequestTime") != NULL)
			{
				p = strchr(buff, ':');
				if(p != NULL)
				{
					strcpy(value, p+1);
					break;
				}
			}
		}
		fclose(fp);
	}
	else
	{
		strcpy(value, "0001-01-01T00:00:00Z");
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIDUPt_TCPOpenResponseTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIDUPt_TCPOpenResponseTime, value);
	if(ret)
	{
		return -1;
	}*/
	FILE *fp = NULL;
	char buff[256] = {0};
	char *p = NULL;
	
	fp = fopen("/tmp/TR143UP_DIAG.txt", "r");
	if(fp != NULL)
	{
		while(fgets(buff, sizeof(buff), fp))
		{
			if(strstr(buff, "TCPOpenResponseTime") != NULL)
			{
				p = strchr(buff, ':');
				if(p != NULL)
				{
					strcpy(value, p+1);
					break;
				}
			}
		}
		fclose(fp);
	}
	else
	{
		strcpy(value, "0001-01-01T00:00:00Z");
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIDUIt_TestBytesSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIDUIt_TestBytesSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIDUIt_TotalBytesReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIDUIt_TotalBytesReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIDUIt_TotalBytesSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIDUIt_TotalBytesSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIDUIt_StartTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIDUIt_StartTime, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIDUIt_EndTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIDUIt_EndTime, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIDU_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIDU_Enable, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIDU_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIDU_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
		set_udpecho();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIDU_Interface_2473(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIDU_Interface_2473, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIDU_Interface_2473(char * path_name, char *value)
{
	int ret = 0;
	int i = 0;
	char buff[64] = {0};
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	/*for (i = 0; i <= IP_LAN_INSTANCE_NUM; i ++){
		memset(buff, 0, sizeof(buff));
		sprintf(buff, "Device.IP.Interface.%d", lan_map[i].num);
		if (strcasecmp(value, buff) != 0 && strcasecmp(value, IP_WAN_INTERFACE_PATH) != 0)
			return (-2);
	}*/

	if(strlen(value) > 0 && checkInterface(value) != 1)
	{
		return (-2);
	}
	
	ret = do_uci_set(DIDU_Interface_2473, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIDU_SourceIPAddress(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIDU_SourceIPAddress, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIDU_SourceIPAddress(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if(strlen(value) > 45)
		return -2;

	if (isValidIP(value) == 0)
		return -2;

	ret = do_uci_set(DIDU_SourceIPAddress, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIDU_UDPPort(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIDU_UDPPort, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIDU_UDPPort(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (atoi(value) < 1 || atoi(value) > 65535)
		return (-2);
	
	ret = do_uci_set(DIDU_UDPPort, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
		set_udpecho();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIDU_EchoPlusEnabled(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIDU_EchoPlusEnabled, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIDU_EchoPlusEnabled(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	
	ret = do_uci_set(DIDU_EchoPlusEnabled, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIDU_EchoPlusSupported(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIDU_EchoPlusSupported, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIDU_PacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIDU_PacketsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIDU_PacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIDU_PacketsReceived, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIDU_PacketsResponded(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIDU_PacketsResponded, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIDU_PacketsResponded(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIDU_PacketsResponded, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}

int get_DIDU_BytesReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIDU_BytesReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIDU_BytesReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIDU_BytesReceived, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIDU_BytesResponded(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIDU_BytesResponded, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIDU_BytesResponded(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIDU_BytesResponded, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}

int get_DIDU_TimeFirstPacketReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIDU_TimeFirstPacketReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIDU_TimeFirstPacketReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIDU_TimeFirstPacketReceived, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIDU_TimeLastPacketReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIDU_TimeLastPacketReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIDU_TimeLastPacketReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIDU_TimeLastPacketReceived, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}

int get_DIDU_DiagnosticsState_2488(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIDU_DiagnosticsState_2488, value);
	if(ret)
	{
		strcpy(value, "None");
		ret = 0;
	}
	if (strcmp(value, " ") == 0)
		strcpy(value, "None");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIDU_DiagnosticsState_2488(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DIDU_DiagnosticsState_2488, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/

	if(strcasecmp(value, "requested") == 0)
	{
		ret = do_uci_set(DIDU_DiagnosticsState_2488, value);
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit(MS);
			if(ret)
			{
				return (-1);
			}
		}
		startUDPEcho();
	}
	
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIDU_Interface_2490(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIDU_Interface_2490, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIDU_Interface_2490(char * path_name, char *value)
{
	int ret = 0;
	int i = 0;
	char buff[64] = {0};
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	/*for (i = 0; i <= IP_LAN_INSTANCE_NUM; i ++){
		memset(buff, 0, sizeof(buff));
		sprintf(buff, "Device.IP.Interface.%d", lan_map[i].num);
		if (strcasecmp(value, buff) != 0 && strcasecmp(value, IP_WAN_INTERFACE_PATH) != 0)
			return (-2);
	}*/

	if(strlen(value) > 0 && checkInterface(value) != 1)
	{
		return (-2);
	}
	
	ret = do_uci_set(DIDU_Interface_2490, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
		startUDPEcho();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIDU_Host(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIDU_Host, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIDU_Host(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if(strlen(value) > 256)
	{
		return (-2);
	}
	
	ret = do_uci_set(DIDU_Host, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
		startUDPEcho();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIDU_Port(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIDU_Port, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIDU_Port(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if(atoi(value) < 1 || atoi(value) > 65535)
	{
		return (-2);
	}

	if (checkPortUsing(atoi(value)) == 1)
		return -2;
	
	ret = do_uci_set(DIDU_Port, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
		startUDPEcho();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIDU_NumberOfRepetitions(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIDU_NumberOfRepetitions, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIDU_NumberOfRepetitions(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if(atoi(value) < 1)
	{
		return (-2);
	}
	
	ret = do_uci_set(DIDU_NumberOfRepetitions, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
		startUDPEcho();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIDU_Timeout(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIDU_Timeout, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIDU_Timeout(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if(atoi(value) < 1)
	{
		return (-2);
	}

	ret = do_uci_set(DIDU_Timeout, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
		startUDPEcho();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIDU_DataBlockSize(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIDU_DataBlockSize, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIDU_DataBlockSize(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if(atoi(value) < 1 || atoi(value) > 65535)
	{
		return (-2);
	}

	ret = do_uci_set(DIDU_DataBlockSize, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
		startUDPEcho();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIDU_DSCP_2502(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIDU_DSCP_2502, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIDU_DSCP_2502(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if(atoi(value) < 0 || atoi(value) > 63)
	{
		return (-2);
	}
	
	ret = do_uci_set(DIDU_DSCP_2502, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
		startUDPEcho();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIDU_InterTransmissionTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIDU_InterTransmissionTime, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIDU_InterTransmissionTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	
	if(atoi(value) < 1 || atoi(value) > 65535)
	{
		return (-2);
	}

	ret = do_uci_set(DIDU_InterTransmissionTime, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
		startUDPEcho();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIDU_ProtocolVersion_2506(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIDU_ProtocolVersion_2506, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIDU_ProtocolVersion_2506(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if(strcasecmp(value, "IPv4") != 0)
		return (-2);
	
	ret = do_uci_set(DIDU_ProtocolVersion_2506, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
		startUDPEcho();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIDU_IPAddressUsed_2508(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIDU_IPAddressUsed_2508, value);
	if(ret)
	{
		return -1;
	}*/
	char interface[128] = {0};
	char interface2[128] = {0};
	char buff[128] = {0};
	a_infinfo wanStatus;
	int i = 0;

	ret = do_uci_get(DIDU_Interface_2490, interface);
	if(ret)
	{
		return -1;
	}

	if(interface[0] != '\0')
	{
		for (i = 0; i <= IP_LAN_INSTANCE_NUM; i ++){
			memset(interface2, 0, sizeof(interface2));
			sprintf(interface2, "Device.IP.Interface.%d", lan_map[i].num);
			if(strcmp(interface, interface2) == 0)
			{
				sprintf(buff, "%s.ipaddr", lan_map[i].uci_path);
				ret = do_uci_get(buff, value);
				if(ret)
				{
					return -1;
				}
				break;
			}
		}

		if(strcmp(interface, IP_WAN_INTERFACE_PATH) == 0)
		{
			char wanmode[32] = {0};
			char wantype[32] = {0};
			getWanMode(wanmode);
			if (strcmp(wanmode, "pptp") == 0 || strcmp(wanmode, "l2tp") == 0)
				strcpy(wantype, "wan0");
			else
				strcpy(wantype, "wan");
			memset(&wanStatus, 0, sizeof(wanStatus));
			getInterfaceInfo(wantype, &wanStatus);
			if (wanStatus.status == 1)
			{
				strcpy(value, wanStatus.ipv4_address);
			}
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIDU_SuccessCount(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIDU_SuccessCount, value);
	if(ret)
	{
		return -1;
	}*/
	FILE *fp = NULL;
	char buff[128] = {0};
	char *p= NULL;
	
	fp = fopen("/tmp/udpechoresult", "r");
	if(fp != NULL)
	{
		
		while(fgets(buff, sizeof(buff), fp))
		{
			if(strstr(buff, "SuccessCount") != NULL)
			{
				p = strchr(buff, '=');
				if(p != NULL)
				{
					strcpy(value, p+1);
				}
			}
		}
		fclose(fp);
	}
	else
	{
		strcpy(value, "0");
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIDU_FailureCount(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIDU_FailureCount, value);
	if(ret)
	{
		return -1;
	}*/
	FILE *fp = NULL;
	char buff[128] = {0};
	char *p= NULL;
	
	fp = fopen("/tmp/udpechoresult", "r");
	if(fp != NULL)
	{
		while(fgets(buff, sizeof(buff), fp))
		{
			if(strstr(buff, "FailureCount") != NULL)
			{
				p = strchr(buff, '=');
				if(p != NULL)
				{
					strcpy(value, p+1);
				}
			}
		}
		fclose(fp);
	}
	else
	{
		strcpy(value, "0");
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIDU_AverageResponseTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIDU_AverageResponseTime, value);
	if(ret)
	{
		return -1;
	}*/
	FILE *fp = NULL;
	char buff[128] = {0};
	char *p= NULL;
	
	fp = fopen("/tmp/udpechoresult", "r");
	if(fp != NULL)
	{
		
		while(fgets(buff, sizeof(buff), fp))
		{
			if(strstr(buff, "AverageResponseTime") != NULL)
			{
				p = strchr(buff, '=');
				if(p != NULL)
				{
					strcpy(value, p+1);
				}
			}
		}
		fclose(fp);
	}
	else
	{
		strcpy(value, "0");
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIDU_MinimumResponseTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIDU_MinimumResponseTime, value);
	if(ret)
	{
		return -1;
	}*/
	FILE *fp = NULL;
	char buff[128] = {0};
	char *p= NULL;
	
	fp = fopen("/tmp/udpechoresult", "r");
	if(fp != NULL)
	{
		
		while(fgets(buff, sizeof(buff), fp))
		{
			if(strstr(buff, "MinimumResponseTime") != NULL)
			{
				p = strchr(buff, '=');
				if(p != NULL)
				{
					strcpy(value, p+1);
				}
			}
		}
		fclose(fp);
	}
	else
	{
		strcpy(value, "0");
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIDU_MaximumResponseTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIDU_MaximumResponseTime, value);
	if(ret)
	{
		return -1;
	}*/
	FILE *fp = NULL;
	char buff[128] = {0};
	char *p= NULL;
	
	fp = fopen("/tmp/udpechoresult", "r");
	if(fp != NULL)
	{
		
		while(fgets(buff, sizeof(buff), fp))
		{
			if(strstr(buff, "MaximumResponseTime") != NULL)
			{
				p = strchr(buff, '=');
				if(p != NULL)
				{
					strcpy(value, p+1);
				}
			}
		}
		fclose(fp);
	}
	else
	{
		strcpy(value, "0");
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIDU_EnableIndividualPacketResults(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIDU_EnableIndividualPacketResults, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIDU_EnableIndividualPacketResults(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	
	ret = do_uci_set(DIDU_EnableIndividualPacketResults, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
		startUDPEcho();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIDU_IndividualPacketResultNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIDU_IndividualPacketResultNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}*/

	ret = do_uci_get(DIDU_NumberOfRepetitions, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIDU_UDPEchoDiagnosticsMaxResults(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIDU_UDPEchoDiagnosticsMaxResults, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "100");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIDUIt_PacketSuccess(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIDUIt_PacketSuccess, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".IndividualPacketResult.");
	char *p = NULL;
	char buff[256] = {0};
	char name[64] = {0};
	FILE *fp = NULL;
	
	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(IndividualPacketResultMap, buff, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			fp = fopen("/tmp/udpechoresult", "r");
			
			if(fp != NULL)
			{
				sprintf(name, "PacketSuccess%s", buff);
				while(fgets(buff, sizeof(buff), fp))
				{
					if(strstr(buff, name) != NULL)
					{
						if((p = strchr(buff, '=')) != NULL)
						{
							strcpy(value, p+1);
							break;
						}
					}
				}
				fclose(fp);
			}
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIDUIt_PacketSendTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIDUIt_PacketSendTime, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".IndividualPacketResult.");
	char *p = NULL;
	char buff[256] = {0};
	char name[64] = {0};
	FILE *fp = NULL;
	
	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(IndividualPacketResultMap, buff, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			fp = fopen("/tmp/udpechoresult", "r");
			
			if(fp != NULL)
			{
				sprintf(name, "PacketSendTime%s", buff);
				while(fgets(buff, sizeof(buff), fp))
				{
					if(strstr(buff, name) != NULL)
					{
						if((p = strchr(buff, '=')) != NULL)
						{
							strcpy(value, p+1);
							break;
						}
					}
				}
				fclose(fp);
			}
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIDUIt_PacketReceiveTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIDUIt_PacketReceiveTime, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".IndividualPacketResult.");
	char *p = NULL;
	char buff[256] = {0};
	char name[64] = {0};
	FILE *fp = NULL;
	
	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(IndividualPacketResultMap, buff, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			fp = fopen("/tmp/udpechoresult", "r");
			
			if(fp != NULL)
			{
				sprintf(name, "PacketReceiveTime%s", buff);
				while(fgets(buff, sizeof(buff), fp))
				{
					if(strstr(buff, name) != NULL)
					{
						if((p = strchr(buff, '=')) != NULL)
						{
							strcpy(value, p+1);
							break;
						}
					}
				}
				fclose(fp);
			}
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIDUIt_TestGenSN(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIDUIt_TestGenSN, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".IndividualPacketResult.");
	char *p = NULL;
	char buff[256] = {0};
	char name[64] = {0};
	FILE *fp = NULL;
	
	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(IndividualPacketResultMap, buff, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			fp = fopen("/tmp/udpechoresult", "r");
			
			if(fp != NULL)
			{
				sprintf(name, "TestGenSN%s", buff);
				while(fgets(buff, sizeof(buff), fp))
				{
					if(strstr(buff, name) != NULL)
					{
						if((p = strchr(buff, '=')) != NULL)
						{
							strcpy(value, p+1);
							break;
						}
					}
				}
				fclose(fp);
			}
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIDUIt_TestRespSN(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIDUIt_TestRespSN, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".IndividualPacketResult.");
	char *p = NULL;
	char buff[256] = {0};
	char name[64] = {0};
	FILE *fp = NULL;
	
	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(IndividualPacketResultMap, buff, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			fp = fopen("/tmp/udpechoresult", "r");
			
			if(fp != NULL)
			{
				sprintf(name, "TestRespSN%s", buff);
				while(fgets(buff, sizeof(buff), fp))
				{
					if(strstr(buff, name) != NULL)
					{
						if((p = strchr(buff, '=')) != NULL)
						{
							strcpy(value, p+1);
							break;
						}
					}
				}
				fclose(fp);
			}
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIDUIt_TestRespRcvTimeStamp(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIDUIt_TestRespRcvTimeStamp, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".IndividualPacketResult.");
	char *p = NULL;
	char buff[256] = {0};
	char name[64] = {0};
	FILE *fp = NULL;
	
	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(IndividualPacketResultMap, buff, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			fp = fopen("/tmp/udpechoresult", "r");
			
			if(fp != NULL)
			{
				sprintf(name, "TestRespRcvTimeStamp%s", buff);
				while(fgets(buff, sizeof(buff), fp))
				{
					if(strstr(buff, name) != NULL)
					{
						if((p = strchr(buff, '=')) != NULL)
						{
							strcpy(value, p+1);
							break;
						}
					}
				}
				fclose(fp);
			}
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIDUIt_TestRespReplyTimeStamp(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIDUIt_TestRespReplyTimeStamp, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".IndividualPacketResult.");
	char *p = NULL;
	char buff[256] = {0};
	char name[64] = {0};
	FILE *fp = NULL;
	
	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(IndividualPacketResultMap, buff, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			fp = fopen("/tmp/udpechoresult", "r");
			
			if(fp != NULL)
			{
				sprintf(name, "TestRespReplyTimeStamp%s", buff);
				while(fgets(buff, sizeof(buff), fp))
				{
					if(strstr(buff, name) != NULL)
					{
						if((p = strchr(buff, '=')) != NULL)
						{
							strcpy(value, p+1);
							break;
						}
					}
				}
				fclose(fp);
			}
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIDUIt_TestRespReplyFailureCount(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIDUIt_TestRespReplyFailureCount, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".IndividualPacketResult.");
	char *p = NULL;
	char buff[256] = {0};
	char name[64] = {0};
	FILE *fp = NULL;
	
	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(IndividualPacketResultMap, buff, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			fp = fopen("/tmp/udpechoresult", "r");
			
			if(fp != NULL)
			{
				sprintf(name, "TestRespReplyFailureCount%s", buff);
				while(fgets(buff, sizeof(buff), fp))
				{
					if(strstr(buff, name) != NULL)
					{
						if((p = strchr(buff, '=')) != NULL)
						{
							strcpy(value, p+1);
							break;
						}
					}
				}
				fclose(fp);
			}
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIDS_DiagnosticsState(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIDS_DiagnosticsState, value);
	if(ret)
	{
		strcpy(value, "None");
		ret = 0;
	}
	if (strcmp(value, " ") == 0)
		strcpy(value, "None");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIDS_DiagnosticsState(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if(strcasecmp(value, "requested") == 0)
	{
		ret = do_uci_set(DIDS_DiagnosticsState, value);
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit(MS);
			if(ret)
			{
				return (-1);
			}
		}
		startServerSelection();
	}

	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIDS_Interface(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIDS_Interface, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIDS_Interface(char * path_name, char *value)
{
	int ret = 0;
	int i = 0;
	char buff[64] = {0};
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	/*for (i = 0; i <= IP_LAN_INSTANCE_NUM; i ++){
		memset(buff, 0, sizeof(buff));
		sprintf(buff, "Device.IP.Interface.%d", lan_map[i].num);
		if (strcasecmp(value, buff) != 0 && strcasecmp(value, IP_WAN_INTERFACE_PATH) != 0)
			return (-2);
	}*/

	if(strlen(value) > 0 && checkInterface(value) != 1)
	{
		return (-2);
	}

	ret = do_uci_set(DIDS_Interface, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
		startServerSelection();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIDS_ProtocolVersion(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIDS_ProtocolVersion, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIDS_ProtocolVersion(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if(strcasecmp(value, "IPv4") != 0)
		return (-2);
	
	ret = do_uci_set(DIDS_ProtocolVersion, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
		startServerSelection();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIDS_Protocol(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIDS_Protocol, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIDS_Protocol(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if(strcasecmp(value, "ICMP") != 0)
		return (-2);
	
	ret = do_uci_set(DIDS_Protocol, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
		startServerSelection();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIDS_HostList(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIDS_HostList, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIDS_HostList(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (strlen(value) > 256)
		return -2;
	
	ret = do_uci_set(DIDS_HostList, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
		startServerSelection();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIDS_NumberOfRepetitions(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIDS_NumberOfRepetitions, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIDS_NumberOfRepetitions(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (atoi(value) < 1)
		return -2;
	
	ret = do_uci_set(DIDS_NumberOfRepetitions, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
		startServerSelection();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIDS_Timeout(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIDS_Timeout, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIDS_Timeout(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (atoi(value) < 1)
		return -2;
	
	ret = do_uci_set(DIDS_Timeout, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
		startServerSelection();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIDS_FastestHost(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIDS_FastestHost, value);
	if(ret)
	{
		return -1;
	}*/
	FILE *fp = NULL;
	char buff[128] = {0};
	char avgtime[128] = {0};
	char host[128] = {0};
	char *p = NULL;
	char *q = NULL;
	char *s = NULL;
	double fastest = 0;

	fp = fopen("/tmp/pingresult", "r");//round-trip min/avg/max = 6.622/7.746/8.402 ms
	if(fp != NULL)
	{
		while(fgets(buff, sizeof(buff), fp))
		{
			
			p = strstr(buff, "ping statistics");
			if(p != NULL)
			{
				*(p-1) = '\0';				
				strcpy(host, &(buff[4]));
				tr_log(LOG_DEBUG,"host[%s]",host);
				continue;
			}

			p = strchr(buff, '=');
			if(p != NULL)
			{
				q = strchr(p, '/');
				s = strrchr(p, '/');
				if(q != NULL && s != NULL)
				{
					*s = '\0';
					strcpy(avgtime, q+1);
					if(fastest == 0)
					{
						fastest = atof(avgtime);
						strcpy(value, host);							
					}
					else
					{
						if(fastest > atof(avgtime))
						{
							fastest = atof(avgtime);
							strcpy(value, host);							
						}
					}
				}
			}
		}
		fclose(fp);
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIDS_MinimumResponseTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIDS_MinimumResponseTime, value);
	if(ret)
	{
		return -1;
	}*/
	FILE *fp = NULL;
	char buff[128] = {0};
	char avgtime[128] = {0};
	char mintime[128] = {0};
	char host[128] = {0};
	char *p = NULL;
	char *q = NULL;
	char *s = NULL;
	double fastest = 0;

	fp = fopen("/tmp/pingresult", "r");//round-trip min/avg/max = 6.622/7.746/8.402 ms
	if(fp != NULL)
	{
		while(fgets(buff, sizeof(buff), fp))
		{
			p = strchr(buff, '=');
			if(p != NULL)
			{
				q = strchr(p, '/');
				if(q != NULL)
				{
					strncpy(mintime, p+2, q-(p+2));
				}

				q = strchr(p, '/');
				s = strrchr(p, '/');
				if(q != NULL && s != NULL)
				{
					*s = '\0';
					strcpy(avgtime, q+1);
					if(fastest == 0)
					{
						fastest = atof(avgtime);
						strcpy(value, mintime); 						
					}
					else
					{
						if(fastest > atof(avgtime))
						{
							fastest = atof(avgtime);
							strcpy(value, mintime);							
						}
					}
				}
			}
		}
		fclose(fp);
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIDS_AverageResponseTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIDS_AverageResponseTime, value);
	if(ret)
	{
		return -1;
	}*/
	FILE *fp = NULL;
	char buff[128] = {0};
	char avgtime[128] = {0};
	char host[128] = {0};
	char *p = NULL;
	char *q = NULL;
	char *s = NULL;
	double fastest = 0;

	fp = fopen("/tmp/pingresult", "r");//round-trip min/avg/max = 6.622/7.746/8.402 ms
	if(fp != NULL)
	{
		while(fgets(buff, sizeof(buff), fp))
		{
			p = strchr(buff, '=');
			if(p != NULL)
			{
				q = strchr(p, '/');
				s = strrchr(p, '/');
				if(q != NULL && s != NULL)
				{
					*s = '\0';
					strcpy(avgtime, q+1);
					if(fastest == 0)
					{
						fastest = atof(avgtime);
						strcpy(value, avgtime); 						
					}
					else
					{
						if(fastest > atof(avgtime))
						{
							fastest = atof(avgtime);
							strcpy(value, avgtime);							
						}
					}
				}
			}
		}
		fclose(fp);
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIDS_MaximumResponseTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIDS_MaximumResponseTime, value);
	if(ret)
	{
		return -1;
	}*/
	FILE *fp = NULL;
	char buff[128] = {0};
	char avgtime[128] = {0};
	char maxtime[128] = {0};
	char host[128] = {0};
	char *p = NULL;
	char *q = NULL;
	char *s = NULL;
	double fastest = 0;

	fp = fopen("/tmp/pingresult", "r");//round-trip min/avg/max = 6.622/7.746/8.402 ms
	if(fp != NULL)
	{
		while(fgets(buff, sizeof(buff), fp))
		{
			
			p = strchr(buff, '=');
			if(p != NULL)
			{
				q = strrchr(p, '/');
				s = strstr(p, "ms");
				if(q != NULL && s != NULL)
				{
					*s = '\0';
					strcpy(maxtime, q+1);
				}

				q = strchr(p, '/');
				s = strrchr(p, '/');
				if(q != NULL && s != NULL)
				{
					*s = '\0';
					strcpy(avgtime, q+1);
					if(fastest == 0)
					{
						fastest = atof(avgtime);
						strcpy(value, maxtime); 						
					}
					else
					{
						if(fastest > atof(avgtime))
						{
							fastest = atof(avgtime);
							strcpy(value, maxtime);							
						}
					}
				}
			}
		}
		fclose(fp);
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIDS_IPAddressUsed(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIDS_IPAddressUsed, value);
	if(ret)
	{
		return -1;
	}*/
	char interface[128] = {0};
	char interface2[128] = {0};
	char buff[32] = {0};
	a_infinfo wanStatus;
	int i = 0;

	ret = do_uci_get(DIDS_Interface, interface);
	if(ret)
	{
		return -1;
	}

	if(interface[0] != '\0')
	{
		for (i = 0; i <= IP_LAN_INSTANCE_NUM; i ++){
			memset(interface2, 0, sizeof(interface2));
			sprintf(interface2, "Device.IP.Interface.%d", lan_map[i].num);
			if(strcmp(interface, interface2) == 0)
			{
				sprintf(buff, "%s.ipaddr", lan_map[i].uci_path);
				ret = do_uci_get(buff, value);
				if(ret)
				{
					return -1;
				}
				break;
			}
		}

		if(strcmp(interface, IP_WAN_INTERFACE_PATH) == 0)
		{
			char wanmode[32] = {0};
			char wantype[32] = {0};
			getWanMode(wanmode);
			if (strcmp(wanmode, "pptp") == 0 || strcmp(wanmode, "l2tp") == 0)
				strcpy(wantype, "wan0");
			else
				strcpy(wantype, "wan");
			memset(&wanStatus, 0, sizeof(wanStatus));
			getInterfaceInfo(wantype, &wanStatus);
			if (wanStatus.status == 1)
			{
				strcpy(value, wanStatus.ipv4_address);
			}
		}
	}	
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DI_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DI_Enable, value);
	if(ret)
	{
		strcpy(value, "0");
		ret = 0;
	}
	if (atoi(value) != 1)
		strcpy(value, "0");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DI_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DI_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
		//ret = 1; //means need to reboot for taking effect
		if(atoi(value) == 1)
		{
			system("/etc/init.d/ipsec start");
		}
		else if(atoi(value) == 0)
		{
			system("/etc/init.d/ipsec stop");
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DI_Status(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DI_Status, value);
	if(ret)
	{
		return -1;
	}*/
	char tmp[32] = {0};
	
	ret = do_uci_get(DI_Enable, tmp);
	if(ret)
	{
		strcpy(tmp, "0");
		ret = 0;
	}

	if(atoi(tmp) == 1)
	{
		strcpy(value, "Enabled");
	}
	else
	{
		strcpy(value, "Disabled");
	}
	
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DI_AHSupported(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DI_AHSupported, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "1");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DI_IKEv2SupportedEncryptionAlgorithms(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DI_IKEv2SupportedEncryptionAlgorithms, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "DES,3DES,RC5,IDEA,CAST,BLOWFISH,3IDEA,AES-CBC,AES-CTR,AES-CCM-8,AES-CCM-12,AES-CCM-16,AES-GCM-8,AES-GCM-12,AES-GCM-16,CAMELLIA-CBC");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DI_ESPSupportedEncryptionAlgorithms(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DI_ESPSupportedEncryptionAlgorithms, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "DES-IV64,DES,3DES,RC5,IDEA,CAST,BLOWFISH,3IDEA,DES-IV32,AES-CBC,AES-CTR,AES-CCM-8,AES-CCM-12,AES-CCM-16,AES-GCM-8,AES-GCM-12,AES-GCM-16,NULL-AUTH-AES-GMAC,CAMELLIA-CBC,CAMELLIA-CTR,CAMELLIA-CCM-8,CAMELLIA-CCM-12,CAMELLIA-CCM-16");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DI_IKEv2SupportedPseudoRandomFunctions(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DI_IKEv2SupportedPseudoRandomFunctions, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "HMAC-MD5,HMAC-SHA1,HMAC-TIGER,AES-128-XCBC,HMAC-SHA2-256,HMAC-SHA2-384,HMAC-SHA2-512,AES-128-CMAC");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DI_SupportedIntegrityAlgorithms(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DI_SupportedIntegrityAlgorithms, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "HMAC-MD5-96,HMAC-SHA1-96,DES-MAC,KPDK-MD5,AES-XCBC-96,HMAC-MD5-128,HMAC-SHA1-160,AES-CMAC-96,AES-128-GMAC,AES-192-GMAC,AES-256-GMAC,HMAC-SHA2-256-128,HMAC-SHA2-256-192,HMAC-SHA2-256-256");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DI_SupportedDiffieHellmanGroupTransforms(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DI_SupportedDiffieHellmanGroupTransforms, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "MODP-768,MODP-1024,MODP-1536,MODP-2048,MODP-3072,MODP-4096,MODP-6144,MODP-8192,ECP-256,ECP-384,ECP-521,MODP-1024-PRIME-160,MODP-2048-PRIME-224,MODP-2048-PRIME-256,ECP-192,ECP-224");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DI_MaxFilterEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DI_MaxFilterEntries, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "0");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DI_MaxProfileEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DI_MaxProfileEntries, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "0");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DI_FilterNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	char tmp[32] = {0};
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	ret = do_uci_get(DI_FilterNumberOfEntries, tmp);
	if(ret)
	{
		return -1;
	}
	sprintf(value, "%d", atoi(tmp));
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DI_ProfileNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char tmp[32] = {0};
	ret = do_uci_get(DI_ProfileNumberOfEntries, tmp);
	if(ret)
	{
		return -1;
	}
	sprintf(value, "%d", atoi(tmp));
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DI_TunnelNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*char tmp[32] = {0};
	ret = do_uci_get(DI_TunnelNumberOfEntries, tmp);
	if(ret)
	{
		return -1;
	}*/
	FILE *fp = NULL;
	char line[512] = {0};
	int found = 0;
	char desip[128] = {0};
	char inf[32] = {0};
	
	if((fp=popen("ipsec setup status","r")) != NULL)
	{
		while(fgets(line,sizeof(line)-1,fp))
		{
			if(strstr(line, "tunnels up") != NULL)
			{
				found = 1;
			}
		}
		pclose(fp);
	}

	if(found == 1)
	{
		strcpy(value, "1");
	}
	else
	{
		strcpy(value, "0");
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DI_IKEv2SANumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char tmp[32] = {0};
	ret = do_uci_get(DI_IKEv2SANumberOfEntries, tmp);
	if(ret)
	{
		return -1;
	}
	sprintf(value, "%d", atoi(tmp));
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIS_NegotiationFailures(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIS_NegotiationFailures, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIS_BytesSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIS_BytesSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIS_BytesReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIS_BytesReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIS_PacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIS_PacketsSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIS_PacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIS_PacketsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIS_ErrorsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIS_ErrorsSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIS_UnknownSPIErrors(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIS_UnknownSPIErrors, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIS_DecryptionErrors(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIS_DecryptionErrors, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIS_IntegrityErrors(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIS_IntegrityErrors, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIS_ReplayErrors(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIS_ReplayErrors, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIS_PolicyErrors(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIS_PolicyErrors, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIS_OtherReceiveErrors(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIS_OtherReceiveErrors, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIFt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIFt_Enable, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIFt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIFt_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIFt_Status(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIFt_Status, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIFt_Order(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIFt_Order, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIFt_Order(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIFt_Order, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIFt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIFt_Alias, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIFt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIFt_Alias, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIFt_Interface(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIFt_Interface, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIFt_Interface(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIFt_Interface, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIFt_AllInterfaces(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIFt_AllInterfaces, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIFt_AllInterfaces(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIFt_AllInterfaces, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIFt_DestIP(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIFt_DestIP, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIFt_DestIP(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIFt_DestIP, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIFt_DestMask(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIFt_DestMask, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIFt_DestMask(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIFt_DestMask, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIFt_DestIPExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIFt_DestIPExclude, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIFt_DestIPExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIFt_DestIPExclude, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIFt_SourceIP(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIFt_SourceIP, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIFt_SourceIP(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIFt_SourceIP, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIFt_SourceMask(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIFt_SourceMask, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIFt_SourceMask(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIFt_SourceMask, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIFt_SourceIPExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIFt_SourceIPExclude, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIFt_SourceIPExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIFt_SourceIPExclude, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIFt_Protocol(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIFt_Protocol, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIFt_Protocol(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIFt_Protocol, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIFt_ProtocolExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIFt_ProtocolExclude, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIFt_ProtocolExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIFt_ProtocolExclude, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIFt_DestPort(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIFt_DestPort, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIFt_DestPort(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIFt_DestPort, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIFt_DestPortRangeMax(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIFt_DestPortRangeMax, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIFt_DestPortRangeMax(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIFt_DestPortRangeMax, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIFt_DestPortExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIFt_DestPortExclude, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIFt_DestPortExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIFt_DestPortExclude, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIFt_SourcePort(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIFt_SourcePort, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIFt_SourcePort(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIFt_SourcePort, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIFt_SourcePortRangeMax(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIFt_SourcePortRangeMax, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIFt_SourcePortRangeMax(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIFt_SourcePortRangeMax, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIFt_SourcePortExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIFt_SourcePortExclude, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIFt_SourcePortExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIFt_SourcePortExclude, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIFt_ProcessingChoice(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIFt_ProcessingChoice, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIFt_ProcessingChoice(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIFt_ProcessingChoice, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIFt_Profile(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIFt_Profile, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIFt_Profile(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIFt_Profile, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIPt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIPt_Alias, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIPt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIPt_Alias, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIPt_MaxChildSAs(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIPt_MaxChildSAs, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIPt_MaxChildSAs(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIPt_MaxChildSAs, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIPt_RemoteEndpoints(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIPt_RemoteEndpoints, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIPt_RemoteEndpoints(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIPt_RemoteEndpoints, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIPt_ForwardingPolicy(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIPt_ForwardingPolicy, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIPt_ForwardingPolicy(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIPt_ForwardingPolicy, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIPt_Protocol(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIPt_Protocol, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIPt_Protocol(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIPt_Protocol, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIPt_IKEv2AuthenticationMethod(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIPt_IKEv2AuthenticationMethod, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIPt_IKEv2AuthenticationMethod(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIPt_IKEv2AuthenticationMethod, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIPt_IKEv2AllowedEncryptionAlgorithms(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIPt_IKEv2AllowedEncryptionAlgorithms, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIPt_IKEv2AllowedEncryptionAlgorithms(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIPt_IKEv2AllowedEncryptionAlgorithms, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIPt_ESPAllowedEncryptionAlgorithms(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIPt_ESPAllowedEncryptionAlgorithms, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIPt_ESPAllowedEncryptionAlgorithms(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIPt_ESPAllowedEncryptionAlgorithms, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIPt_IKEv2AllowedPseudoRandomFunctions(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIPt_IKEv2AllowedPseudoRandomFunctions, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIPt_IKEv2AllowedPseudoRandomFunctions(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIPt_IKEv2AllowedPseudoRandomFunctions, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIPt_IKEv2AllowedIntegrityAlgorithms(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIPt_IKEv2AllowedIntegrityAlgorithms, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIPt_IKEv2AllowedIntegrityAlgorithms(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIPt_IKEv2AllowedIntegrityAlgorithms, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIPt_AHAllowedIntegrityAlgorithms(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIPt_AHAllowedIntegrityAlgorithms, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIPt_AHAllowedIntegrityAlgorithms(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIPt_AHAllowedIntegrityAlgorithms, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIPt_ESPAllowedIntegrityAlgorithms(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIPt_ESPAllowedIntegrityAlgorithms, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIPt_ESPAllowedIntegrityAlgorithms(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIPt_ESPAllowedIntegrityAlgorithms, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIPt_IKEv2AllowedDiffieHellmanGroupTransforms(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIPt_IKEv2AllowedDiffieHellmanGroupTransforms, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIPt_IKEv2AllowedDiffieHellmanGroupTransforms(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIPt_IKEv2AllowedDiffieHellmanGroupTransforms, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIPt_IKEv2DeadPeerDetectionTimeout(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIPt_IKEv2DeadPeerDetectionTimeout, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIPt_IKEv2DeadPeerDetectionTimeout(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIPt_IKEv2DeadPeerDetectionTimeout, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIPt_IKEv2NATTKeepaliveTimeout(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIPt_IKEv2NATTKeepaliveTimeout, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIPt_IKEv2NATTKeepaliveTimeout(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIPt_IKEv2NATTKeepaliveTimeout, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIPt_AntiReplayWindowSize(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIPt_AntiReplayWindowSize, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIPt_AntiReplayWindowSize(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIPt_AntiReplayWindowSize, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIPt_DoNotFragment(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIPt_DoNotFragment, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIPt_DoNotFragment(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIPt_DoNotFragment, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIPt_DSCPMarkPolicy(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIPt_DSCPMarkPolicy, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIPt_DSCPMarkPolicy(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIPt_DSCPMarkPolicy, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIPt_IKEv2SATrafficLimit(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIPt_IKEv2SATrafficLimit, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIPt_IKEv2SATrafficLimit(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIPt_IKEv2SATrafficLimit, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIPt_IKEv2SATimeLimit(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIPt_IKEv2SATimeLimit, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIPt_IKEv2SATimeLimit(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIPt_IKEv2SATimeLimit, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIPt_IKEv2SAExpiryAction(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIPt_IKEv2SAExpiryAction, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIPt_IKEv2SAExpiryAction(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIPt_IKEv2SAExpiryAction, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIPt_ChildSATrafficLimit(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIPt_ChildSATrafficLimit, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIPt_ChildSATrafficLimit(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIPt_ChildSATrafficLimit, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIPt_ChildSATimeLimit(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIPt_ChildSATimeLimit, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIPt_ChildSATimeLimit(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIPt_ChildSATimeLimit, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIPt_ChildSAExpiryAction(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIPt_ChildSAExpiryAction, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIPt_ChildSAExpiryAction(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIPt_ChildSAExpiryAction, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIPt_SentCPAttrNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIPt_SentCPAttrNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIPt_SentCPAttrNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIPt_SentCPAttrNumberOfEntries, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIPtSt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIPtSt_Enable, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIPtSt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIPtSt_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIPtSt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIPtSt_Alias, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIPtSt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIPtSt_Alias, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIPtSt_Type(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIPtSt_Type, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIPtSt_Type(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIPtSt_Type, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIPtSt_Value(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIPtSt_Value, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIPtSt_Value(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIPtSt_Value, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DITt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DITt_Alias, value);
	if(ret)
	{
		return -1;
	}*/
	ret = 1; //getting from tr.xml
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DITt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (!isalpha(value[0]))
		return -2;
	
	if (strlen(value) > 64)
		return -2;

	/*ret = do_uci_set(DITt_Alias, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//set to tr.xml
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DITt_TunnelInterface(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DITt_TunnelInterface, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, IP_WAN_INTERFACE_PATH);
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DITt_TunneledInterface(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DITt_TunneledInterface, value);
	/*if(ret)
	{
		return -1;
	}*/
	strcpy(value, IP_WAN_INTERFACE_PATH);
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DITt_Filters(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DITt_Filters, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DITtS_DecryptionErrors(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DITtS_DecryptionErrors, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DITtS_IntegrityErrors(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DITtS_IntegrityErrors, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DITtS_ReplayErrors(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DITtS_ReplayErrors, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DITtS_PolicyErrors(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DITtS_PolicyErrors, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DITtS_OtherReceiveErrors(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DITtS_OtherReceiveErrors, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIIt_Status_2683(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIIt_Status_2683, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIIt_Alias_2684(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIIt_Alias_2684, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIIt_Tunnel(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIIt_Tunnel, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIIt_LocalAddress(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIIt_LocalAddress, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIIt_RemoteAddress(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIIt_RemoteAddress, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIIt_EncryptionAlgorithm(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIIt_EncryptionAlgorithm, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIIt_EncryptionKeyLength(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIIt_EncryptionKeyLength, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIIt_PseudoRandomFunction(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIIt_PseudoRandomFunction, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIIt_IntegrityAlgorithm(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIIt_IntegrityAlgorithm, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIIt_DiffieHellmanGroupTransform(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIIt_DiffieHellmanGroupTransform, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIIt_CreationTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIIt_CreationTime, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIIt_NATDetected(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIIt_NATDetected, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIIt_ReceivedCPAttrNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIIt_ReceivedCPAttrNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIIt_ChildSANumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIIt_ChildSANumberOfEntries, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIItS_BytesSent_2697(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIItS_BytesSent_2697, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIItS_BytesReceived_2698(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIItS_BytesReceived_2698, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIItS_PacketsSent_2699(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIItS_PacketsSent_2699, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIItS_PacketsReceived_2700(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIItS_PacketsReceived_2700, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIItS_ErrorsSent_2701(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIItS_ErrorsSent_2701, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIItS_DecryptionErrors(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIItS_DecryptionErrors, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIItS_IntegrityErrors(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIItS_IntegrityErrors, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIItS_OtherReceiveErrors(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIItS_OtherReceiveErrors, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIItRt_Type(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIItRt_Type, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIItRt_Value(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIItRt_Value, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIItCt_Status(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIItCt_Status, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIItCt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIItCt_Alias, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIItCt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIItCt_Alias, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIItCt_InboundSPI(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIItCt_InboundSPI, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIItCt_OutboundSPI(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIItCt_OutboundSPI, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIItCt_CreationTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIItCt_CreationTime, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIItCtS_BytesSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIItCtS_BytesSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIItCtS_BytesReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIItCtS_BytesReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIItCtS_PacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIItCtS_PacketsSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIItCtS_PacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIItCtS_PacketsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIItCtS_ErrorsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIItCtS_ErrorsSent, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIItCtS_DecryptionErrors(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIItCtS_DecryptionErrors, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIItCtS_IntegrityErrors(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIItCtS_IntegrityErrors, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIItCtS_ReplayErrors(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIItCtS_ReplayErrors, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIItCtS_PolicyErrors(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIItCtS_PolicyErrors, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIItCtS_OtherReceiveErrors(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIItCtS_OtherReceiveErrors, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGT_FilterNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char *index = parseTemplate(path_name, ".Tunnel.");

	if (index != NULL)
	{
		do_uci_get("trconf.Device_GRE.FilterNumberOfEntries", value);
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGT_TunnelNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char *index = parseTemplate(path_name, ".Tunnel.");

	if (index != NULL)
	{
		strcpy(value, "1");
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGTt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char *index = parseTemplate(path_name, ".Tunnel.");

	if (index != NULL)
	{
		do_uci_get("trconf.Device_GRE_Tunnel_template.Enable", value);
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DGTt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char *index = parseTemplate(path_name, ".Tunnel.");

	if (index != NULL)
	{
		ret = do_uci_set("trconf.Device_GRE_Tunnel_template.Enable",value);
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit(MS);
			if(ret)
			{
				return (-1);
			}
			//ret = 1; //means need to reboot for taking effect
			doGRE(atoi(value));
		}		
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DGTt_Status(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char *index = parseTemplate(path_name, ".Tunnel.");
	char tmp[32] = {0};

	if (index != NULL)
	{
		do_uci_get("trconf.Device_GRE_Tunnel_template.Enable", tmp);
		if(atoi(tmp) == 1)
		{
			strcpy(value, "Enable");
		}
		else
		{
			strcpy(value, "Disable");
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGTt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = 1; //getting from tr.xml
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DGTt_Alias(char * path_name, char *value)
{
	int ret = 0;

	//set to tr.xml
	if (!isalpha(value[0]))
		return -2;
	
	if (strlen(value) > 64)
		return -2;
	
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	return ret;
}
int get_DGTt_RemoteEndpoints(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char *index = parseTemplate(path_name, ".Tunnel.");

	if (index != NULL)
	{
		do_uci_get("trconf.Device_GRE_Tunnel_template.RemoteEndpoints", value);
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DGTt_RemoteEndpoints(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char *index = parseTemplate(path_name, ".Tunnel.");

	if (index != NULL)
	{
		ret = do_uci_set("trconf.Device_GRE_Tunnel_template.RemoteEndpoints",value);
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit(MS);
			if(ret)
			{
				return (-1);
			}
			//ret = 1; //means need to reboot for taking effect
			char tmp[128] = {0};
			do_uci_get("trconf.Device_GRE_Tunnel_template.Enable", tmp);
			doGRE(atoi(tmp));
		}		
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DGTt_KeepAlivePolicy(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char *index = parseTemplate(path_name, ".Tunnel.");

	if (index != NULL)
	{
		do_uci_get("trconf.Device_GRE_Tunnel_template.KeepAlivePolicy", value);
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DGTt_KeepAlivePolicy(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char *index = parseTemplate(path_name, ".Tunnel.");

	if (index != NULL)
	{
		ret = do_uci_set("trconf.Device_GRE_Tunnel_template.KeepAlivePolicy",value);
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit(MS);
			if(ret)
			{
				return (-1);
			}
			//ret = 1; //means need to reboot for taking effect
			char tmp[128] = {0};
			do_uci_get("trconf.Device_GRE_Tunnel_template.Enable", tmp);
			doGRE(atoi(tmp));
		}		
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DGTt_KeepAliveTimeout(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char *index = parseTemplate(path_name, ".Tunnel.");

	if (index != NULL)
	{
		do_uci_get("trconf.Device_GRE_Tunnel_template.KeepAliveTimeout", value);
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DGTt_KeepAliveTimeout(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char *index = parseTemplate(path_name, ".Tunnel.");

	if (index != NULL)
	{
		ret = do_uci_set("trconf.Device_GRE_Tunnel_template.KeepAliveTimeout",value);
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit(MS);
			if(ret)
			{
				return (-1);
			}
			//ret = 1; //means need to reboot for taking effect
			char tmp[128] = {0};
			do_uci_get("trconf.Device_GRE_Tunnel_template.Enable", tmp);
			doGRE(atoi(tmp));
		}		
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DGTt_KeepAliveThreshold(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char *index = parseTemplate(path_name, ".Tunnel.");

	if (index != NULL)
	{
		do_uci_get("trconf.Device_GRE_Tunnel_template.KeepAliveThreshold", value);
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DGTt_KeepAliveThreshold(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char *index = parseTemplate(path_name, ".Tunnel.");

	if (index != NULL)
	{
		ret = do_uci_set("trconf.Device_GRE_Tunnel_template.KeepAliveThreshold",value);
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit(MS);
			if(ret)
			{
				return (-1);
			}
			//ret = 1; //means need to reboot for taking effect
			char tmp[128] = {0};
			do_uci_get("trconf.Device_GRE_Tunnel_template.Enable", tmp);
			doGRE(atoi(tmp));
		}		
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DGTt_DeliveryHeaderProtocol(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char *index = parseTemplate(path_name, ".Tunnel.");

	if (index != NULL)
	{
		do_uci_get("trconf.Device_GRE_Tunnel_template.DeliveryHeaderProtocol", value);
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DGTt_DeliveryHeaderProtocol(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char *index = parseTemplate(path_name, ".Tunnel.");

	if (index != NULL)
	{
		ret = do_uci_set("trconf.Device_GRE_Tunnel_template.DeliveryHeaderProtocol",value);
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit(MS);
			if(ret)
			{
				return (-1);
			}
			//ret = 1; //means need to reboot for taking effect
			char tmp[128] = {0};
			do_uci_get("trconf.Device_GRE_Tunnel_template.Enable", tmp);
			doGRE(atoi(tmp));
		}		
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DGTt_DefaultDSCPMark(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char *index = parseTemplate(path_name, ".Tunnel.");

	if (index != NULL)
	{
		do_uci_get("trconf.Device_GRE_Tunnel_template.DefaultDSCPMark", value);
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DGTt_DefaultDSCPMark(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char *index = parseTemplate(path_name, ".Tunnel.");

	if (index != NULL)
	{
		ret = do_uci_set("trconf.Device_GRE_Tunnel_template.DefaultDSCPMark",value);
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit(MS);
			if(ret)
			{
				return (-1);
			}
			//ret = 1; //means need to reboot for taking effect
			char tmp[128] = {0};
			do_uci_get("trconf.Device_GRE_Tunnel_template.Enable", tmp);
			doGRE(atoi(tmp));
		}		
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DGTt_ConnectedRemoteEndpoint(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char *index = parseTemplate(path_name, ".Tunnel.");

	if (index != NULL)
	{
		do_uci_get("trconf.Device_GRE_Tunnel_template.RemoteEndpoints", value);
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGTt_InterfaceNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char *index = parseTemplate(path_name, ".Tunnel.");
	char RemoteEndpoints[256] = {0};
	char *p = NULL;
	char *q = NULL;
	int i = 0;

	if (index != NULL)
	{
		do_uci_get("trconf.Device_GRE_Tunnel_template.RemoteEndpoints", RemoteEndpoints);
		
		if(RemoteEndpoints[0] != '\0')
		{
			q = RemoteEndpoints;
			while((p = strchr(q, ',')) != NULL)
			{
				i++;
				q = p + 1;			
			}
			i++;
			sprintf(value, "%d", i);
		}
		else
		{
			sprintf(value, "0");
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGTtS_KeepAliveSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char *index = parseTemplate(path_name, ".Tunnel.");

	if (index != NULL)
	{
		strcpy(value, "0");
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGTtS_KeepAliveReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char *index = parseTemplate(path_name, ".Tunnel.");

	if (index != NULL)
	{
		strcpy(value, "0");
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGTtS_BytesSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char *p = NULL;
	char command[128] ={0};
	char buff[256] ={0};
	FILE *fp = NULL;
	char *q = NULL;
	char *index = parseTemplate(path_name, ".Tunnel.");

	if (index != NULL)
	{
		sprintf(command, "ifconfig grenet%d", atoi(index)-1);

		fp = popen(command, "r");
		if(fp != NULL)
		{
			while(fgets(buff, sizeof(buff), fp) != NULL)
			{
				if((p = strstr(buff, "TX bytes")) != NULL)
				{
					if((q = strstr(p, "(")) != NULL)
					{
						*(q-1) = '\0';
						strcpy(value, p+strlen("TX bytes:"));
					}
					break;
				}
			}
			pclose(fp);
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}

int get_DGTtS_BytesReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char *p = NULL;
	char command[128] ={0};
	char buff[256] ={0};
	FILE *fp = NULL;
	char *q = NULL;
	char *index = parseTemplate(path_name, ".Tunnel.");

	if (index != NULL)
	{
		sprintf(command, "ifconfig grenet%d", atoi(index)-1);

		fp = popen(command, "r");
		if(fp != NULL)
		{
			while(fgets(buff, sizeof(buff), fp) != NULL)
			{
				if((p = strstr(buff, "RX bytes")) != NULL)
				{
					if((q = strchr(buff, '(')) != NULL)
					{
						*(q-1) = '\0';
						strcpy(value, p+strlen("TX bytes:"));
					}
					break;
				}
			}
			pclose(fp);
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGTtS_PacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char *p = NULL;
	char command[128] ={0};
	char buff[256] ={0};
	FILE *fp = NULL;
	char *q = NULL;
	char *index = parseTemplate(path_name, ".Tunnel.");

	if (index != NULL)
	{
		sprintf(command, "ifconfig grenet%d", atoi(index)-1);

		fp = popen(command, "r");
		if(fp != NULL)
		{
			while(fgets(buff, sizeof(buff), fp) != NULL)
			{
				if((p = strstr(buff, "TX packets")) != NULL)
				{
					if((q = strstr(buff, "errors")) != NULL)
					{
						*(q-1) = '\0';
						strcpy(value, p+strlen("TX packets:"));
					}
					break;
				}
			}
			pclose(fp);
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGTtS_PacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char *p = NULL;
	char command[128] ={0};
	char buff[256] ={0};
	FILE *fp = NULL;
	char *q = NULL;
	char *index = parseTemplate(path_name, ".Tunnel.");

	if (index != NULL)
	{
		sprintf(command, "ifconfig grenet%d", atoi(index)-1);

		fp = popen(command, "r");
		if(fp != NULL)
		{
			while(fgets(buff, sizeof(buff), fp) != NULL)
			{
				if((p = strstr(buff, "RX packets")) != NULL)
				{
					if((q = strstr(buff, "errors")) != NULL)
					{
						*(q-1) = '\0';
						strcpy(value, p+strlen("TX packets:"));
					}
					break;
				}
			}
			pclose(fp);
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGTtS_ErrorsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char *p = NULL;
	char command[128] ={0};
	char buff[256] ={0};
	FILE *fp = NULL;
	char *q = NULL;
	char *index = parseTemplate(path_name, ".Tunnel.");

	if (index != NULL)
	{
		sprintf(command, "ifconfig grenet%d", atoi(index)-1);

		fp = popen(command, "r");
		if(fp != NULL)
		{
			while(fgets(buff, sizeof(buff), fp) != NULL)
			{
				if(strstr(buff, "TX packets") != NULL)
				{
					if((q = strstr(buff, "dropped")) != NULL)
					{
						*(q-1) = '\0';
						if((q = strstr(buff, "errors")) != NULL)
						{
							strcpy(value, q+strlen("errors:"));
						}
					}
					break;
				}
			}
			pclose(fp);
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGTtS_ErrorsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char *p = NULL;
	char command[128] ={0};
	char buff[256] ={0};
	FILE *fp = NULL;
	char *q = NULL;
	char *index = parseTemplate(path_name, ".Tunnel.");

	if (index != NULL)
	{
		sprintf(command, "ifconfig grenet%d", atoi(index)-1);

		fp = popen(command, "r");
		if(fp != NULL)
		{
			while(fgets(buff, sizeof(buff), fp) != NULL)
			{
				if(strstr(buff, "RX packets") != NULL)
				{
					if((q = strstr(buff, "dropped")) != NULL)
					{
						*(q-1) = '\0';
						if((q = strstr(buff, "errors")) != NULL)
						{
							strcpy(value, q+strlen("errors:"));
						}
					}
					break;
				}
			}
			pclose(fp);
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGTtIt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char *index = parseTemplate(path_name, ".Interface.");
	char name[128] = {0};

	if (index != NULL)
	{
		sprintf(name, "trconf.Device_GRE_Tunnel_Interface_%d.Enable", atoi(index));
		do_uci_get(name, value);
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DGTtIt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char name[128] = {0};
	char *index = parseTemplate(path_name, ".Interface.");

	if (index != NULL)
	{
		sprintf(name, "trconf.Device_GRE_Tunnel_Interface_%d.Enable", atoi(index));
		ret = do_uci_set(name,value);
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit(MS);
			if(ret)
			{
				return (-1);
			}
			//ret = 1; //means need to reboot for taking effect
			char tmp[128] = {0};
			do_uci_get("trconf.Device_GRE_Tunnel_template.Enable", tmp);
			doGRE(atoi(tmp));
		}		
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DGTtIt_Status(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char *index = parseTemplate(path_name, ".Interface.");
	char tmp[32] = {0};

	if (index != NULL)
	{
		char name[128] = {0};
		sprintf(name, "trconf.Device_GRE_Tunnel_Interface_%d.Enable", atoi(index));
		do_uci_get(name, tmp);
		if(atoi(tmp) == 1)
		{
			strcpy(value, "Enable");
		}
		else
		{
			strcpy(value, "Disable");
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGTtIt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = 1; //getting from tr.xml
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DGTtIt_Alias(char * path_name, char *value)
{
	int ret = 0;

	//set to tr.xml
	if (!isalpha(value[0]))
		return -2;
	
	if (strlen(value) > 64)
		return -2;
	
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	return ret;
}
int get_DGTtIt_Name(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char *index = parseTemplate(path_name, ".Interface.");
	char name[128] = {0};

	if (index != NULL)
	{
		sprintf(name, "trconf.Device_GRE_Tunnel_Interface_%d.Name", atoi(index));
		do_uci_get(name, value);
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DGTtIt_Name(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*char name[128] = {0};
	char *index = parseTemplate(path_name, ".Interface.");

	if (index != NULL)
	{
		sprintf(name, "trconf.Device_GRE_Tunnel_Interface_%d.Name", atoi(index));
		ret = do_uci_set(name,value);
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit(MS);
			if(ret)
			{
				return (-1);
			}
		}		
	}*/
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DGTtIt_LastChange(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char *index = parseTemplate(path_name, ".Interface.");
	char name[128] = {0};
	char buff[32] = {0};
	long int time = 0;
	
	if (index != NULL)
	{
		sprintf(name, "trconf.Device_GRE_Tunnel_Interface_%d.uptime", atoi(index));
		do_uci_get(name, buff);
		time = getLocalTimeWithSeconds();
		sprintf(value, "%ld", time-atoi(buff));
	}
	else
	{
		return -1;
	}

	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGTtIt_LowerLayers(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char *index = parseTemplate(path_name, ".Interface.");
	char name[128] = {0};

	if (index != NULL)
	{
		sprintf(name, "trconf.Device_GRE_Tunnel_Interface_%d.LowerLayers", atoi(index));
		do_uci_get(name, value);
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DGTtIt_LowerLayers(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char name[128] = {0};
	char *index = parseTemplate(path_name, ".Interface.");

	if (index != NULL)
	{
		sprintf(name, "trconf.Device_GRE_Tunnel_Interface_%d.LowerLayers", atoi(index));
		ret = do_uci_set(name,value);
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit(MS);
			if(ret)
			{
				return (-1);
			}
			//ret = 1; //means need to reboot for taking effect
			char tmp[128] = {0};
			do_uci_get("trconf.Device_GRE_Tunnel_template.Enable", tmp);
			doGRE(atoi(tmp));
		}		
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DGTtIt_ProtocolIdOverride(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char *index = parseTemplate(path_name, ".Interface.");
	char name[128] = {0};

	if (index != NULL)
	{
		sprintf(name, "trconf.Device_GRE_Tunnel_Interface_%d.ProtocolIdOverride", atoi(index));
		do_uci_get(name, value);
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DGTtIt_ProtocolIdOverride(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char name[128] = {0};
	char *index = parseTemplate(path_name, ".Interface.");

	if (index != NULL)
	{
		sprintf(name, "trconf.Device_GRE_Tunnel_Interface_%d.ProtocolIdOverride", atoi(index));
		ret = do_uci_set(name,value);
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit(MS);
			if(ret)
			{
				return (-1);
			}
			//ret = 1; //means need to reboot for taking effect
			char tmp[128] = {0};
			do_uci_get("trconf.Device_GRE_Tunnel_template.Enable", tmp);
			doGRE(atoi(tmp));
		}		
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DGTtIt_UseChecksum(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char *index = parseTemplate(path_name, ".Interface.");
	char name[128] = {0};

	if (index != NULL)
	{
		sprintf(name, "trconf.Device_GRE_Tunnel_Interface_%d.UseChecksum", atoi(index));
		do_uci_get(name, value);
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DGTtIt_UseChecksum(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char name[128] = {0};
	char *index = parseTemplate(path_name, ".Interface.");

	if (index != NULL)
	{
		sprintf(name, "trconf.Device_GRE_Tunnel_Interface_%d.UseChecksum", atoi(index));
		ret = do_uci_set(name,value);
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit(MS);
			if(ret)
			{
				return (-1);
			}
			//ret = 1; //means need to reboot for taking effect
			char tmp[128] = {0};
			do_uci_get("trconf.Device_GRE_Tunnel_template.Enable", tmp);
			doGRE(atoi(tmp));
		}		
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DGTtIt_KeyIdentifierGenerationPolicy(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char *index = parseTemplate(path_name, ".Interface.");
	char name[128] = {0};

	if (index != NULL)
	{
		sprintf(name, "trconf.Device_GRE_Tunnel_Interface_%d.KeyIdentifierGenerationPolicy", atoi(index));
		do_uci_get(name, value);
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DGTtIt_KeyIdentifierGenerationPolicy(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char name[128] = {0};
	char *index = parseTemplate(path_name, ".Interface.");

	if (index != NULL)
	{
		sprintf(name, "trconf.Device_GRE_Tunnel_Interface_%d.KeyIdentifierGenerationPolicy", atoi(index));
		ret = do_uci_set(name,value);
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit(MS);
			if(ret)
			{
				return (-1);
			}
			//ret = 1; //means need to reboot for taking effect
			char tmp[128] = {0};
			do_uci_get("trconf.Device_GRE_Tunnel_template.Enable", tmp);
			doGRE(atoi(tmp));
		}		
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DGTtIt_KeyIdentifier(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char *index = parseTemplate(path_name, ".Interface.");
	char name[128] = {0};

	if (index != NULL)
	{
		sprintf(name, "trconf.Device_GRE_Tunnel_Interface_%d.KeyIdentifier", atoi(index));
		do_uci_get(name, value);
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DGTtIt_KeyIdentifier(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char name[128] = {0};
	char *index = parseTemplate(path_name, ".Interface.");

	if (index != NULL)
	{
		sprintf(name, "trconf.Device_GRE_Tunnel_Interface_%d.KeyIdentifier", atoi(index));
		ret = do_uci_set(name,value);
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit(MS);
			if(ret)
			{
				return (-1);
			}
			//ret = 1; //means need to reboot for taking effect
			char tmp[128] = {0};
			do_uci_get("trconf.Device_GRE_Tunnel_template.Enable", tmp);
			doGRE(atoi(tmp));
		}		
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DGTtIt_UseSequenceNumber(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char *index = parseTemplate(path_name, ".Interface.");
	char name[128] = {0};

	if (index != NULL)
	{
		sprintf(name, "trconf.Device_GRE_Tunnel_Interface_%d.UseSequenceNumber", atoi(index));
		do_uci_get(name, value);
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DGTtIt_UseSequenceNumber(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char name[128] = {0};
	char *index = parseTemplate(path_name, ".Interface.");

	if (index != NULL)
	{
		sprintf(name, "trconf.Device_GRE_Tunnel_Interface_%d.UseSequenceNumber", atoi(index));
		ret = do_uci_set(name,value);
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit(MS);
			if(ret)
			{
				return (-1);
			}
			//ret = 1; //means need to reboot for taking effect
			char tmp[128] = {0};
			do_uci_get("trconf.Device_GRE_Tunnel_template.Enable", tmp);
			doGRE(atoi(tmp));
		}		
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DGTtItS_BytesSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char *p = NULL;
	char command[128] ={0};
	char buff[256] ={0};
	FILE *fp = NULL;
	char *q = NULL;
	char *index = parseTemplate(path_name, ".Interface.");

	if (index != NULL)
	{
		sprintf(command, "ifconfig grenet%d", atoi(index)-1);

		fp = popen(command, "r");
		if(fp != NULL)
		{
			while(fgets(buff, sizeof(buff), fp) != NULL)
			{
				if((p = strstr(buff, "TX bytes")) != NULL)
				{
					if((q = strstr(p, "(")) != NULL)
					{
						*(q-1) = '\0';
						strcpy(value, p+strlen("TX bytes:"));
					}
					break;
				}
			}
			pclose(fp);
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGTtItS_BytesReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char *p = NULL;
	char command[128] ={0};
	char buff[256] ={0};
	FILE *fp = NULL;
	char *q = NULL;
	char *index = parseTemplate(path_name, ".Interface.");

	if (index != NULL)
	{
		sprintf(command, "ifconfig grenet%d", atoi(index)-1);

		fp = popen(command, "r");
		if(fp != NULL)
		{
			while(fgets(buff, sizeof(buff), fp) != NULL)
			{
				if((p = strstr(buff, "RX bytes")) != NULL)
				{
					if((q = strchr(buff, '(')) != NULL)
					{
						*(q-1) = '\0';
						strcpy(value, p+strlen("TX bytes:"));
					}
					break;
				}
			}
			pclose(fp);
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGTtItS_PacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char *p = NULL;
	char command[128] ={0};
	char buff[256] ={0};
	FILE *fp = NULL;
	char *q = NULL;
	char *index = parseTemplate(path_name, ".Interface.");

	if (index != NULL)
	{
		sprintf(command, "ifconfig grenet%d", atoi(index)-1);

		fp = popen(command, "r");
		if(fp != NULL)
		{
			while(fgets(buff, sizeof(buff), fp) != NULL)
			{
				if((p = strstr(buff, "TX packets")) != NULL)
				{
					if((q = strstr(buff, "errors")) != NULL)
					{
						*(q-1) = '\0';
						strcpy(value, p+strlen("TX packets:"));
					}
					break;
				}
			}
			pclose(fp);
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGTtItS_PacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char *p = NULL;
	char command[128] ={0};
	char buff[256] ={0};
	FILE *fp = NULL;
	char *q = NULL;
	char *index = parseTemplate(path_name, ".Interface.");

	if (index != NULL)
	{
		sprintf(command, "ifconfig grenet%d", atoi(index)-1);

		fp = popen(command, "r");
		if(fp != NULL)
		{
			while(fgets(buff, sizeof(buff), fp) != NULL)
			{
				if((p = strstr(buff, "RX packets")) != NULL)
				{
					if((q = strstr(buff, "errors")) != NULL)
					{
						*(q-1) = '\0';
						strcpy(value, p+strlen("TX packets:"));
					}
					break;
				}
			}
			pclose(fp);
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGTtItS_ErrorsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char *p = NULL;
	char command[128] ={0};
	char buff[256] ={0};
	FILE *fp = NULL;
	char *q = NULL;
	char *index = parseTemplate(path_name, ".Interface.");

	if (index != NULL)
	{
		sprintf(command, "ifconfig grenet%d", atoi(index)-1);

		fp = popen(command, "r");
		if(fp != NULL)
		{
			while(fgets(buff, sizeof(buff), fp) != NULL)
			{
				if(strstr(buff, "TX packets") != NULL)
				{
					if((q = strstr(buff, "dropped")) != NULL)
					{
						*(q-1) = '\0';
						if((q = strstr(buff, "errors")) != NULL)
						{
							strcpy(value, q+strlen("errors:"));
						}
					}
					break;
				}
			}
			pclose(fp);
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGTtItS_ErrorsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char *p = NULL;
	char command[128] ={0};
	char buff[256] ={0};
	FILE *fp = NULL;
	char *q = NULL;
	char *index = parseTemplate(path_name, ".Interface.");

	if (index != NULL)
	{
		sprintf(command, "ifconfig grenet%d", atoi(index)-1);

		fp = popen(command, "r");
		if(fp != NULL)
		{
			while(fgets(buff, sizeof(buff), fp) != NULL)
			{
				if(strstr(buff, "RX packets") != NULL)
				{
					if((q = strstr(buff, "dropped")) != NULL)
					{
						*(q-1) = '\0';
						if((q = strstr(buff, "errors")) != NULL)
						{
							strcpy(value, q+strlen("errors:"));
						}
					}
					break;
				}
			}
			pclose(fp);
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGTtItS_DiscardChecksumReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char *p = NULL;
	char command[128] ={0};
	char buff[256] ={0};
	FILE *fp = NULL;
	char *q = NULL;
	char *index = parseTemplate(path_name, ".Interface.");

	if (index != NULL)
	{
		sprintf(command, "ifconfig grenet%d", atoi(index)-1);

		fp = popen(command, "r");
		if(fp != NULL)
		{
			while(fgets(buff, sizeof(buff), fp) != NULL)
			{
				if(strstr(buff, "RX packets") != NULL)
				{
					if((q = strstr(buff, "overruns")) != NULL)
					{
						*(q-1) = '\0';
						if((q = strstr(buff, "dropped")) != NULL)
						{
							strcpy(value, q+strlen("dropped:"));
						}
					}
					break;
				}
			}
			pclose(fp);
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGTtItS_DiscardSequenceNumberReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char *p = NULL;
	char command[128] ={0};
	char buff[256] ={0};
	FILE *fp = NULL;
	char *q = NULL;
	char *index = parseTemplate(path_name, ".Interface.");

	if (index != NULL)
	{
		sprintf(command, "ifconfig grenet%d", atoi(index)-1);

		fp = popen(command, "r");
		if(fp != NULL)
		{
			while(fgets(buff, sizeof(buff), fp) != NULL)
			{
				if(strstr(buff, "RX packets") != NULL)
				{
					if((q = strstr(buff, "overruns")) != NULL)
					{
						*(q-1) = '\0';
						if((q = strstr(buff, "dropped")) != NULL)
						{
							strcpy(value, q+strlen("dropped:"));
						}
					}
					break;
				}
			}
			pclose(fp);
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGFt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DQCt_Order, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Filter.");
	char Order[256] = {0};
	char name[256] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(GREFilterMap, Order, atoi(index));
		if(ret)
		{
			return (-1);
		}
		sprintf(name, "trconf.Device_GRE_Filter_%d.Enable", atoi(Order));		
		tr_log(LOG_DEBUG,"name[%s]", name);
		do_uci_get(name, value);
	}
	else
	{
		return -1;
	}

	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DGFt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DQCt_Order, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char *index = parseTemplate(path_name, ".Filter.");
	char Order[32] = {0};
	char name[256] = {0};

	if (index != NULL)
	{
		sprintf(name, "trconf.Device_GRE_Filter_%d.Enable", atoi(index));		
		tr_log(LOG_DEBUG,"name[%s]", name);
		ret = do_uci_set(name,value);
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit(MS);
			if(ret)
			{
				return (-1);
			}
			//ret = 1; //means need to reboot for taking effect
			char tmp[128] = {0};
			do_uci_get("trconf.Device_GRE_Tunnel_template.Enable", tmp);
			doGRE(atoi(tmp));
		}		
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DGFt_Status(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DQCt_Order, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Filter.");
	char Order[256] = {0};
	char name[256] = {0};
	char tmp[32] = {0};
	
	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(GREFilterMap, Order, atoi(index));
		if(ret)
		{
			return (-1);
		}
		sprintf(name, "trconf.Device_GRE_Filter_%d.Enable", atoi(Order));		
		tr_log(LOG_DEBUG,"name[%s]", name);
		do_uci_get(name, tmp);
		if(atoi(tmp) == 1)
		{
			strcpy(value, "Enable");
		}
		else
		{
			strcpy(value, "Disable");
		}
	}
	else
	{
		return -1;
	}

	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DGFt_Order(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DQCt_Order, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Filter.");
	char Order[256] = {0};
	char name[256] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(GREFilterMap, Order, atoi(index));
		if(ret)
		{
			return (-1);
		}
		sprintf(name, "trconf.Device_GRE_Filter_%d.Order", atoi(Order));		
		tr_log(LOG_DEBUG,"name[%s]", name);
		do_uci_get(name, value);
	}
	else
	{
		return -1;
	}

	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DGFt_Order(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DQCt_Order, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	/*char *index = parseTemplate(path_name, ".Filter.");
	char Order[32] = {0};
	char name[256] = {0};

	if (index != NULL)
	{
		sprintf(name, "trconf.Device_GRE_Filter_%d.Order", atoi(index));		
		tr_log(LOG_DEBUG,"name[%s]", name);
		ret = do_uci_set(name,value);
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit(MS);
			if(ret)
			{
				return (-1);
			}
		}		
		toSaveMapFile(GREFilterMap, index, value); //update key info
	}*/
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DGFt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = 1; //getting from tr.xml
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DGFt_Alias(char * path_name, char *value)
{
	int ret = 0;

	//set to tr.xml
	if (!isalpha(value[0]))
		return -2;
	
	if (strlen(value) > 64)
		return -2;
	
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	return ret;
}
int get_DGFt_Interface(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DQCt_Order, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Filter.");
	char Order[256] = {0};
	char name[256] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(GREFilterMap, Order, atoi(index));
		if(ret)
		{
			return (-1);
		}
		sprintf(name, "trconf.Device_GRE_Filter_%d.Interface", atoi(Order));		
		tr_log(LOG_DEBUG,"name[%s]", name);
		do_uci_get(name, value);
	}
	else
	{
		return -1;
	}

	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DGFt_Interface(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DQCt_Order, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char *index = parseTemplate(path_name, ".Filter.");
	char Order[32] = {0};
	char name[256] = {0};

	if (index != NULL)
	{
		sprintf(name, "trconf.Device_GRE_Filter_%d.Interface", atoi(index));		
		tr_log(LOG_DEBUG,"name[%s]", name);
		ret = do_uci_set(name,value);
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit(MS);
			if(ret)
			{
				return (-1);
			}
			//ret = 1; //means need to reboot for taking effect
			char tmp[128] = {0};
			do_uci_get("trconf.Device_GRE_Tunnel_template.Enable", tmp);
			doGRE(atoi(tmp));
		}		
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DGFt_AllInterfaces(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char *index = parseTemplate(path_name, ".Filter.");
	char Order[256] = {0};
	char name[256] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(GREFilterMap, Order, atoi(index));
		if(ret)
		{
			return (-1);
		}
		sprintf(name, "trconf.Device_GRE_Filter_%d.AllInterfaces", atoi(Order));		
		tr_log(LOG_DEBUG,"name[%s]", name);
		do_uci_get(name, value);
	}
	else
	{
		return -1;
	}

	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DGFt_AllInterfaces(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char *index = parseTemplate(path_name, ".Filter.");
	char Order[32] = {0};
	char name[256] = {0};

	if (index != NULL)
	{
		sprintf(name, "trconf.Device_GRE_Filter_%d.AllInterfaces", atoi(index));		
		tr_log(LOG_DEBUG,"name[%s]", name);
		ret = do_uci_set(name,value);
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit(MS);
			if(ret)
			{
				return (-1);
			}
			//ret = 1; //means need to reboot for taking effect
			char tmp[128] = {0};
			do_uci_get("trconf.Device_GRE_Tunnel_template.Enable", tmp);
			doGRE(atoi(tmp));
		}		
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DGFt_VLANIDCheck(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char *index = parseTemplate(path_name, ".Filter.");
	char Order[256] = {0};
	char name[256] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(GREFilterMap, Order, atoi(index));
		if(ret)
		{
			return (-1);
		}
		sprintf(name, "trconf.Device_GRE_Filter_%d.VLANIDCheck", atoi(Order));		
		tr_log(LOG_DEBUG,"name[%s]", name);
		do_uci_get(name, value);
	}
	else
	{
		return -1;
	}

	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DGFt_VLANIDCheck(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char *index = parseTemplate(path_name, ".Filter.");
	char Order[32] = {0};
	char name[256] = {0};

	if (index != NULL)
	{
		sprintf(name, "trconf.Device_GRE_Filter_%d.VLANIDCheck", atoi(index));		
		tr_log(LOG_DEBUG,"name[%s]", name);
		ret = do_uci_set(name,value);
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit(MS);
			if(ret)
			{
				return (-1);
			}
			//ret = 1; //means need to reboot for taking effect
			char tmp[128] = {0};
			do_uci_get("trconf.Device_GRE_Tunnel_template.Enable", tmp);
			doGRE(atoi(tmp));
		}		
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DGFt_VLANIDExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char *index = parseTemplate(path_name, ".Filter.");
	char Order[256] = {0};
	char name[256] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(GREFilterMap, Order, atoi(index));
		if(ret)
		{
			return (-1);
		}
		sprintf(name, "trconf.Device_GRE_Filter_%d.VLANIDExclude", atoi(Order));		
		tr_log(LOG_DEBUG,"name[%s]", name);
		do_uci_get(name, value);
	}
	else
	{
		return -1;
	}

	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DGFt_VLANIDExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char *index = parseTemplate(path_name, ".Filter.");
	char Order[32] = {0};
	char name[256] = {0};

	if (index != NULL)
	{
		sprintf(name, "trconf.Device_GRE_Filter_%d.VLANIDExclude", atoi(index));		
		tr_log(LOG_DEBUG,"name[%s]", name);
		ret = do_uci_set(name,value);
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit(MS);
			if(ret)
			{
				return (-1);
			}
			//ret = 1; //means need to reboot for taking effect
			char tmp[128] = {0};
			do_uci_get("trconf.Device_GRE_Tunnel_template.Enable", tmp);
			doGRE(atoi(tmp));
		}		
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DGFt_DSCPMarkPolicy(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char *index = parseTemplate(path_name, ".Filter.");
	char Order[256] = {0};
	char name[256] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(GREFilterMap, Order, atoi(index));
		if(ret)
		{
			return (-1);
		}
		sprintf(name, "trconf.Device_GRE_Filter_%d.DSCPMarkPolicy", atoi(Order));		
		tr_log(LOG_DEBUG,"name[%s]", name);
		do_uci_get(name, value);
	}
	else
	{
		return -1;
	}

	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DGFt_DSCPMarkPolicy(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char *index = parseTemplate(path_name, ".Filter.");
	char Order[32] = {0};
	char name[256] = {0};

	if (index != NULL)
	{
		sprintf(name, "trconf.Device_GRE_Filter_%d.DSCPMarkPolicy", atoi(index));		
		tr_log(LOG_DEBUG,"name[%s]", name);
		ret = do_uci_set(name,value);
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit(MS);
			if(ret)
			{
				return (-1);
			}
			//ret = 1; //means need to reboot for taking effect
			char tmp[128] = {0};
			do_uci_get("trconf.Device_GRE_Tunnel_template.Enable", tmp);
			doGRE(atoi(tmp));
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DM_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char native[32] = {0};

	ret = do_uci_get("ipv6.@mapt[0].enable", native);
	if(ret)
	{
		strcpy(value, "0");
		ret = 0;
	}
	else
	{
		if (atoi(native) == 1)
			strcpy(value, "1"); //always 1, bind in dhcpv6 client option95
		else
			strcpy(value, "0");
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DM_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (atoi(value) == 1)
		ret = do_uci_set("ipv6.@global[0].enable", value);
	ret = do_uci_set("ipv6.@mapt[0].enable", value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("ipv6");
		if(ret)
		{
			return (-1);
		}
		//ret = 1; //means need to reboot for taking effect
		doRestartNetwork();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DM_DomainNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DC_Enable, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "1"); //only support map-t
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMDt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char native[32] = {0};

	ret = do_uci_get("ipv6.@mapt[0].enable", native);
	if(ret)
	{
		strcpy(value, "0");
		ret = 0;
	}
	else
	{
		if (atoi(native) == 1)
			strcpy(value, "1"); //always 1, bind in dhcpv6 client option95
		else
			strcpy(value, "0");
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DMDt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	
	if (atoi(value) == 1)
		ret = do_uci_set("ipv6.@global[0].enable", value);
	ret = do_uci_set("ipv6.@mapt[0].enable", value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("ipv6");
		if(ret)
		{
			return (-1);
		}
		//ret = 1; //means need to reboot for taking effect
		doRadvdRestart();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DMDt_Status(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DC_Enable, value);
	if(ret)
	{
		return -1;
	}*/
	a_infinfo infStatus;

	memset(&infStatus, 0, sizeof(infStatus));

	getInterfaceInfo("wan6_4", &infStatus);
	if (infStatus.status == 1)
		strcpy(value, "Enabled");
	else
		strcpy(value, "Disabled");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMDt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DC_Enable, value);
	if(ret)
	{
		return -1;
	}*/
	ret = 1; //getting from tr.xml
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DMDt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (!isalpha(value[0]))
		return -2;
	
	if (strlen(value) > 64)
		return -2;
	
	/*ret = do_uci_set(DC_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//set to tr.xml
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DMDt_TransportMode(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DC_Enable, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "Translation"); //map-t
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DMDt_TransportMode(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DC_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DMDt_WANInterface(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DC_Enable, value);
	if(ret)
	{
		return -1;
	}*/
	char native[32] = {0};

	ret = do_uci_get("ipv6.@mapt[0].enable", native);
	if(ret)
	{
		strcpy(value, "");
		ret = 0;
	}
	else
	{
		if (atoi(native) == 1)
			strcpy(value, IP_WAN_INTERFACE_PATH); //always 1, bind in dhcpv6 client option95
		else
			strcpy(value, "");
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DMDt_WANInterface(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DC_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DMDt_IPv6Prefix(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DC_Enable, value);
	if(ret)
	{
		return -1;
	}*/
	a_infinfo wanStatus;

	memset(&wanStatus, 0, sizeof(wanStatus));
	getInterfaceInfo("wan6", &wanStatus);
	if (strcmp(wanStatus.ipv6_prefix_address, "") != 0)
		strcpy(value, IP_WAN_INTERFACE_PATH ".IPv6Prefix");
	else
		strcpy(value, "");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DMDt_IPv6Prefix(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DC_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DMDt_BRIPv6Prefix(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	a_infinfo infStatus;

	memset(&infStatus, 0, sizeof(infStatus));

	getInterfaceInfo("wan6_4", &infStatus);
	if (infStatus.status == 1){
		ret = do_uci_get("ipv6.@mapt[0].BRIPv6Prefix", value);
		if(ret)
		{
			strcpy(value, "");
			ret = 0;
		}
	}
	//getMAPTInfo(value, "RULE_1_IPV6ADDR");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DMDt_BRIPv6Prefix(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DC_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DMDt_DSCPMarkPolicy(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DC_Enable, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "-1");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DMDt_DSCPMarkPolicy(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DC_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DMDt_PSIDOffset(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DC_Enable, value);
	if(ret)
	{
		return -1;
	}*/
	getMAPTInfo(value, "RULE_1_OFFSET");
	if (strcmp(value, "") == 0)
		strcpy(value, "4"); //default value
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DMDt_PSIDOffset(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DC_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DMDt_PSIDLength(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DC_Enable, value);
	if(ret)
	{
		return -1;
	}*/
	getMAPTInfo(value, "RULE_1_PSIDLEN");
	if (strcmp(value, "") == 0)
		strcpy(value, "0"); //default value
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DMDt_PSIDLength(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DC_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DMDt_PSID(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DC_Enable, value);
	if(ret)
	{
		return -1;
	}*/
	getMAPTInfo(value, "RULE_1_PSIDPSID");
	if (strcmp(value, "") == 0)
		strcpy(value, "0"); //default value
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DMDt_PSID(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DC_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DMDt_IncludeSystemPorts(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DC_Enable, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "0");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DMDt_IncludeSystemPorts(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DC_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DMDt_RuleNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DC_Enable, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "1");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMDtRt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DC_Enable, value);
	if(ret)
	{
		return -1;
	}*/
	char native[32] = {0};

	ret = do_uci_get("ipv6.@mapt[0].enable", native);
	if(ret)
	{
		strcpy(value, "0");
		ret = 0;
	}
	else
	{
		if (atoi(native) == 1)
			strcpy(value, "1"); //always 1, bind in dhcpv6 client option95
		else
			strcpy(value, "0");
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DMDtRt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DC_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DMDtRt_Status(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DC_Enable, value);
	if(ret)
	{
		return -1;
	}*/
	a_infinfo infStatus;

	memset(&infStatus, 0, sizeof(infStatus));

	getInterfaceInfo("wan6_4", &infStatus);
	if (infStatus.status == 1)
		strcpy(value, "Enabled");
	else
		strcpy(value, "Disabled");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMDtRt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DC_Enable, value);
	if(ret)
	{
		return -1;
	}*/
	ret = 1; //getting from tr.xml
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int set_DMDtRt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (!isalpha(value[0]))
		return -2;
	
	if (strlen(value) > 64)
		return -2;
	
	/*ret = do_uci_set(DC_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//set to tr.xml
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DMDtRt_Origin(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DC_Enable, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "DHCPv6");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMDtRt_IPv6Prefix(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DC_Enable, value);
	if(ret)
	{
		return -1;
	}*/
	char prefix[128] = {0};
	char prefixlen[32] = {0};

	getMAPTInfo(prefix, "RULE_1_IPV6PREFIX");
	getMAPTInfo(prefixlen, "RULE_1_PREFIX6LEN");
	if (strcmp(prefix, "") != 0 && strcmp(prefixlen, "") != 0)
		sprintf(value, "%s/%s", prefix, prefixlen);
	else
		strcpy(value, "/0");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DMDtRt_IPv6Prefix(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DC_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DMDtRt_IPv4Prefix(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DC_Enable, value);
	if(ret)
	{
		return -1;
	}*/
	char prefix[128] = {0};
	char prefixlen[32] = {0};

	getMAPTInfo(prefix, "RULE_1_IPV4PREFIX");
	getMAPTInfo(prefixlen, "RULE_1_PREFIX4LEN");
	if (strcmp(prefix, "") != 0 && strcmp(prefixlen, "") != 0)
		sprintf(value, "%s/%s", prefix, prefixlen);
	else
		strcpy(value, "/0");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DMDtRt_IPv4Prefix(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DC_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DMDtRt_EABitsLength(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DC_Enable, value);
	if(ret)
	{
		return -1;
	}*/
	getMAPTInfo(value, "RULE_1_EALEN");
	if (strcmp(value, "") == 0)
		strcpy(value, "0"); //default value
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DMDtRt_EABitsLength(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DC_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DMDtRt_IsFMR(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DC_Enable, value);
	if(ret)
	{
		return -1;
	}*/
	getMAPTInfo(value, "RULE_1_FMR");
	if (strcmp(value, "") == 0)
		strcpy(value, "0"); //default value
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMDtI_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DC_Enable, value);
	if(ret)
	{
		return -1;
	}*/
	a_infinfo infStatus;

	memset(&infStatus, 0, sizeof(infStatus));

	getInterfaceInfo("wan6_4", &infStatus);
	if (infStatus.status == 1)
		strcpy(value, "1");
	else
		strcpy(value, "0");

	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DMDtI_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DC_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DMDtI_Status(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DC_Enable, value);
	if(ret)
	{
		return -1;
	}*/
	a_infinfo infStatus;

	memset(&infStatus, 0, sizeof(infStatus));

	getInterfaceInfo("wan6_4", &infStatus);
	if (infStatus.status == 1)
		strcpy(value, "Up");
	else
		strcpy(value, "Down");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMDtI_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DC_Enable, value);
	if(ret)
	{
		return -1;
	}*/
	ret = 1; //getting from tr.xml
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DMDtI_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (!isalpha(value[0]))
		return -2;
	
	if (strlen(value) > 64)
		return -2;
	
	/*ret = do_uci_set(DC_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//set to tr.xml
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DMDtI_Name(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DC_Enable, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "GRE Tunnel");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMDtI_LastChange(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DC_Enable, value);
	if(ret)
	{
		return -1;
	}*/
	a_infinfo infStatus;

	memset(&infStatus, 0, sizeof(infStatus));

	getInterfaceInfo("wan6_4", &infStatus);

	if (strcmp(infStatus.uptime, "") != 0)
		strcpy(value, infStatus.uptime);
	else
		strcpy(value, "0");
	
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMDtI_LowerLayers(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DC_Enable, value);
	if(ret)
	{
		return -1;
	}*/
	char native[32] = {0};

	ret = do_uci_get("ipv6.@mapt[0].enable", native);
	if(ret)
	{
		strcpy(value, "");
		ret = 0;
	}
	else
	{
		if (atoi(native) == 1)
			strcpy(value, ETHERNET_WAN_INTERFACE_PATH); //always 1, bind in dhcpv6 client option95
		else
			strcpy(value, "");
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DMDtI_LowerLayers(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DC_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DMDtIS_BytesSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DC_Enable, value);
	if(ret)
	{
		return -1;
	}*/
	
	getDevStatus("map-wan6_4", "tx_bytes", value);
	
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMDtIS_BytesReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DC_Enable, value);
	if(ret)
	{
		return -1;
	}*/

	getDevStatus("map-wan6_4", "rx_bytes", value);
	
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMDtIS_PacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DC_Enable, value);
	if(ret)
	{
		return -1;
	}*/

	getDevStatus("map-wan6_4", "tx_packets", value);
	
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMDtIS_PacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DC_Enable, value);
	if(ret)
	{
		return -1;
	}*/

	getDevStatus("map-wan6_4", "rx_packets", value);
	
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMDtIS_ErrorsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DC_Enable, value);
	if(ret)
	{
		return -1;
	}*/

	getDevStatus("map-wan6_4", "tx_errors", value);
	
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMDtIS_ErrorsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DC_Enable, value);
	if(ret)
	{
		return -1;
	}*/

	getDevStatus("map-wan6_4", "rx_errors", value);
	
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMDtIS_UnicastPacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DC_Enable, value);
	if(ret)
	{
		return -1;
	}*/
	int count = 0;

	count = get_ssdk_mib_statistics(5, "TxUniCast");
	sprintf(value, "%d", count);
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMDtIS_UnicastPacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DC_Enable, value);
	if(ret)
	{
		return -1;
	}*/
	int count = 0;

	count = get_ssdk_mib_statistics(5, "RxUniCast");
	sprintf(value, "%d", count);
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMDtIS_DiscardPacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DC_Enable, value);
	if(ret)
	{
		return -1;
	}*/

	getDevStatus("map-wan6_4", "tx_dropped", value);
	
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMDtIS_DiscardPacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DC_Enable, value);
	if(ret)
	{
		return -1;
	}*/

	getDevStatus("map-wan6_4", "rx_dropped", value);
	
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMDtIS_MulticastPacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DC_Enable, value);
	if(ret)
	{
		return -1;
	}*/
	int count = 0;

	count = get_ssdk_mib_statistics(5, "TxMulti");
	sprintf(value, "%d", count);
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMDtIS_MulticastPacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DC_Enable, value);
	if(ret)
	{
		return -1;
	}*/
	int count = 0;

	count = get_ssdk_mib_statistics(5, "RxMulti");
	sprintf(value, "%d", count);
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMDtIS_BroadcastPacketsSent(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DC_Enable, value);
	if(ret)
	{
		return -1;
	}*/
	int count = 0;

	count = get_ssdk_mib_statistics(5, "TxBroad");
	sprintf(value, "%d", count);
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMDtIS_BroadcastPacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DC_Enable, value);
	if(ret)
	{
		return -1;
	}*/
	int count = 0;

	count = get_ssdk_mib_statistics(5, "RxBroad");
	sprintf(value, "%d", count);
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DMDtIS_UnknownProtoPacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DC_Enable, value);
	if(ret)
	{
		return -1;
	}*/

	getDevStatus("map-wan6_4", "rx_frame_errors", value);
	
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DC_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("wifidog.settings.wifidog_enable", value);
	if(ret)
	{
		strcpy(value, "0");
		ret = 0;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DC_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set("wifidog.settings.wifidog_enable", value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("wifidog");
		if(ret)
		{
			return (-1);
		}
		dowifidog();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DC_Status(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char en[32] = {0};
	char url[2001] = {0}; //spec string range is 1~2000

	ret = do_uci_get("wifidog.settings.wifidog_enable", en);
	if(ret)
	{
		strcpy(en, "0");
		ret = 0;
	}
	ret = do_uci_get("wifidog.settings.gateway_url", url);
	if(ret)
	{
		strcpy(url, "");
		ret = 0;
	}
	if (atoi(en) == 1 && strcmp(url, "") == 0)
		strcpy(value, "Error_URLEmpty");
	else if (atoi(en) == 1)
		strcpy(value, "Enabled");
	else
		strcpy(value, "Disabled");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DC_AllowedList(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("wifidog.settings.allowed_url", value);
	if(ret)
	{
		strcpy(value, "");
		ret = 0;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DC_AllowedList(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (strlen(value) > 1024) //changed 10000 to 1024
		return -2;
		
	ret = do_uci_set("wifidog.settings.allowed_url", value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("wifidog");
		if(ret)
		{
			return (-1);
		}
		dowifidog();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DC_URL(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("wifidog.settings.gateway_url", value);
	if(ret)
	{
		strcpy(value, "");
		ret = 0;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DC_URL(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char ssl[8] = {0};
	char hostname[256] = {0};
	char path[256] = {0};

	if (strlen(value) > 2000)
		return -2;

	if(do_uci_set("wifidog.settings.gateway_url", value))
		return -1;
	
	if(parse_captive_portal_url(value, ssl, hostname, path))
		return -1;
		
	if(do_uci_set("wifidog.settings.gateway_ssl", ssl))
		return -1;
		
	if(do_uci_set("wifidog.settings.gateway_hostname", hostname))
		return -1;

	if(do_uci_set("wifidog.settings.gateway_path", path))
		return -1;

	ret = do_uci_commit("wifidog");
	if(ret)
	{
		return (-1);
	}
	dowifidog();

	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DR_RouterNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DR_RouterNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "1"); //always 1
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DRRt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("staticrt.staticrt.enable", value);
	if(ret)
	{
		strcpy(value, "0");
		ret = 0;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DRRt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set("staticrt.staticrt.enable", value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("staticrt");
		if(ret)
		{
			return (-1);
		}
		//ret = 1; //means need to reboot for taking effect
		doRadvdRestart();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DRRt_Status(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("staticrt.staticrt.enable", value);
	if(ret)
	{
		strcpy(value, "0");
		ret = 0;
	}
	if (atoi(value) == 1)
		strcpy(value, "Enabled");
	else
		strcpy(value, "Disabled");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DRRt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DRRt_Alias, value);
	if(ret)
	{
		return -1;
	}*/
	ret = 1; //getting from tr.xml
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DRRt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (!isalpha(value[0]))
		return -2;
	
	if (strlen(value) > 64)
		return -2;
	
	/*ret = do_uci_set(DRRt_Alias, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//set to tr.xml
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DRRt_IPv4ForwardingNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DRRt_IPv4ForwardingNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}*/
	int i = 0;

	i = getRouterIPv4Number();
	sprintf(value, "%d", i);
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DRRt_IPv6ForwardingNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DRRt_IPv6ForwardingNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}*/
	int i = 0;

	i = get_RouterIPv6_num();
	sprintf(value, "%d", i);
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DRRtIt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("staticrt.staticrt.enable", value);
	if(ret)
	{
		strcpy(value, "0");
		ret = 0;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DRRtIt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DRRtIt_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't support to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DRRtIt_Status(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DRRtIt_Status, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".IPv4Forwarding.");
	char routing[256] = {0};
	FILE *fp = NULL;
	char buff[256] = {0};
	char destIP[256] = {0};
	int found = 0;

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(RouterIPv4Map, routing, atoi(index));
		if(ret)
		{
			return (-1);
		}

		fp = popen("route -n ", "r");
		if(fp != NULL)
		{
			fgets(buff, sizeof(buff), fp);
			fgets(buff, sizeof(buff), fp);
			while(fgets(buff, sizeof(buff), fp))
			{
				sscanf(buff, "%s %*s", destIP);
				if(strcmp(destIP, routing) == 0)
				{
					found = 1;
					break;
				}
			}
			pclose(fp);
		}
		if(found == 1)
		{
			strcpy(value, "Enabled");
		}
		else
		{
			strcpy(value, "Disabled");
		}
	}
	else
	{
		return -1;
	}		
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DRRtIt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DRRtIt_Alias, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);*/
	ret = 1; //get from tr.xml
	return ret;
}
int set_DRRtIt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (!isalpha(value[0]))
		return -2;
	
	if (strlen(value) > 64)
		return -2;
	
	/*ret = do_uci_set(DRRtIt_Alias, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//set to tr.xml
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DRRtIt_StaticRoute(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DRRtIt_StaticRoute, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".IPv4Forwarding.");
	char routing[256] = {0};
	int found = 0;

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(RouterIPv4Map, routing, atoi(index));
		if(ret)
		{
			return (-1);
		}

		found = isStaticRoute(routing);
		if(found != 0)
		{
			strcpy(value, "1");
		}
		else
		{
			strcpy(value, "0");
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DRRtIt_DestIPAddress(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DRRtIt_DestIPAddress, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".IPv4Forwarding.");

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(RouterIPv4Map, value, atoi(index));
		if(ret)
		{
			return (-1);
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DRRtIt_DestIPAddress(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DRRtIt_DestIPAddress, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char *index = parseTemplate(path_name, ".IPv4Forwarding.");
	char routing[256] = {0};
	char buff[256] = {0};
	int found = 0;
	char name[128] = {0};
	char *p = NULL;

	if (strlen(value) > 15)
		return -2;

	if (isValidIP2(value) == 0)
		return -2;

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(RouterIPv4Map, routing, atoi(index));
		if(ret)
		{
			return (-1);
		}

		found = isStaticRoute(routing);
		tr_log(LOG_DEBUG,"##################found[%d]",found);

		if(found != 0)
		{
			sprintf(name,"%s%d.hostip","staticrt.routelist_",found-1);
			ret = do_uci_set(name,value);
			sprintf(name,"network.staticrt_%d.target",found-1);
			ret = do_uci_set(name,value);
			if(ret)
			{
				return (-1);
			}
			else
			{
				ret = do_uci_commit("staticrt");
				ret = do_uci_commit("network");
				lib_update_mapfile(RouterIPv4Map, value, atoi(index));
				if(ret)
				{
					return (-1);
				}
				system("ubus call network reload");
			}	
		}
		else
		{
			return -1;
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DRRtIt_DestSubnetMask(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DRRtIt_DestSubnetMask, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".IPv4Forwarding.");
	char routing[256] = {0};
	int found = 0;
	char name[128] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(RouterIPv4Map, routing, atoi(index));
		if(ret)
		{
			return (-1);
		}
		found = isStaticRoute(routing);
		if (found == 0)
			getRouterIPv4Option(routing, value, "Genmask");
		else{
			sprintf(name,"%s%d.netmask","staticrt.routelist_",found-1);
			ret = do_uci_get(name, value);
			if(ret)
			{
				return -1;
			}
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DRRtIt_DestSubnetMask(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DRRtIt_DestSubnetMask, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char *index = parseTemplate(path_name, ".IPv4Forwarding.");
	char routing[256] = {0};
	int found = 0;
	char name[128] = {0};

	if (strlen(value) > 15)
		return -2;

	if (isValidNetmask(value) == 0)
		return -2;

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(RouterIPv4Map, routing, atoi(index));
		if(ret)
		{
			return (-1);
		}

		found = isStaticRoute(routing);
		tr_log(LOG_DEBUG,"##################found[%d]",found);

		if(found != 0)
		{
			sprintf(name,"%s%d.netmask","staticrt.routelist_",found-1);
			ret = do_uci_set(name,value);
			sprintf(name,"network.staticrt_%d.netmask",found-1);
			ret = do_uci_set(name,value);
			if(ret)
			{
				return (-1);
			}
			else
			{
				ret = do_uci_commit("staticrt");
				ret = do_uci_commit("network");
				if(ret)
				{
					return (-1);
				}
				system("ubus call network reload");
			}	
		}
		else
		{
			return -1;
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DRRtIt_ForwardingPolicy(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DRRtIt_ForwardingPolicy, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "-1"); //always -1
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DRRtIt_ForwardingPolicy(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DRRtIt_ForwardingPolicy, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DRRtIt_GatewayIPAddress(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DRRtIt_GatewayIPAddress, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".IPv4Forwarding.");
	char routing[256] = {0};
	int found = 0;
	char name[128] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(RouterIPv4Map, routing, atoi(index));
		if(ret)
		{
			return (-1);
		}
		found = isStaticRoute(routing);
		if (found == 0)
			getRouterIPv4Option(routing, value, "Gateway");
		else{
			sprintf(name,"%s%d.gateway","staticrt.routelist_",found-1);
			ret = do_uci_get(name, value);
			if(ret)
			{
				return -1;
			}
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DRRtIt_GatewayIPAddress(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DRRtIt_GatewayIPAddress, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char *index = parseTemplate(path_name, ".IPv4Forwarding.");
	char routing[256] = {0};
	int found = 0;
	char name[128] = {0};

	if (strlen(value) > 15)
		return -2;

	if (isValidIP(value) == 0)
		return -2;

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(RouterIPv4Map, routing, atoi(index));
		if(ret)
		{
			return (-1);
		}

		found = isStaticRoute(routing);
		tr_log(LOG_DEBUG,"##################found[%d]",found);

		if(found != 0)
		{
			sprintf(name,"%s%d.gateway","staticrt.routelist_",found-1);
			ret = do_uci_set(name,value);
			sprintf(name,"network.staticrt_%d.gateway",found-1);
			ret = do_uci_set(name,value);
			if(ret)
			{
				return (-1);
			}
			else
			{
				ret = do_uci_commit("staticrt");
				ret = do_uci_commit("network");
				if(ret)
				{
					return (-1);
				}
				system("ubus call network reload");
			}	
		}
		else
		{
			return -1;
		}
	}
	else
	{
		return -1;
	}

	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DRRtIt_Interface(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DRRtIt_Interface, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".IPv4Forwarding.");
	char routing[256] = {0};
	char Iface[256] = {0};
	int found = 0;
	char name[128] = {0};
	int tolan = 0;
	int i = 0;

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(RouterIPv4Map, routing, atoi(index));
		if(ret)
		{
			return (-1);
		}
		found = isStaticRoute(routing);
		if (found == 0){
			getRouterIPv4Option(routing, Iface, "Iface");
			if (strstr(Iface, "br-") != NULL)
				tolan = 1;
			else
				tolan = 0;
		}
		else{
			sprintf(name,"%s%d.interface","staticrt.routelist_",found-1);
			ret = do_uci_get(name, Iface);
			if(ret)
			{
				return -1;
			}
			if (atoi(Iface) == 1)
				tolan = 1;
			else
				tolan = 0;
		}
		if(tolan == 1)
		{
			for (i = 0; i <= IP_LAN_INSTANCE_NUM; i ++){
				if(strcmp(Iface, lan_map[i].laninf) == 0)
				{
					sprintf(value, "Device.IP.Interface.%d", lan_map[i].num);
					break;
				}
			}
		}
		else
		{
			strcpy(value, IP_WAN_INTERFACE_PATH);
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DRRtIt_Interface(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DRRtIt_Interface, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char *index = parseTemplate(path_name, ".IPv4Forwarding.");
	char routing[256] = {0};
	int found = 0;
	char name[128] = {0};
	char buff[64] = {0};

	if (strlen(value) > 256)
		return -2;

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(RouterIPv4Map, routing, atoi(index));
		if(ret)
		{
			return (-1);
		}

		found = isStaticRoute(routing);
		tr_log(LOG_DEBUG,"##################found[%d]",found);

		if(found != 0)
		{
			sprintf(buff, "Device.IP.Interface.%d", lan_map[0].num);
			if(strcmp(value, buff) == 0)
			{
				sprintf(name,"%s%d.interface","staticrt.routelist_",found-1);
				ret = do_uci_set(name,"1");
				sprintf(name,"network.staticrt_%d.interface",found-1);
				ret = do_uci_set(name,"lan");
			}
			else if(strcmp(value, IP_WAN_INTERFACE_PATH) == 0)
			{
				sprintf(name,"%s%d.interface","staticrt.routelist_",found-1);
				ret = do_uci_set(name,"0");
				sprintf(name,"network.staticrt_%d.interface",found-1);
				ret = do_uci_set(name,"wan");
			}
			if(ret)
			{
				return (-1);
			}
			else
			{
				ret = do_uci_commit("staticrt");
				ret = do_uci_commit("network");
				if(ret)
				{
					return (-1);
				}
				system("ubus call network reload");
			}	
		}
		else
		{
			return -1;
		}
	}
	else
	{
		return -1;
	}	
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DRRtIt_Origin(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DRRtIt_Origin, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".IPv4Forwarding.");
	char routing[256] = {0};
	int found = 0;
	char iface[256] = {0};
	char inf[32] = {0};
	char wanmode[32] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(RouterIPv4Map, routing, atoi(index));
		if(ret)
		{
			return (-1);
		}

		found = isStaticRoute(routing);
		if(found != 0)
		{
			strcpy(value, "Static");
		}
		else
		{
			getRouterIPv4Option(routing, iface, "Iface");
			getWanHigherLayerInterface(inf);
			if (strcmp(iface, inf) == 0){ //check if or not wan interface
				getWanMode(wanmode);
				if (strcmp(wanmode, "pptp") == 0 || strcmp(wanmode, "l2tp") == 0)
					strcpy(value, "IPCP");
				else if (strcmp(wanmode, "dhcp") == 0)
					strcpy(value, "DHCPv4");
				else
					strcpy(value, "Static");
			}
			else
				strcpy(value, "Static");
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DRRtIt_ForwardingMetric(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DRRtIt_ForwardingMetric, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".IPv4Forwarding.");
	char routing[256] = {0};
	int found = 0;
	char name[128] = {0};
	
	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(RouterIPv4Map, routing, atoi(index));
		if(ret)
		{
			return (-1);
		}
		found = isStaticRoute(routing);
		if (found == 0)
			getRouterIPv4Option(routing, value, "Metric");
		else{
			sprintf(name,"%s%d.metric","staticrt.routelist_",found-1);
			ret = do_uci_get(name, value);
			if(ret)
			{
				return -1;
			}
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DRRtIt_ForwardingMetric(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DRRtIt_ForwardingMetric, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char *index = parseTemplate(path_name, ".IPv4Forwarding.");
	char routing[256] = {0};
	int found = 0;
	char name[128] = {0};

	if(atoi(value) < -1)
	{
		return (-2);
	}

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(RouterIPv4Map, routing, atoi(index));
		if(ret)
		{
			return (-1);
		}

		found = isStaticRoute(routing);
		tr_log(LOG_DEBUG,"##################found[%d]",found);

		if(found != 0)
		{
			sprintf(name,"%s%d.metric","staticrt.routelist_",found-1);
			ret = do_uci_set(name,value);
			sprintf(name,"network.staticrt_%d.metric",found-1);
			ret = do_uci_set(name,value);
			if(ret)
			{
				return (-1);
			}
			else
			{
				ret = do_uci_commit("staticrt");
				ret = do_uci_commit("network");
				if(ret)
				{
					return (-1);
				}
				system("ubus call network reload");
			}	
		}
		else
		{
			return -1;
		}
	}
	else
	{
		return -1;
	}	
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DRRtIt_Enable_2757(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DRRtIt_Enable_2757, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "1"); //always 1
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DRRtIt_Enable_2757(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DRRtIt_Enable_2757, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DRRtIt_Status_2759(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DRRtIt_Status_2759, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".IPv6Forwarding.");
	char key[256] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(RouterIPv6Map, key, atoi(index));
		if(ret)
		{
			return (-1);
		}

		get_ipv6_routing_info(key, value, "Status");
	}
	else
	{
		return -1;
	}
	
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DRRtIt_Alias_2760(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DRRtIt_Alias_2760, value);
	if(ret)
	{
		return -1;
	}*/
	ret = 1; //getting from tr.xml
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DRRtIt_Alias_2760(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (!isalpha(value[0]))
		return -2;
	
	if (strlen(value) > 64)
		return -2;
	
	/*ret = do_uci_set(DRRtIt_Alias_2760, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//set to tr.xml
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DRRtIt_DestIPPrefix(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DRRtIt_DestIPPrefix, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".IPv6Forwarding.");
	char key[256] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(RouterIPv6Map, key, atoi(index));
		if(ret)
		{
			return (-1);
		}

		get_ipv6_routing_info(key, value, "DestIPPrefix");
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DRRtIt_DestIPPrefix(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DRRtIt_DestIPPrefix, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DRRtIt_ForwardingPolicy_2764(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DRRtIt_ForwardingPolicy_2764, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "-1"); //always -1
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DRRtIt_ForwardingPolicy_2764(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DRRtIt_ForwardingPolicy_2764, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DRRtIt_NextHop(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DRRtIt_NextHop, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".IPv6Forwarding.");
	char key[256] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(RouterIPv6Map, key, atoi(index));
		if(ret)
		{
			return (-1);
		}

		get_ipv6_routing_info(key, value, "NextHop");
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DRRtIt_NextHop(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DRRtIt_NextHop, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DRRtIt_Interface_2768(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DRRtIt_Interface_2768, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".IPv6Forwarding.");
	char key[256] = {0};
	char inf[32] = {0};
	char inf2[32] = {0};
	int i = 0;
	int found = 0;

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(RouterIPv6Map, key, atoi(index));
		if(ret)
		{
			return (-1);
		}

		get_ipv6_routing_info(key, inf, "Interface");
		for (i = 0; i <= IP_LAN_INSTANCE_NUM; i ++){
			if (strcmp(inf, lan_map[i].laninf) == 0){
				sprintf(value, "Device.IP.Interface.%d", lan_map[i].num);
				found = 1;
				break;
			}
		}
		if (found == 0)
			strcpy(value, IP_WAN_INTERFACE_PATH);
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DRRtIt_Interface_2768(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DRRtIt_Interface_2768, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DRRtIt_Origin_2770(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DRRtIt_Origin_2770, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "RA");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DRRtIt_ForwardingMetric_2771(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DRRtIt_ForwardingMetric_2771, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".IPv6Forwarding.");
	char key[256] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(RouterIPv6Map, key, atoi(index));
		if(ret)
		{
			return (-1);
		}

		get_ipv6_routing_info(key, value, "ForwardingMetric");
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DRRtIt_ForwardingMetric_2771(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DRRtIt_ForwardingMetric_2771, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DRRtIt_ExpirationTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DRRtIt_ExpirationTime, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "0001-01-01T00:00:00Z"); //mens not known
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DRR_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("ripd.config.enable", value);
	if(ret)
	{
		strcpy(value, "0");
		ret = 0;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DRR_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DRR_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/

	ret = do_uci_set("ripd.config.enable", value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("ripd");
		if(ret)
		{
			return (-1);
		}
		system("/etc/init.d/quagga restart");
		system("/etc/init.d/firewall restart");
	}	
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DRR_SupportedModes(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DRR_SupportedModes, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "Both");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DRR_InterfaceSettingNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DRR_InterfaceSettingNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "1");//wan
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DRRIt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DRRIt_Enable, value);
	if(ret)
	{
		return -1;
	}*/
	ret = do_uci_get("ripd.config.enable", value);
	if(ret)
	{
		strcpy(value, "0");
		ret = 0;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DRRIt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DRRIt_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/

	ret = do_uci_set("ripd.config.enable", value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("ripd");
		if(ret)
		{
			return (-1);
		}
		system("/etc/init.d/quagga restart");
		system("/etc/init.d/firewall restart");
	}	
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DRRIt_Status(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DRRIt_Status, value);
	if(ret)
	{
		return -1;
	}*/
	char buff[128] = {0};

	ret = do_uci_get("ripd.config.enable", buff);
	if(ret)
	{
		strcpy(value, "Disabled");
		ret = 0;
	}
	else
	{
		if(atoi(buff) == 1)
		{
			strcpy(value, "Enabled");
		}
		else if(atoi(buff) == 0)
		{
			strcpy(value, "Disabled");
		}
		else
		{
			strcpy(value, "Error_Misconfigured");
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DRRIt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DRRIt_Alias, value);
	if(ret)
	{
		return -1;
	}*/
	ret = 1; //getting from tr.xml
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DRRIt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (!isalpha(value[0]))
		return -2;
	
	if (strlen(value) > 64)
		return -2;
	
	/*ret = do_uci_set(DRRIt_Alias, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//set to tr.xml
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DRRIt_Interface(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DRRIt_Interface, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".InterfaceSetting.");

	if (index != NULL)
	{
		//if (atoi(index) == 0)
		//	strcpy(value, "Device.IP.Interface.1");
		//else{
			if (checkEthWanUpDown())
				strcpy(value, IP_WAN_INTERFACE_PATH);
			else
				strcpy(value, "");
		//}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DRRIt_Interface(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DRRIt_Interface, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DRRIt_AcceptRA(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DRRIt_AcceptRA, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "1");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DRRIt_AcceptRA(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DRRIt_AcceptRA, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DRRIt_SendRA(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DRRIt_SendRA, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "1");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DRRIt_SendRA(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DRRIt_SendRA, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DRR_Enable_2789(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DRR_Enable_2789, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DRR_Enable_2789(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DRR_Enable_2789, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DRR_InterfaceSettingNumberOfEntries_2791(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DRR_InterfaceSettingNumberOfEntries_2791, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DRRIt_Status_2792(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DRRIt_Status_2792, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DRRIt_Interface_2793(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DRRIt_Interface_2793, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DRRIt_SourceRouter(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DRRIt_SourceRouter, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DRRIt_PreferredRouteFlag(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DRRIt_PreferredRouteFlag, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DRRIt_Prefix(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DRRIt_Prefix, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DRRIt_RouteLifetime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DRRIt_RouteLifetime, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DN_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DN_Enable, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "1"); //always enable
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DN_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DN_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DN_InterfaceSettingNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DN_InterfaceSettingNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}*/
	sprintf(value, "%d", IP_LAN_INSTANCE_NUM+IP_WAN_INSTANCE_NUM);
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DNIt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DNIt_Enable, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".InterfaceSetting.");

	if (index != NULL)
	{
		if (atoi(index) <= IP_LAN_INSTANCE_NUM)
		{
			char inf[32] = {0};
			a_infinfo infStatus;
			int lanipinsnum = 0;

			memset(&infStatus, 0, sizeof(infStatus));
			lanipinsnum = getLanIPInstanceNum(index);
			tr_log(LOG_DEBUG,"lanipinsnum value [%d]",lanipinsnum);
			getLanUbsInterfaceNameWithInstanceNum2(lanipinsnum, inf);
			getInterfaceInfo(inf, &infStatus);

			if (infStatus.status == 1)
				strcpy(value, "1");
			else
				strcpy(value, "0");
		}
		else{
			if (checkEthWanUpDown())
				strcpy(value, "1");
			else
				strcpy(value, "0");
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DNIt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DNIt_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DNIt_Status(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DNIt_Status, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".InterfaceSetting.");

	if (index != NULL)
	{
		if (atoi(index) <= IP_LAN_INSTANCE_NUM)
		{
			char inf[32] = {0};
			a_infinfo infStatus;
			int lanipinsnum = 0;

			memset(&infStatus, 0, sizeof(infStatus));
			lanipinsnum = getLanIPInstanceNum(index);
			getLanUbsInterfaceNameWithInstanceNum2(lanipinsnum, inf);
			getInterfaceInfo(inf, &infStatus);

			if (infStatus.status == 1)
				strcpy(value, "Enabled");
			else
				strcpy(value, "Disabled");
		}
		else{
			if (checkEthWanUpDown())
				strcpy(value, "Enabled");
			else
				strcpy(value, "Disabled");
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DNIt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DNIt_Alias, value);
	if(ret)
	{
		return -1;
	}*/
	ret = 1; //getting from tr.xml
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DNIt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (!isalpha(value[0]))
		return -2;
	
	if (strlen(value) > 64)
		return -2;
	
	/*ret = do_uci_set(DNIt_Alias, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//set to tr.xml
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DNIt_Interface(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DNIt_Interface, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".InterfaceSetting.");

	if (index != NULL){
		if (atoi(index) <= IP_LAN_INSTANCE_NUM)
		{
			char inf[32] = {0};
			a_infinfo infStatus;
			int lanipinsnum = 0;

			memset(&infStatus, 0, sizeof(infStatus));
			lanipinsnum = getLanIPInstanceNum(index);
			getLanUbsInterfaceNameWithInstanceNum2(lanipinsnum, inf);
			getInterfaceInfo(inf, &infStatus);

			if (infStatus.status == 1)
				sprintf(value, "Device.IP.Interface.%d", lanipinsnum);
			else
				strcpy(value, "");
		}
		else
		{
			if (checkEthWanUpDown() == 0)
				strcpy(value, "");
			else
				sprintf(value, "Device.IP.Interface.%s", index);
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DNIt_Interface(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DNIt_Interface, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DNIt_RetransTimer(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DNIt_RetransTimer, value);
	if(ret)
	{
		return -1;
	}*/
	char inf[32] = {0};
	char *index = parseTemplate(path_name, ".InterfaceSetting.");

	if (index != NULL){
		if (atoi(index) <= IP_LAN_INSTANCE_NUM)
		{
			int lanipinsnum = 0;
			lanipinsnum = getLanIPInstanceNum(index);
			getLanInterfaceNameWithInstanceNum2(lanipinsnum, inf);
		}
		else
			getEthInterfaceName("wan", inf);
	}

	getNeighRetransTimer(inf, value);
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DNIt_RetransTimer(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DNIt_RetransTimer, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DNIt_RtrSolicitationInterval(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DNIt_RtrSolicitationInterval, value);
	if(ret)
	{
		return -1;
	}*/
	char inf[32] = {0};
	char *index = parseTemplate(path_name, ".InterfaceSetting.");

	if (index != NULL){
		if (atoi(index) <= IP_LAN_INSTANCE_NUM)
		{
			int lanipinsnum = 0;
			lanipinsnum = getLanIPInstanceNum(index);
			getLanInterfaceNameWithInstanceNum2(lanipinsnum, inf);
		}
		else
			getEthInterfaceName("wan", inf);
	}

	getRtrSolicitationInterval(inf, value);
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DNIt_RtrSolicitationInterval(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DNIt_RtrSolicitationInterval, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DNIt_MaxRtrSolicitations(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DNIt_MaxRtrSolicitations, value);
	if(ret)
	{
		return -1;
	}*/
	char inf[32] = {0};
	char *index = parseTemplate(path_name, ".InterfaceSetting.");

	if (index != NULL){
		if (atoi(index) <= IP_LAN_INSTANCE_NUM)
		{
			int lanipinsnum = 0;
			lanipinsnum = getLanIPInstanceNum(index);
			getLanInterfaceNameWithInstanceNum2(lanipinsnum, inf);
		}
		else
			getEthInterfaceName("wan", inf);
	}

	getMaxRtrSolicitations(inf, value);
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DNIt_MaxRtrSolicitations(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DNIt_MaxRtrSolicitations, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DNIt_NUDEnable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DNIt_NUDEnable, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".InterfaceSetting.");

	if (index != NULL)
	{
		if (atoi(index) <= IP_LAN_INSTANCE_NUM)
		{
			char inf[32] = {0};
			a_infinfo infStatus;
			int lanipinsnum = 0;

			memset(&infStatus, 0, sizeof(infStatus));
			lanipinsnum = getLanIPInstanceNum(index);
			getLanUbsInterfaceNameWithInstanceNum2(lanipinsnum, inf);
			getInterfaceInfo(inf, &infStatus);

			if (infStatus.status == 1)
				strcpy(value, "1");
			else
				strcpy(value, "0");
		}
		else{
			if (checkEthWanUpDown())
				strcpy(value, "1");
			else
				strcpy(value, "0");
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DNIt_NUDEnable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DNIt_NUDEnable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DNIt_RSEnable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DNIt_RSEnable, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".InterfaceSetting.");

	if (index != NULL)
	{
		if (atoi(index) <= IP_LAN_INSTANCE_NUM)
		{
			char inf[32] = {0};
			a_infinfo infStatus;
			int lanipinsnum = 0;

			memset(&infStatus, 0, sizeof(infStatus));
			lanipinsnum = getLanIPInstanceNum(index);
			getLanUbsInterfaceNameWithInstanceNum2(lanipinsnum, inf);
			getInterfaceInfo(inf, &infStatus);

			if (infStatus.status == 1)
				strcpy(value, "1");
			else
				strcpy(value, "0");
		}
		else{
			if (checkEthWanUpDown())
				strcpy(value, "1");
			else
				strcpy(value, "0");
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DNIt_RSEnable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DNIt_RSEnable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DR_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	int found1 = 0, found2 = 0;
	char radvden[32] = {0};

	ret = do_uci_get("radvd.@interface[0].ignore", radvden);
	if(ret)
	{
		found1 = 1;
		ret = 0;
	}
	else
	{
		if (atoi(radvden) == 0)
			found1 = 1;
		else
			found1 = 0;
	}

	memset(radvden, 0, sizeof(radvden));
	ret = do_uci_get("radvd.@prefix[0].ignore", radvden);
	if(ret)
	{
		found2 = 1;
		ret = 0;
	}
	else
	{
		if (atoi(radvden) == 0)
			found2 = 1;
		else
			found2 = 0;
	}

	if (found1 == 1 && found2 == 1)
		strcpy(value, "1");
	else
		strcpy(value, "0");
	
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DR_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char radvden[32] = {0};

	if (atoi(value) == 0)
		strcpy(radvden, "1");
	else if (atoi(value) == 1)
		strcpy(radvden, "0");
	else
		return -1;
	
	ret = do_uci_set("radvd.@interface[0].ignore", radvden);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("radvd");
		if(ret)
		{
			return (-1);
		}
		//ret = 1; //means need to reboot for taking effect
	}
	
	ret = do_uci_set("radvd.@prefix[0].ignore", radvden);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("radvd");
		if(ret)
		{
			return (-1);
		}
		//ret = 1; //means need to reboot for taking effect
	}
	doRadvdRestart();
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DR_InterfaceSettingNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DR_InterfaceSettingNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "1"); //only for lan
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DRIt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("radvd.@interface[0].ignore", value);
	if(ret)
	{
		strcpy(value, "1");
		ret = 0;
	}
	else
	{
		if (atoi(value) == 0)
			strcpy(value, "1");
		else
			strcpy(value, "0");
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DRIt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char radvden[32] = {0};

	if (atoi(value) == 0)
		strcpy(radvden, "1");
	else if (atoi(value) == 1)
		strcpy(radvden, "0");
	else
		return -1;
	
	ret = do_uci_set("radvd.@interface[0].ignore", radvden);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("radvd");
		if(ret)
		{
			return (-1);
		}
		//ret = 1; //means need to reboot for taking effect
		doRadvdRestart();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DRIt_Status(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("radvd.@interface[0].ignore", value);
	if(ret)
	{
		strcpy(value, "Enabled");
		ret = 0;
	}
	else
	{
		if (atoi(value) == 0)
			strcpy(value, "Enabled");
		else
			strcpy(value, "Disabled");
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DRIt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DRIt_Alias, value);
	if(ret)
	{
		return -1;
	}*/
	ret = 1; //getting from tr.xml
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DRIt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (!isalpha(value[0]))
		return -2;
	
	if (strlen(value) > 64)
		return -2;
	
	/*ret = do_uci_set(DRIt_Alias, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//set to tr.xml
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DRIt_Interface(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DRIt_Interface, value);
	if(ret)
	{
		return -1;
	}*/
	sprintf(value, "Device.IP.Interface.%d", lan_map[0].num);
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DRIt_Interface(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DRIt_Interface, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DRIt_ManualPrefixes(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DRIt_ManualPrefixes, value);
	if(ret)
	{
		return -1;
	}*/
	sprintf(value, "Device.IP.Interface.%d.IPv6Prefix.1.Prefix", lan_map[0].num);
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DRIt_ManualPrefixes(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DRIt_ManualPrefixes, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DRIt_Prefixes(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DRIt_Prefixes, value);
	if(ret)
	{
		return -1;
	}*/
	sprintf(value, "Device.IP.Interface.%d.IPv6Prefix.1.Prefix", lan_map[0].num);
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DRIt_Prefixes(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DRIt_Prefixes, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DRIt_MaxRtrAdvInterval(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("radvd.@interface[0].MaxRtrAdvInterval", value);
	if(ret)
	{
		strcpy(value, "600"); //default value
		ret = 0;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DRIt_MaxRtrAdvInterval(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (atoi(value) < 4 || atoi(value) > 1800)
		return -2;
	
	ret = do_uci_set("radvd.@interface[0].MaxRtrAdvInterval", value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("radvd");
		if(ret)
		{
			return (-1);
		}
		//ret = 1; //means need to reboot for taking effect
		doRadvdRestart();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DRIt_MinRtrAdvInterval(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("radvd.@interface[0].MinRtrAdvInterval", value);
	if(ret)
	{
		strcpy(value, "200"); //default value
		ret = 0;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DRIt_MinRtrAdvInterval(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (atoi(value) < 3 || atoi(value) > 1350)
		return -2;
	
	ret = do_uci_set("radvd.@interface[0].MinRtrAdvInterval", value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("radvd");
		if(ret)
		{
			return (-1);
		}
		//ret = 1; //means need to reboot for taking effect
		doRadvdRestart();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DRIt_AdvDefaultLifetime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("radvd.@interface[0].AdvDefaultLifetime", value);
	if(ret)
	{
		strcpy(value, "1800"); //default value
		ret = 0;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DRIt_AdvDefaultLifetime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (atoi(value) > 65535)
		return -2;
	
	ret = do_uci_set("radvd.@interface[0].AdvDefaultLifetime", value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("radvd");
		if(ret)
		{
			return (-1);
		}
		//ret = 1; //means need to reboot for taking effect
		doRadvdRestart();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DRIt_AdvManagedFlag(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("radvd.@interface[0].AdvManagedFlag", value);
	if(ret)
	{
		strcpy(value, "1");
		ret = 0;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DRIt_AdvManagedFlag(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set("radvd.@interface[0].AdvManagedFlag", value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("radvd");
		if(ret)
		{
			return (-1);
		}
		//ret = 1; //means need to reboot for taking effect
		doRadvdRestart();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DRIt_AdvOtherConfigFlag(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("radvd.@interface[0].AdvOtherConfigFlag", value);
	if(ret)
	{
		strcpy(value, "1");
		ret = 0;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DRIt_AdvOtherConfigFlag(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set("radvd.@interface[0].AdvOtherConfigFlag", value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("radvd");
		if(ret)
		{
			return (-1);
		}
		//ret = 1; //means need to reboot for taking effect
		doRadvdRestart();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DRIt_AdvMobileAgentFlag(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("radvd.@interface[0].AdvHomeAgentFlag", value);
	if(ret)
	{
		strcpy(value, "0");
		ret = 0;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DRIt_AdvMobileAgentFlag(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set("radvd.@interface[0].AdvHomeAgentFlag", value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("radvd");
		if(ret)
		{
			return (-1);
		}
		//ret = 1; //means need to reboot for taking effect
		doRadvdRestart();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DRIt_AdvPreferredRouterFlag(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("radvd.@interface[0].AdvDefaultPreference", value);
	if(ret)
	{
		strcpy(value, "Medium");
		ret = 0;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DRIt_AdvPreferredRouterFlag(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (strcmp(value, "High") != 0 && strcmp(value, "Medium") != 0 && strcmp(value, "Low") != 0)
		return -2;
	
	ret = do_uci_set("radvd.@interface[0].AdvDefaultPreference", value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("radvd");
		if(ret)
		{
			return (-1);
		}
		//ret = 1; //means need to reboot for taking effect
		doRadvdRestart();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DRIt_AdvNDProxyFlag(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DRIt_AdvNDProxyFlag, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "0"); //always 0
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DRIt_AdvNDProxyFlag(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DRIt_AdvNDProxyFlag, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DRIt_AdvLinkMTU(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("radvd.@interface[0].AdvLinkMTU", value);
	if(ret)
	{
		strcpy(value, "0"); //default value
		ret = 0;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DRIt_AdvLinkMTU(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set("radvd.@interface[0].AdvLinkMTU", value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("radvd");
		if(ret)
		{
			return (-1);
		}
		//ret = 1; //means need to reboot for taking effect
		doRadvdRestart();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DRIt_AdvReachableTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("radvd.@interface[0].AdvReachableTime", value);
	if(ret)
	{
		strcpy(value, "0"); //default value
		ret = 0;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DRIt_AdvReachableTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (atoi(value) > 3600000)
		return -2;
	
	ret = do_uci_set("radvd.@interface[0].AdvReachableTime", value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("radvd");
		if(ret)
		{
			return (-1);
		}
		//ret = 1; //means need to reboot for taking effect
		doRadvdRestart();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DRIt_AdvRetransTimer(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("radvd.@interface[0].AdvRetransTimer", value);
	if(ret)
	{
		strcpy(value, "0"); //default value
		ret = 0;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DRIt_AdvRetransTimer(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set("radvd.@interface[0].AdvRetransTimer", value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("radvd");
		if(ret)
		{
			return (-1);
		}
		//ret = 1; //means need to reboot for taking effect
		doRadvdRestart();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DRIt_AdvCurHopLimit(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("radvd.@interface[0].AdvCurHopLimit", value);
	if(ret)
	{
		strcpy(value, "0"); //default value
		ret = 0;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DRIt_AdvCurHopLimit(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (atoi(value) > 255)
		return -2;
	
	ret = do_uci_set("radvd.@interface[0].AdvCurHopLimit", value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
		//ret = 1; //means need to reboot for taking effect
		doRadvdRestart();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DRIt_OptionNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DRIt_OptionNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}*/
	char keyvalue[MAXMAPITEMS][256];
	int num = get_Device_RouterAdvertisement_InterfaceSetting_Option_type(keyvalue);

	sprintf(value, "%d", num);
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DRItOt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DRItOt_Enable, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "1"); //always 1
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DRItOt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DRItOt_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DRItOt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DRItOt_Alias, value);
	if(ret)
	{
		return -1;
	}*/
	ret = 1; //get from tr.xml
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DRItOt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (!isalpha(value[0]))
		return -2;
	
	if (strlen(value) > 64)
		return -2;
	
	/*ret = do_uci_set(DRItOt_Alias, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//set to tr.xml
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DRItOt_Tag(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DRItOt_Tag, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Option.");
	char key[256] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(RouterAdvertisementInterfaceSetting1OptionMap, key, atoi(index));
		if(ret)
		{
			return (-1);
		}

		strcpy(value, key);
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DRItOt_Tag(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DRItOt_Tag, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DRItOt_Value(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DRItOt_Value, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Option.");
	char key[256] = {0};
	char tagvalue[128] = {0};
	int i = 0, j = 0;

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(RouterAdvertisementInterfaceSetting1OptionMap, key, atoi(index));
		if(ret)
		{
			return (-1);
		}

		getRouterAdvertisementOptionValue(tagvalue, key);
		for (i = 0, j = 0; tagvalue[i] != '\0'; i ++){
			if (tagvalue[i] != ':'){
				value[j] = tagvalue[i];
				j++;
			}
		}
		value[j] = '\0';
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DRItOt_Value(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DRItOt_Value, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DI_Enable_2865(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DI_Enable_2865, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DI_Enable_2865(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DI_Enable_2865, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DI_InterfaceSettingNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DI_InterfaceSettingNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIIt_Enable_2868(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIIt_Enable_2868, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIIt_Enable_2868(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIIt_Enable_2868, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIIt_Status_2870(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIIt_Status_2870, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIIt_Alias_2871(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIIt_Alias_2871, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIIt_Alias_2871(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIIt_Alias_2871, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIIt_BorderRelayIPv4Addresses(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIIt_BorderRelayIPv4Addresses, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIIt_BorderRelayIPv4Addresses(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIIt_BorderRelayIPv4Addresses, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIIt_AllTrafficToBorderRelay(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIIt_AllTrafficToBorderRelay, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIIt_AllTrafficToBorderRelay(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIIt_AllTrafficToBorderRelay, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIIt_SPIPv6Prefix(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIIt_SPIPv6Prefix, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIIt_SPIPv6Prefix(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIIt_SPIPv6Prefix, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIIt_IPv4MaskLength(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIIt_IPv4MaskLength, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIIt_IPv4MaskLength(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIIt_IPv4MaskLength, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIIt_AddressSource(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIIt_AddressSource, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIIt_AddressSource(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIIt_AddressSource, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIIt_TunnelInterface(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIIt_TunnelInterface, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIIt_TunneledInterface(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIIt_TunneledInterface, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DD_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DD_Enable, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DD_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DD_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DD_InterfaceSettingNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DD_InterfaceSettingNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDIt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDIt_Enable, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDIt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDIt_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDIt_Status(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDIt_Status, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDIt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDIt_Alias, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDIt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDIt_Alias, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDIt_EndpointAssignmentPrecedence(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDIt_EndpointAssignmentPrecedence, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDIt_EndpointAssignmentPrecedence(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDIt_EndpointAssignmentPrecedence, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDIt_EndpointAddressTypePrecedence(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDIt_EndpointAddressTypePrecedence, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDIt_EndpointAddressTypePrecedence(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDIt_EndpointAddressTypePrecedence, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDIt_EndpointAddressInUse(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDIt_EndpointAddressInUse, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDIt_EndpointName(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDIt_EndpointName, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDIt_EndpointName(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDIt_EndpointName, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDIt_EndpointAddress(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDIt_EndpointAddress, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDIt_EndpointAddress(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDIt_EndpointAddress, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDIt_Origin(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDIt_Origin, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDIt_TunnelInterface(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDIt_TunnelInterface, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDIt_TunneledInterface(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDIt_TunneledInterface, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DQ_MaxClassificationEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("qos.number.MaxClassificationEntries", value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQ_MaxClassificationEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set("QoSNumberEntries.qosnumber.MaxClassificationEntries", value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(QOSNUMBERENTRIES);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQ_ClassificationNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char entrynum[32] = {0};
	ret = do_uci_get(CLASSIFICATIONNUMBEROFENTRIES_PATH, entrynum);
	if(ret)
	{
		strcpy(value, "0");
		ret = 0;
	}
	else
		sprintf(value, "%d", atoi(entrynum));
	
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQ_ClassificationNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(CLASSIFICATIONNUMBEROFENTRIES_PATH, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(QOSNUMBERENTRIES);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQ_MaxAppEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DQ_MaxAppEntries, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "5");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQ_MaxAppEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DQ_MaxAppEntries, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQ_AppNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DQ_AppNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}*/
	char entrynum[32] = {0};

	ret = do_uci_get(DQ_AppNumberOfEntries, entrynum);
	if(ret)
	{
		strcpy(value, "0");
		ret = 0;
	}
	else
		sprintf(value, "%d", atoi(entrynum));
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQ_AppNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DQ_AppNumberOfEntries, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQ_MaxFlowEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DQ_MaxFlowEntries, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQ_MaxFlowEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DQ_MaxFlowEntries, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQ_FlowNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DQ_FlowNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQ_FlowNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DQ_FlowNumberOfEntries, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQ_MaxPolicerEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DQ_MaxPolicerEntries, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQ_MaxPolicerEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DQ_MaxPolicerEntries, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQ_PolicerNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DQ_PolicerNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQ_PolicerNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DQ_PolicerNumberOfEntries, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQ_MaxQueueEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("qos.number.MaxQueueEntries", value);
	if(ret)
	{
		return -1;
	}
	strcpy(value, "256");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQ_MaxQueueEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DQ_MaxQueueEntries, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQ_QueueNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char entrynum[32] = {0};

	ret = do_uci_get(QUEUENUMBEROFENTRIES_PATH, entrynum);
	tr_log(LOG_NOTICE,"do_uci_get xxxxxxx 62274  QUEUENUMBEROFENTRIES_PATH ret ==%d", ret);
	if(ret!=0)
	{
		strcpy(value, "0");
		ret = 0;
	}
	else
		sprintf(value, "%d", atoi(entrynum));
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQ_QueueNumberOfEntries(char * path_name, char *value)
{
	tr_log(LOG_NOTICE,"do_uci_set xxxxxxx 62274  QUEUENUMBEROFENTRIES_PATH ret ==%d");
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(QUEUENUMBEROFENTRIES_PATH, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(QOSNUMBERENTRIES);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQ_QueueStatsNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DQ_QueueStatsNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQ_QueueStatsNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DQ_QueueStatsNumberOfEntries, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQ_MaxShaperEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("qos.number.MaxShaperEntries", value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQ_MaxShaperEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DQ_MaxShaperEntries, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQ_ShaperNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char entrynum[32] = {0};

	ret = do_uci_get(SHAPERNUMBEROFENTRIES_PATH, entrynum);
	if(ret)
	{
		strcpy(value, "0");
		ret = 0;
	}
	else
		sprintf(value, "%d", atoi(entrynum));
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQ_ShaperNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(SHAPERNUMBEROFENTRIES_PATH, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(QOSNUMBERENTRIES);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQ_DefaultForwardingPolicy(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char entrynum[32] = {0};

	ret = do_uci_get(DQ_DefaultForwardingPolicy, entrynum);
	if(ret)
	{
		strcpy(value, "0");
		ret = 0;
	}
	else
		sprintf(value, "%d", atoi(entrynum));
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQ_DefaultForwardingPolicy(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DQ_DefaultForwardingPolicy, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQ_DefaultTrafficClass(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char entrynum[32] = {0};

	ret = do_uci_get(DQ_DefaultTrafficClass, entrynum);
	if(ret)
	{
		strcpy(value, "0");
		ret = 0;
	}
	else
		sprintf(value, "%d", atoi(entrynum));
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQ_DefaultTrafficClass(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DQ_DefaultTrafficClass, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQ_DefaultPolicer(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DQ_DefaultPolicer, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQ_DefaultPolicer(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DQ_DefaultPolicer, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQ_DefaultQueue(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DQ_DefaultQueue, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQ_DefaultQueue(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DQ_DefaultQueue, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQ_DefaultDSCPMark(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DQ_DefaultDSCPMark, value);
	if(ret)
	{
		strcpy(value, "-1");
		ret = 0;
	}
	else
	{
		if (value[0] == ' ')
			strcpy(value, "-1");
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQ_DefaultDSCPMark(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DQ_DefaultDSCPMark, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQ_DefaultEthernetPriorityMark(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DQ_DefaultEthernetPriorityMark, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQ_DefaultEthernetPriorityMark(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DQ_DefaultEthernetPriorityMark, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQ_DefaultInnerEthernetPriorityMark(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DQ_DefaultInnerEthernetPriorityMark, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQ_DefaultInnerEthernetPriorityMark(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DQ_DefaultInnerEthernetPriorityMark, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQ_AvailableAppList(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DQ_AvailableAppList, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "sip,h.323,h.248,mgcp");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQ_AvailableAppList(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DQ_AvailableAppList, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQCt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DQCt_Enable, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Classification.");
	char Order[256] = {0};
	char name[256] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSClassificationMap, Order, atoi(index));
		if(ret)
		{
			return (-1);
		}

		int num = getQosClassificationEntry(Order);
		if(num >= 0)
		{
			sprintf(name, "qos.cf%d.Enable", num);		
			tr_log(LOG_DEBUG,"name[%s]", name);
			ret = do_uci_get(name, value);
			if(ret)
			{
				strcpy(value, "0");
				ret = 0;
			}
		}
		else
		{
			return -1;
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQCt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DQCt_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char *index = parseTemplate(path_name, ".Classification.");
	char Order[256] = {0};
	char name[256] = {0};

	if(strlen(value) > 45)
	{
		return (-2);
	}

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSClassificationMap, Order, atoi(index));
		if(ret)
		{
			return (-1);
		}

		int num = getQosClassificationEntry(Order);
		if(num >= 0)
		{
			sprintf(name, "qos.cf%d.Enable", num);
			tr_log(LOG_DEBUG,"name[%s]", name);
			ret = do_uci_set(name, value);
			if(ret)
			{
				return (-1);
			}
			else
			{
				ret = do_uci_commit(QOSNUMBERENTRIES);
				if(ret)
				{
					return (-1);
				}
				doQoSClassification();
			}
		}
		else
		{
			return -1;
		}		
	}
	else
	{
		return -1;
	}
	//tr_creat_classification_rules();
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQCt_Status(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DQCt_Status, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Classification.");
	char Order[256] = {0};
	char name[256] = {0};
	char tmp[256] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSClassificationMap, Order, atoi(index));
		if(ret)
		{
			return (-1);
		}

		int num = getQosClassificationEntry(Order);
		if(num >= 0)
		{
			sprintf(name, "qos.cf%d.Enable", num);
			tr_log(LOG_DEBUG,"name[%s]", name);
			do_uci_get(name, tmp);
			if(atoi(tmp) == 1)
			{
				strcpy(value, "Enabled");
			}
			else
			{
				strcpy(value, "Disabled");
			}
		}
		else
		{
			return -1;
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DQCt_Order(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DQCt_Order, value);
	if(ret)
	{
		return -1;
	}*/
	/*char *index = parseTemplate(path_name, ".Classification.");
	char Order[256] = {0};
	char name[256] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSClassificationMap, Order, atoi(index));
		if(ret)
		{
			return (-1);
		}
		sprintf(name, "qos.cf%d.Order", atoi(Order));		
		tr_log(LOG_DEBUG,"name[%s]", name);
		do_uci_get(name, value);
		strcpy(value, Order);
	}
	else
	{
		return -1;
	}*/

	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQCt_Order(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DQCt_Order, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	/*char *index = parseTemplate(path_name, ".Classification.");
	char Order[32] = {0};
	char name[256] = {0};

	if (index != NULL)
	{
		toSaveMapFile(QoSClassificationMap, index, value); //update key info
		}
	else
	{
		return -1;
	}*/
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQCt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DQCt_Alias, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Queue.");
	char Alias[256] = {0};
	char name[256] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSClassificationMap, Alias, atoi(index));
		if(ret)
		{
			return (-1);
		}
		strcpy(value, Alias);
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQCt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (!isalpha(value[0]))
		return -2;
	
	if (strlen(value) > 64)
		return -2;
	
	/*ret = do_uci_set(DQCt_Alias, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//set to tr.xml
	char *index = parseTemplate(path_name, ".Queue.");
	char Alias[32] = {0};
	char name[256] = {0};

	if (!isalpha(value[0]))
		return -2;
	
	if (strlen(value) > 64)
		return -2;

	if (index != NULL)
	{
		toSaveMapFile(QoSClassificationMap, index, value); //update key info
	}

	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQCt_DHCPType(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("classification_template.template.DHCPType", value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQCt_DHCPType(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set("classification_template.template.DHCPType", value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("classification_template");
		if(ret)
		{
			return (-1);
		}
		doQoSClassification();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQCt_Interface(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DQCt_Interface, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Classification.");
	char Order[64] = {0};
	char name[256] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSClassificationMap, Order, atoi(index));
		if(ret)
		{
			return (-1);
		}

		int num = getQosClassificationEntry(Order);
		tr_log(LOG_DEBUG,"num[%d]", num);
		if(num >= 0)
		{
			sprintf(name, "qos.cf%d.Interface", num);		
			tr_log(LOG_DEBUG,"name[%s]", name);
			ret = do_uci_get(name, value);
			if(ret)
			{
				strcpy(value, "");
				ret = 0;
			}
		}
		else
		{
			return -1;
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQCt_Interface(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DQCt_Interface, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char *index = parseTemplate(path_name, ".Classification.");
	char Order[256] = {0};
	char name[256] = {0};
	int i = 0, found = 0;

	if(strlen(value) > 256)
	{
		return (-2);
	}

	for (i = 0; i <= WIFI_MAX_INSTANCE_NUM; i ++){
		sprintf(name, "Device.WiFi.SSID.%d", wifi_map[i].num);
		if (strcasecmp(value, name) == 0){
			found = 1;
			break;
		}
	}

	for (i = 0; i <= IP_LAN_INSTANCE_NUM; i ++){
		sprintf(name, "Device.IP.Interface.%d", lan_map[i].num);
		if (strcasecmp(value, name) == 0){
			found = 1;
			break;
		}
	}

	if (strcasecmp(value, IP_WAN_INTERFACE_PATH) == 0)
	{
		found = 1;
	}

	if(strlen(value) > 0 && found == 0)
	{
		return (-2);
	}

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSClassificationMap, Order, atoi(index));
		if(ret)
		{
			return (-1);
		}

		int num = getQosClassificationEntry(Order);
		if(num >= 0)
		{
			sprintf(name, "qos.cf%d.Interface", num);		
			tr_log(LOG_DEBUG,"name[%s]", name);
			ret = do_uci_set(name, value);
			if(ret)
			{
				return (-1);
			}
			else
			{
				ret = do_uci_commit(QOSNUMBERENTRIES);
				if(ret)
				{
					return (-1);
				}
				doQoSClassification();
			}
		}
		else
		{
			return -1;
		}
	}
	else
	{
		return -1;
	}

	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQCt_AllInterfaces(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DQCt_AllInterfaces, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Classification.");
	char Order[256] = {0};
	char name[256] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSClassificationMap, Order, atoi(index));
		if(ret)
		{
			return (-1);
		}
		sprintf(name, "qos.cf%d.AllInterfaces", atoi(Order));		
		tr_log(LOG_DEBUG,"name[%s]", name);
		ret = do_uci_get(name, value);
		if(ret)
		{
			strcpy(value, "0");
			ret = 0;
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQCt_AllInterfaces(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DQCt_AllInterfaces, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char *index = parseTemplate(path_name, ".Classification.");
	char Order[256] = {0};
	char name[256] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSClassificationMap, Order, atoi(index));
		if(ret)
		{
			return (-1);
		}
		sprintf(name, "qos.cf%d.AllInterfaces", atoi(Order));		
		tr_log(LOG_DEBUG,"name[%s]", name);
		ret = do_uci_set(name, value);
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit(MS);
			if(ret)
			{
				return (-1);
			}
			doQoSClassification();
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQCt_DestIP(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DQCt_DestIP, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Classification.");
	char Order[256] = {0};
	char name[256] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSClassificationMap, Order, atoi(index));
		if(ret)
		{
			return (-1);
		}

		int num = getQosClassificationEntry(Order);
		if(num >= 0)
		{
			sprintf(name, "qos.cf%d.DestIP", num);
			tr_log(LOG_DEBUG,"name[%s]", name);
			ret = do_uci_get(name, value);
			if(ret)
			{
				strcpy(value, "");
				ret = 0;
			}
		}
		else
		{
			return -1;
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQCt_DestIP(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DQCt_DestIP, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char *index = parseTemplate(path_name, ".Classification.");
	char Order[256] = {0};
	char name[256] = {0};

	if(strlen(value) > 45)
	{
		return (-2);
	}

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSClassificationMap, Order, atoi(index));
		if(ret)
		{
			return (-1);
		}

		int num = getQosClassificationEntry(Order);
		if(num >= 0)
		{
			sprintf(name, "qos.cf%d.DestIP", num);		
		tr_log(LOG_DEBUG,"name[%s]", name);
		ret = do_uci_set(name, value);
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit(QOSNUMBERENTRIES);
			if(ret)
			{
				return (-1);
			}
				doQoSClassification();
			}
		}
		else
		{
			return -1;
		}		
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQCt_DestMask(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DQCt_DestMask, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Classification.");
	char Order[256] = {0};
	char name[256] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSClassificationMap, Order, atoi(index));
		if(ret)
		{
			return (-1);
		}
		sprintf(name, "qos.cf%d.DestMask", atoi(Order));		
		tr_log(LOG_DEBUG,"name[%s]", name);
		ret = do_uci_get(name, value);
		if(ret)
		{
			strcpy(value, "");
			ret = 0;
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQCt_DestMask(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DQCt_DestMask, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char *index = parseTemplate(path_name, ".Classification.");
	char Order[256] = {0};
	char name[256] = {0};

	if(strlen(value) > 49)
	{
		return (-2);
	}

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSClassificationMap, Order, atoi(index));
		if(ret)
		{
			return (-1);
		}
		sprintf(name, "qos.cf%d.DestMask", atoi(Order));		
		tr_log(LOG_DEBUG,"name[%s]", name);
		ret = do_uci_set(name, value);
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit(QOSNUMBERENTRIES);
			if(ret)
			{
				return (-1);
			}
			doQoSClassification();
		}
	}
	else
	{
		return -1;
	}	
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQCt_DestIPExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DQCt_DestIPExclude, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Classification.");
	char Order[256] = {0};
	char name[256] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSClassificationMap, Order, atoi(index));
		if(ret)
		{
			return (-1);
		}
		sprintf(name, "qos.cf%d.DestIPExclude", atoi(Order));		
		tr_log(LOG_DEBUG,"name[%s]", name);
		ret = do_uci_get(name, value);
		if(ret)
		{
			strcpy(value, "0");
			ret = 0;
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQCt_DestIPExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DQCt_DestIPExclude, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char *index = parseTemplate(path_name, ".Classification.");
	char Order[256] = {0};
	char name[256] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSClassificationMap, Order, atoi(index));
		if(ret)
		{
			return (-1);
		}
		sprintf(name, "qos.cf%d.DestIPExclude", atoi(Order));		
		tr_log(LOG_DEBUG,"name[%s]", name);
		ret = do_uci_set(name, value);
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit(QOSNUMBERENTRIES);
			if(ret)
			{
				return (-1);
			}
			doQoSClassification();
		}
	}
	else
	{
		return -1;
	}	
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQCt_SourceIP(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DQCt_SourceIP, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Classification.");
	char Order[256] = {0};
	char name[256] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSClassificationMap, Order, atoi(index));
		if(ret)
		{
			return (-1);
		}

		int num = getQosClassificationEntry(Order);
		if(num >= 0)
		{
			sprintf(name, "qos.cf%d.SourceIP", num);
			tr_log(LOG_DEBUG,"name[%s]", name);
			ret = do_uci_get(name, value);
			if(ret)
			{
				strcpy(value, "");
				ret = 0;
			}
		}
		else
		{
			return -1;
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQCt_SourceIP(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DQCt_SourceIP, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char *index = parseTemplate(path_name, ".Classification.");
	char Order[256] = {0};
	char name[256] = {0};

	if(strlen(value) > 45)
	{
		return (-2);
	}

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSClassificationMap, Order, atoi(index));
		if(ret)
		{
			return (-1);
		}

		int num = getQosClassificationEntry(Order);
		if(num >= 0)
		{
			sprintf(name, "qos.cf%d.SourceIP", num);
			tr_log(LOG_DEBUG,"name[%s]", name);
			ret = do_uci_set(name, value);
			if(ret)
			{
				return (-1);
			}
			else
			{
				ret = do_uci_commit(QOSNUMBERENTRIES);
				if(ret)
				{
					return (-1);
				}
				doQoSClassification();
			}
		}
		else
		{
			return -1;
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQCt_SourceMask(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DQCt_SourceMask, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Classification.");
	char Order[256] = {0};
	char name[256] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSClassificationMap, Order, atoi(index));
		if(ret)
		{
			return (-1);
		}
		sprintf(name, "qos.cf%d.SourceMask", atoi(Order));		
		tr_log(LOG_DEBUG,"name[%s]", name);
		ret = do_uci_get(name, value);
		if(ret)
		{
			strcpy(value, "");
			ret = 0;
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQCt_SourceMask(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DQCt_SourceMask, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char *index = parseTemplate(path_name, ".Classification.");
	char Order[256] = {0};
	char name[256] = {0};

	if(strlen(value) > 49)
	{
		return (-2);
	}

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSClassificationMap, Order, atoi(index));
		if(ret)
		{
			return (-1);
		}
		sprintf(name, "qos.cf%d.SourceMask", atoi(Order));		
		tr_log(LOG_DEBUG,"name[%s]", name);
		ret = do_uci_set(name, value);
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit(QOSNUMBERENTRIES);
			if(ret)
			{
				return (-1);
			}
			doQoSClassification();
		}		
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQCt_SourceIPExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DQCt_SourceIPExclude, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Classification.");
	char Order[256] = {0};
	char name[256] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSClassificationMap, Order, atoi(index));
		if(ret)
		{
			return (-1);
		}
		sprintf(name, "qos.cf%d.SourceIPExclude", atoi(Order));		
		tr_log(LOG_DEBUG,"name[%s]", name);
		ret = do_uci_get(name, value);
		if(ret)
		{
			strcpy(value, "0");
			ret = 0;
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQCt_SourceIPExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DQCt_SourceIPExclude, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char *index = parseTemplate(path_name, ".Classification.");
	char Order[256] = {0};
	char name[256] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSClassificationMap, Order, atoi(index));
		if(ret)
		{
			return (-1);
		}
		sprintf(name, "qos.cf%d.SourceIPExclude", atoi(Order));		
		tr_log(LOG_DEBUG,"name[%s]", name);
		ret = do_uci_set(name, value);
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit(QOSNUMBERENTRIES);
			if(ret)
			{
				return (-1);
			}
			doQoSClassification();
		}
	}
	else
	{
		return -1;
	}	
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQCt_Protocol(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DQCt_Protocol, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Classification.");
	char Order[256] = {0};
	char name[256] = {0};
	char tmp[256] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSClassificationMap, Order, atoi(index));
		if(ret)
		{
			return (-1);
		}

		int num = getQosClassificationEntry(Order);
		if(num >= 0)
		{
			sprintf(name, "qos.cf%d.Protocol", num);
			tr_log(LOG_DEBUG,"name[%s]", name);
			ret = do_uci_get(name, tmp);
			if(ret)
			{
				strcpy(tmp, "-1");
				ret = 0;
			}
			if(strcasecmp(tmp, "tcp") == 0)
			{
				strcpy(value, "6");
			}
			else if(strcasecmp(tmp, "udp") == 0)
			{
				strcpy(value, "17");
			}
			else if(strcasecmp(tmp, "icmp") == 0)
			{
				strcpy(value, "1");
			}
		}
		else
		{
			return -1;
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQCt_Protocol(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DQCt_Protocol, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char *index = parseTemplate(path_name, ".Classification.");
	char Order[256] = {0};
	char name[256] = {0};

	if((atoi(value) < -1) || (atoi(value) > 255))
	{
		return (-2);
	}

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSClassificationMap, Order, atoi(index));
		if(ret)
		{
			return (-1);
		}

		int num = getQosClassificationEntry(Order);
		if(num >= 0)
		{
			sprintf(name, "qos.cf%d.Protocol", num);
			tr_log(LOG_DEBUG,"name[%s]", name);
			if(strcasecmp(value, "6") == 0)
			{
				ret = do_uci_set(name, "tcp");
			}
			else if(strcasecmp(value, "17") == 0)
			{
				ret = do_uci_set(name, "udp");
			}
			else if(strcasecmp(value, "1") == 0)
			{
				ret = do_uci_set(name, "icmp");
			}

			if(ret)
			{
				return (-1);
			}
			else
			{
				ret = do_uci_commit(QOSNUMBERENTRIES);
				if(ret)
				{
					return (-1);
				}
				doQoSClassification();
			}
		}
		else
		{
			return -1;
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQCt_ProtocolExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DQCt_ProtocolExclude, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Classification.");
	char Order[256] = {0};
	char name[256] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSClassificationMap, Order, atoi(index));
		if(ret)
		{
			return (-1);
		}
		sprintf(name, "qos.cf%d.ProtocolExclude", atoi(Order));		
		tr_log(LOG_DEBUG,"name[%s]", name);
		ret = do_uci_get(name, value);
		if(ret)
		{
			strcpy(value, "0");
			ret = 0;
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQCt_ProtocolExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DQCt_ProtocolExclude, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char *index = parseTemplate(path_name, ".Classification.");
	char Order[256] = {0};
	char name[256] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSClassificationMap, Order, atoi(index));
		if(ret)
		{
			return (-1);
		}
		sprintf(name, "qos.cf%d.ProtocolExclude", atoi(Order));		
		tr_log(LOG_DEBUG,"name[%s]", name);
		ret = do_uci_set(name, value);
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit(QOSNUMBERENTRIES);
			if(ret)
			{
				return (-1);
			}
			doQoSClassification();
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQCt_DestPort(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DQCt_DestPort, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Classification.");
	char Order[256] = {0};
	char name[256] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSClassificationMap, Order, atoi(index));
		if(ret)
		{
			return (-1);
		}

		int num = getQosClassificationEntry(Order);
		if(num >= 0)
		{
			sprintf(name, "qos.cf%d.DestPort", num);
			tr_log(LOG_DEBUG,"name[%s]", name);
			ret = do_uci_get(name, value);
			if(ret)
			{
				strcpy(value, "-1");
				ret = 0;
			}
		}
		else
		{
			return -1;
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQCt_DestPort(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DQCt_DestPort, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char *index = parseTemplate(path_name, ".Classification.");
	char Order[256] = {0};
	char name[256] = {0};

	if(atoi(value) < -1 || atoi(value) > 65535)
	{
		return (-2);
	}

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSClassificationMap, Order, atoi(index));
		if(ret)
		{
			return (-1);
		}

		int num = getQosClassificationEntry(Order);
		if(num >= 0)
		{
			sprintf(name, "qos.cf%d.DestPort", num);
			tr_log(LOG_DEBUG,"name[%s]", name);
			ret = do_uci_set(name, value);
			if(ret)
			{
				return (-1);
			}
			else
			{
					ret = do_uci_commit(QOSNUMBERENTRIES);
				if(ret)
				{
					return (-1);
				}
				doQoSClassification();
			}
		}
		else
		{
			return -1;
		}		
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQCt_DestPortRangeMax(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DQCt_DestPortRangeMax, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Classification.");
	char Order[256] = {0};
	char name[256] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSClassificationMap, Order, atoi(index));
		if(ret)
		{
			return (-1);
		}
		sprintf(name, "qos.cf%d.DestPortRangeMax", atoi(Order));		
		tr_log(LOG_DEBUG,"name[%s]", name);
		ret = do_uci_get(name, value);
		if(ret)
		{
			strcpy(value, "-1");
			ret = 0;
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQCt_DestPortRangeMax(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DQCt_DestPortRangeMax, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char *index = parseTemplate(path_name, ".Classification.");
	char Order[256] = {0};
	char name[256] = {0};

	if(atoi(value) < -1 || atoi(value) > 65535)
	{
		return (-2);
	}

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSClassificationMap, Order, atoi(index));
		if(ret)
		{
			return (-1);
		}
		sprintf(name, "qos.cf%d.DestPortRangeMax", atoi(Order));		
		tr_log(LOG_DEBUG,"name[%s]", name);
		ret = do_uci_set(name, value);
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit(QOSNUMBERENTRIES);
			if(ret)
			{
				return (-1);
			}
			doQoSClassification();
		}		
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQCt_DestPortExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DQCt_DestPortExclude, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Classification.");
	char Order[256] = {0};
	char name[256] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSClassificationMap, Order, atoi(index));
		if(ret)
		{
			return (-1);
		}
		sprintf(name, "qos.cf%d.DestPortExclude", atoi(Order));		
		tr_log(LOG_DEBUG,"name[%s]", name);
		ret = do_uci_get(name, value);
		if(ret)
		{
			strcpy(value, "0");
			ret = 0;
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQCt_DestPortExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DQCt_DestPortExclude, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char *index = parseTemplate(path_name, ".Classification.");
	char Order[256] = {0};
	char name[256] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSClassificationMap, Order, atoi(index));
		if(ret)
		{
			return (-1);
		}
		sprintf(name, "qos.cf%d.DestPortExclude", atoi(Order));		
		tr_log(LOG_DEBUG,"name[%s]", name);
		ret = do_uci_set(name, value);
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit(QOSNUMBERENTRIES);
			if(ret)
			{
				return (-1);
			}
			doQoSClassification();
		}		
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQCt_SourcePort(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DQCt_SourcePort, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Classification.");
	char Order[256] = {0};
	char name[256] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSClassificationMap, Order, atoi(index));
		if(ret)
		{
			return (-1);
		}

		int num = getQosClassificationEntry(Order);
		if(num >= 0)
		{
			sprintf(name, "qos.cf%d.SourePort", num);
			tr_log(LOG_DEBUG,"name[%s]", name);
			ret = do_uci_get(name, value);
			if(ret)
			{
				strcpy(value, "-1");
				ret = 0;
			}
		}
		else
		{
			return -1;
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQCt_SourcePort(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DQCt_SourcePort, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char *index = parseTemplate(path_name, ".Classification.");
	char Order[256] = {0};
	char name[256] = {0};

	if(atoi(value) < -1 || atoi(value) > 65535)
	{
		return (-2);
	}

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSClassificationMap, Order, atoi(index));
		if(ret)
		{
			return (-1);
		}

		int num = getQosClassificationEntry(Order);
		if(num >= 0)
		{
			sprintf(name, "qos.cf%d.SourePort", num);
			tr_log(LOG_DEBUG,"name[%s]", name);
			ret = do_uci_set(name, value);
			if(ret)
			{
				return (-1);
			}
			else
			{
				ret = do_uci_commit(QOSNUMBERENTRIES);
				if(ret)
				{
					return (-1);
				}
				doQoSClassification();
			}
		}
		else
		{
			return -1;
		}		
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQCt_SourcePortRangeMax(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DQCt_SourcePortRangeMax, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Classification.");
	char Order[256] = {0};
	char name[256] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSClassificationMap, Order, atoi(index));
		if(ret)
		{
			return (-1);
		}
		sprintf(name, "qos.cf%d.SourcePortRangeMax", atoi(Order));		
		tr_log(LOG_DEBUG,"name[%s]", name);
		ret = do_uci_get(name, value);
		if(ret)
		{
			strcpy(value, "-1");
			ret = 0;
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQCt_SourcePortRangeMax(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DQCt_SourcePortRangeMax, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char *index = parseTemplate(path_name, ".Classification.");
	char Order[256] = {0};
	char name[256] = {0};

	if(atoi(value) < -1 || atoi(value) > 65535)
	{
		return (-2);
	}

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSClassificationMap, Order, atoi(index));
		if(ret)
		{
			return (-1);
		}
		sprintf(name, "qos.cf%d.SourcePortRangeMax", atoi(Order));		
		tr_log(LOG_DEBUG,"name[%s]", name);
		ret = do_uci_set(name, value);
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit(QOSNUMBERENTRIES);
			if(ret)
			{
				return (-1);
			}
			doQoSClassification();
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQCt_SourcePortExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DQCt_SourcePortExclude, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Classification.");
	char Order[256] = {0};
	char name[256] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSClassificationMap, Order, atoi(index));
		if(ret)
		{
			return (-1);
		}
		sprintf(name, "qos.cf%d.SourcePortExclude", atoi(Order));		
		tr_log(LOG_DEBUG,"name[%s]", name);
		ret = do_uci_get(name, value);
		if(ret)
		{
			strcpy(value, "0");
			ret = 0;
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQCt_SourcePortExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DQCt_SourcePortExclude, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char *index = parseTemplate(path_name, ".Classification.");
	char Order[256] = {0};
	char name[256] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSClassificationMap, Order, atoi(index));
		if(ret)
		{
			return (-1);
		}
		sprintf(name, "qos.cf%d.SourcePortExclude", atoi(Order));		
		tr_log(LOG_DEBUG,"name[%s]", name);
		ret = do_uci_set(name, value);
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit(QOSNUMBERENTRIES);
			if(ret)
			{
				return (-1);
			}
			doQoSClassification();
		}		
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQCt_SourceMACAddress(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DQCt_SourceMACAddress, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Classification.");
	char Order[256] = {0};
	char name[256] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSClassificationMap, Order, atoi(index));
		if(ret)
		{
			return (-1);
		}

		int num = getQosClassificationEntry(Order);
		if(num >= 0)
		{
			sprintf(name, "qos.cf%d.SourceMacAddress", num);		
			tr_log(LOG_DEBUG,"name[%s]", name);
			ret = do_uci_get(name, value);
			if(ret)
			{
				strcpy(value, "");
				ret = 0;
			}
		}
		else
		{
			return -1;
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQCt_SourceMACAddress(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DQCt_SourceMACAddress, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char *index = parseTemplate(path_name, ".Classification.");
	char Order[256] = {0};
	char name[256] = {0};

	if(strlen(value) > 17)
	{
		return (-2);
	}

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSClassificationMap, Order, atoi(index));
		if(ret)
		{
			return (-1);
		}

		int num = getQosClassificationEntry(Order);
		if(num >= 0)
		{
			sprintf(name, "qos.cf%d.SourceMacAddress", num);
			tr_log(LOG_DEBUG,"name[%s]", name);
			ret = do_uci_set(name, value);
			if(ret)
			{
				return (-1);
			}
			else
			{
				ret = do_uci_commit(QOSNUMBERENTRIES);
				if(ret)
				{
					return (-1);
				}
				doQoSClassification();
			}
		}
		else
		{
			return -1;
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQCt_SourceMACMask(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DQCt_SourceMACMask, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Classification.");
	char Order[256] = {0};
	char name[256] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSClassificationMap, Order, atoi(index));
		if(ret)
		{
			return (-1);
		}
		sprintf(name, "qos.cf%d.SourceMACMask", atoi(Order));		
		tr_log(LOG_DEBUG,"name[%s]", name);
		ret = do_uci_get(name, value);
		if(ret)
		{
			strcpy(value, "");
			ret = 0;
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQCt_SourceMACMask(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DQCt_SourceMACMask, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char *index = parseTemplate(path_name, ".Classification.");
	char Order[256] = {0};
	char name[256] = {0};

	if(strlen(value) > 17)
	{
		return (-2);
	}

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSClassificationMap, Order, atoi(index));
		if(ret)
		{
			return (-1);
		}
		sprintf(name, "qos.cf%d.SourceMACMask", atoi(Order));		
		tr_log(LOG_DEBUG,"name[%s]", name);
		ret = do_uci_set(name, value);
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit(QOSNUMBERENTRIES);
			if(ret)
			{
				return (-1);
			}
			doQoSClassification();
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQCt_SourceMACExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DQCt_SourceMACExclude, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Classification.");
	char Order[256] = {0};
	char name[256] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSClassificationMap, Order, atoi(index));
		if(ret)
		{
			return (-1);
		}
		sprintf(name, "qos.cf%d.SourceMACExclude", atoi(Order));		
		tr_log(LOG_DEBUG,"name[%s]", name);
		ret = do_uci_get(name, value);
		if(ret)
		{
			strcpy(value, "0");
			ret = 0;
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQCt_SourceMACExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DQCt_SourceMACExclude, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char *index = parseTemplate(path_name, ".Classification.");
	char Order[256] = {0};
	char name[256] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSClassificationMap, Order, atoi(index));
		if(ret)
		{
			return (-1);
		}
		sprintf(name, "qos.cf%d.SourceMACExclude", atoi(Order));		
		tr_log(LOG_DEBUG,"name[%s]", name);
		ret = do_uci_set(name, value);
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit(QOSNUMBERENTRIES);
			if(ret)
			{
				return (-1);
			}
			doQoSClassification();
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQCt_DestMACAddress(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DQCt_DestMACAddress, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Classification.");
	char Order[256] = {0};
	char name[256] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSClassificationMap, Order, atoi(index));
		if(ret)
		{
			return (-1);
		}

		int num = getQosClassificationEntry(Order);
		if(num >= 0)
		{
			sprintf(name, "qos.cf%d.DestMacAddress", num);
			tr_log(LOG_DEBUG,"name[%s]", name);
			ret = do_uci_get(name, value);
			if(ret)
			{
				strcpy(value, "");
				ret = 0;
			}
		}
		else
		{
			return -1;
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQCt_DestMACAddress(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DQCt_DestMACAddress, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char *index = parseTemplate(path_name, ".Classification.");
	char Order[256] = {0};
	char name[256] = {0};

	if(strlen(value) > 17)
	{
		return (-2);
	}

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSClassificationMap, Order, atoi(index));
		if(ret)
		{
			return (-1);
		}

		int num = getQosClassificationEntry(Order);
		if(num >= 0)
		{
			sprintf(name, "qos.cf%d.DestMacAddress", num);
			tr_log(LOG_DEBUG,"name[%s]", name);
			ret = do_uci_set(name, value);
			if(ret)
			{
				return (-1);
			}
			else
			{
				ret = do_uci_commit(QOSNUMBERENTRIES);
				if(ret)
				{
					return (-1);
				}
				doQoSClassification();
			}
		}
		else
		{
			return -1;
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQCt_DestMACMask(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DQCt_DestMACMask, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Classification.");
	char Order[256] = {0};
	char name[256] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSClassificationMap, Order, atoi(index));
		if(ret)
		{
			return (-1);
		}
		sprintf(name, "qos.cf%d.DestMACMask", atoi(Order));		
		tr_log(LOG_DEBUG,"name[%s]", name);
		ret = do_uci_get(name, value);
		if(ret)
		{
			strcpy(value, "");
			ret = 0;
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQCt_DestMACMask(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DQCt_DestMACMask, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char *index = parseTemplate(path_name, ".Classification.");
	char Order[256] = {0};
	char name[256] = {0};

	if(strlen(value) > 17)
	{
		return (-2);
	}

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSClassificationMap, Order, atoi(index));
		if(ret)
		{
			return (-1);
		}
		sprintf(name, "qos.cf%d.DestMACMask", atoi(Order));		
		tr_log(LOG_DEBUG,"name[%s]", name);
		ret = do_uci_set(name, value);
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit(QOSNUMBERENTRIES);
			if(ret)
			{
				return (-1);
			}
			doQoSClassification();
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQCt_DestMACExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DQCt_DestMACExclude, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Classification.");
	char Order[256] = {0};
	char name[256] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSClassificationMap, Order, atoi(index));
		if(ret)
		{
			return (-1);
		}
		sprintf(name, "qos.cf%d.DestMACExclude", atoi(Order));		
		tr_log(LOG_DEBUG,"name[%s]", name);
		ret = do_uci_get(name, value);
		if(ret)
		{
			strcpy(value, "0");
			ret = 0;
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQCt_DestMACExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DQCt_DestMACExclude, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char *index = parseTemplate(path_name, ".Classification.");
	char Order[256] = {0};
	char name[256] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSClassificationMap, Order, atoi(index));
		if(ret)
		{
			return (-1);
		}
		sprintf(name, "qos.cf%d.DestMACExclude", atoi(Order));		
		tr_log(LOG_DEBUG,"name[%s]", name);
		ret = do_uci_set(name, value);
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit(QOSNUMBERENTRIES);
			if(ret)
			{
				return (-1);
			}
			doQoSClassification();
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQCt_Ethertype(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DQCt_Ethertype, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Classification.");
	char Order[256] = {0};
	char name[256] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSClassificationMap, Order, atoi(index));
		if(ret)
		{
			return (-1);
		}
		sprintf(name, "qos.cf%d.Ethertype", atoi(Order));		
		tr_log(LOG_DEBUG,"name[%s]", name);
		ret = do_uci_get(name, value);
		if(ret)
		{
			strcpy(value, "-1");
			ret = 0;
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQCt_Ethertype(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DQCt_Ethertype, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char *index = parseTemplate(path_name, ".Classification.");
	char Order[256] = {0};
	char name[256] = {0};

	if(atoi(value) < -1)
	{
		return (-2);
	}
	
	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSClassificationMap, Order, atoi(index));
		if(ret)
		{
			return (-1);
		}
		sprintf(name, "qos.cf%d.Ethertype", atoi(Order));		
		tr_log(LOG_DEBUG,"name[%s]", name);
		ret = do_uci_set(name, value);
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit(QOSNUMBERENTRIES);
			if(ret)
			{
				return (-1);
			}
			doQoSClassification();
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQCt_EthertypeExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DQCt_EthertypeExclude, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Classification.");
	char Order[256] = {0};
	char name[256] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSClassificationMap, Order, atoi(index));
		if(ret)
		{
			return (-1);
		}
		sprintf(name, "qos.cf%d.EthertypeExclude", atoi(Order));		
		tr_log(LOG_DEBUG,"name[%s]", name);
		ret = do_uci_get(name, value);
		if(ret)
		{
			strcpy(value, "0");
			ret = 0;
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQCt_EthertypeExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DQCt_EthertypeExclude, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char *index = parseTemplate(path_name, ".Classification.");
	char Order[256] = {0};
	char name[256] = {0};
	
	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSClassificationMap, Order, atoi(index));
		if(ret)
		{
			return (-1);
		}
		sprintf(name, "qos.cf%d.EthertypeExclude", atoi(Order));		
		tr_log(LOG_DEBUG,"name[%s]", name);
		ret = do_uci_set(name, value);
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit(QOSNUMBERENTRIES);
			if(ret)
			{
				return (-1);
			}
			doQoSClassification();
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQCt_SSAP(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DQCt_SSAP, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Classification.");
	char Order[256] = {0};
	char name[256] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSClassificationMap, Order, atoi(index));
		if(ret)
		{
			return (-1);
		}
		sprintf(name, "qos.cf%d.SSAP", atoi(Order));		
		tr_log(LOG_DEBUG,"name[%s]", name);
		ret = do_uci_get(name, value);
		if(ret)
		{
			strcpy(value, "-1");
			ret = 0;
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQCt_SSAP(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DQCt_SSAP, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char *index = parseTemplate(path_name, ".Classification.");
	char Order[256] = {0};
	char name[256] = {0};

	if(atoi(value) < -1)
	{
		return (-2);
	}
	
	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSClassificationMap, Order, atoi(index));
		if(ret)
		{
			return (-1);
		}
		sprintf(name, "qos.cf%d.SSAP", atoi(Order));		
		tr_log(LOG_DEBUG,"name[%s]", name);
		ret = do_uci_set(name, value);
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit(QOSNUMBERENTRIES);
			if(ret)
			{
				return (-1);
			}
			doQoSClassification();
		}
		sprintf(name, "qos.cf%d.DSAP", atoi(Order));		
		tr_log(LOG_DEBUG,"name[%s]", name);
		ret = do_uci_set(name, value);
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit(QOSNUMBERENTRIES);
			if(ret)
			{
				return (-1);
			}
			doQoSClassification();
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQCt_SSAPExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DQCt_SSAPExclude, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Classification.");
	char Order[256] = {0};
	char name[256] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSClassificationMap, Order, atoi(index));
		if(ret)
		{
			return (-1);
		}
		sprintf(name, "qos.cf%d.SSAPExclude", atoi(Order));		
		tr_log(LOG_DEBUG,"name[%s]", name);
		ret = do_uci_get(name, value);
		if(ret)
		{
			strcpy(value, "0");
			ret = 0;
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQCt_SSAPExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DQCt_SSAPExclude, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char *index = parseTemplate(path_name, ".Classification.");
	char Order[256] = {0};
	char name[256] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSClassificationMap, Order, atoi(index));
		if(ret)
		{
			return (-1);
		}
		sprintf(name, "qos.cf%d.SSAPExclude", atoi(Order));		
		tr_log(LOG_DEBUG,"name[%s]", name);
		ret = do_uci_set(name, value);
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit(QOSNUMBERENTRIES);
			if(ret)
			{
				return (-1);
			}
			doQoSClassification();
		}
		sprintf(name, "qos.cf%d.DSAPExclude", atoi(Order));		
		tr_log(LOG_DEBUG,"name[%s]", name);
		ret = do_uci_set(name, value);
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit(QOSNUMBERENTRIES);
			if(ret)
			{
				return (-1);
			}
			doQoSClassification();
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQCt_DSAP(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DQCt_DSAP, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Classification.");
	char Order[256] = {0};
	char name[256] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSClassificationMap, Order, atoi(index));
		if(ret)
		{
			return (-1);
		}
		sprintf(name, "qos.cf%d.DSAP", atoi(Order));		
		tr_log(LOG_DEBUG,"name[%s]", name);
		ret = do_uci_get(name, value);
		if(ret)
		{
			strcpy(value, "-1");
			ret = 0;
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQCt_DSAP(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DQCt_DSAP, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char *index = parseTemplate(path_name, ".Classification.");
	char Order[256] = {0};
	char name[256] = {0};

	if(atoi(value) < -1)
	{
		return (-2);
	}
	
	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSClassificationMap, Order, atoi(index));
		if(ret)
		{
			return (-1);
		}
		sprintf(name, "qos.cf%d.DSAP", atoi(Order));		
		tr_log(LOG_DEBUG,"name[%s]", name);
		ret = do_uci_set(name, value);
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit(QOSNUMBERENTRIES);
			if(ret)
			{
				return (-1);
			}
			doQoSClassification();
		}
		sprintf(name, "qos.cf%d.SSAP", atoi(Order));		
		tr_log(LOG_DEBUG,"name[%s]", name);
		ret = do_uci_set(name, value);
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit(QOSNUMBERENTRIES);
			if(ret)
			{
				return (-1);
			}
			doQoSClassification();
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQCt_DSAPExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DQCt_DSAPExclude, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Classification.");
	char Order[256] = {0};
	char name[256] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSClassificationMap, Order, atoi(index));
		if(ret)
		{
			return (-1);
		}
		sprintf(name, "qos.cf%d.DSAPExclude", atoi(Order));		
		tr_log(LOG_DEBUG,"name[%s]", name);
		ret = do_uci_get(name, value);
		if(ret)
		{
			strcpy(value, "0");
			ret = 0;
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQCt_DSAPExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DQCt_DSAPExclude, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char *index = parseTemplate(path_name, ".Classification.");
	char Order[256] = {0};
	char name[256] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSClassificationMap, Order, atoi(index));
		if(ret)
		{
			return (-1);
		}
		sprintf(name, "qos.cf%d.DSAPExclude", atoi(Order));		
		tr_log(LOG_DEBUG,"name[%s]", name);
		ret = do_uci_set(name, value);
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit(QOSNUMBERENTRIES);
			if(ret)
			{
				return (-1);
			}
			doQoSClassification();
		}
		sprintf(name, "qos.cf%d.SSAPExclude", atoi(Order));		
		tr_log(LOG_DEBUG,"name[%s]", name);
		ret = do_uci_set(name, value);
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit(QOSNUMBERENTRIES);
			if(ret)
			{
				return (-1);
			}
			doQoSClassification();
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQCt_LLCControl(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("classification_template.template.LLCControl", value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQCt_LLCControl(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set("classification_template.template.LLCControl", value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("classification_template");
		if(ret)
		{
			return (-1);
		}
		doQoSClassification();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQCt_LLCControlExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("classification_template.template.LLCControlExclude", value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQCt_LLCControlExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set("classification_template.template.LLCControlExclude", value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("classification_template");
		if(ret)
		{
			return (-1);
		}
		doQoSClassification();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQCt_SNAPOUI(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("classification_template.template.SNAPOUI", value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQCt_SNAPOUI(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set("classification_template.template.SNAPOUI", value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("classification_template");
		if(ret)
		{
			return (-1);
		}
		doQoSClassification();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQCt_SNAPOUIExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("classification_template.template.SNAPOUIExclude", value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQCt_SNAPOUIExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set("classification_template.template.SNAPOUIExclude", value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("classification_template");
		if(ret)
		{
			return (-1);
		}
		doQoSClassification();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQCt_SourceVendorClassID(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("classification_template.template.SourceVendorClassID", value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQCt_SourceVendorClassID(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set("classification_template.template.SourceVendorClassID", value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(CLASSIFICATION_TMP);
		if(ret)
		{
			return (-1);
		}
		doQoSClassification();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQCt_SourceVendorClassIDv6(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("classification_template.template.SourceVendorClassIDv6", value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQCt_SourceVendorClassIDv6(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set("classification_template.template.SourceVendorClassIDv6", value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("classification_template");
		if(ret)
		{
			return (-1);
		}
		doQoSClassification();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQCt_SourceVendorClassIDExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("classification_template.template.SourceVendorClassIDExclude", value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQCt_SourceVendorClassIDExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set("classification_template.template.SourceVendorClassIDExclude", value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("classification_template");
		if(ret)
		{
			return (-1);
		}
		doQoSClassification();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQCt_SourceVendorClassIDMode(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("classification_template.template.SourceVendorClassIDMode", value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQCt_SourceVendorClassIDMode(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set("classification_template.template.SourceVendorClassIDMode", value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("classification_template");
		if(ret)
		{
			return (-1);
		}
		doQoSClassification();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQCt_DestVendorClassID(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("classification_template.template.DestVendorClassID", value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQCt_DestVendorClassID(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set("classification_template.template.DestVendorClassID", value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("classification_template");
		if(ret)
		{
			return (-1);
		}
		doQoSClassification();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQCt_DestVendorClassIDv6(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("classification_template.template.DestVendorClassIDv6", value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQCt_DestVendorClassIDv6(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set("classification_template.template.DestVendorClassIDv6", value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("classification_template");
		if(ret)
		{
			return (-1);
		}
		doQoSClassification();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQCt_DestVendorClassIDExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("classification_template.template.DestVendorClassIDExclude", value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQCt_DestVendorClassIDExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set("classification_template.template.DestVendorClassIDExclude", value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("classification_template");
		if(ret)
		{
			return (-1);
		}
		doQoSClassification();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQCt_DestVendorClassIDMode(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("classification_template.template.DestVendorClassIDMode", value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQCt_DestVendorClassIDMode(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set("classification_template.template.DestVendorClassIDMode", value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("classification_template");
		if(ret)
		{
			return (-1);
		}
		doQoSClassification();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQCt_SourceClientID(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("classification_template.template.SourceClientID", value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQCt_SourceClientID(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set("classification_template.template.SourceClientID", value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("classification_template");
		if(ret)
		{
			return (-1);
		}
		doQoSClassification();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQCt_SourceClientIDExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("classification_template.template.SourceClientIDExclude", value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQCt_SourceClientIDExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set("classification_template.template.SourceClientIDExclude", value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("classification_template");
		if(ret)
		{
			return (-1);
		}
		doQoSClassification();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQCt_DestClientID(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("classification_template.template.DestClientID", value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQCt_DestClientID(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set("classification_template.template.DestClientID", value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("classification_template");
		if(ret)
		{
			return (-1);
		}
		doQoSClassification();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQCt_DestClientIDExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("classification_template.template.DestClientIDExclude", value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQCt_DestClientIDExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set("classification_template.template.DestClientIDExclude", value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("classification_template");
		if(ret)
		{
			return (-1);
		}
		doQoSClassification();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQCt_SourceUserClassID(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("classification_template.template.SourceUserClassID", value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQCt_SourceUserClassID(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set("classification_template.template.SourceUserClassID", value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("classification_template");
		if(ret)
		{
			return (-1);
		}
		doQoSClassification();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQCt_SourceUserClassIDExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("classification_template.template.SourceUserClassIDExclude", value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQCt_SourceUserClassIDExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set("classification_template.template.SourceUserClassIDExclude", value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("classification_template");
		if(ret)
		{
			return (-1);
		}
		doQoSClassification();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQCt_DestUserClassID(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("classification_template.template.DestUserClassID", value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQCt_DestUserClassID(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set("classification_template.template.DestUserClassID", value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("classification_template");
		if(ret)
		{
			return (-1);
		}
		doQoSClassification();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQCt_DestUserClassIDExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("classification_template.template.DestUserClassIDExclude", value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQCt_DestUserClassIDExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set("classification_template.template.DestUserClassIDExclude", value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("classification_template");
		if(ret)
		{
			return (-1);
		}
		doQoSClassification();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQCt_SourceVendorSpecificInfo(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("classification_template.template.SourceVendorSpecificInfo", value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQCt_SourceVendorSpecificInfo(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set("classification_template.template.SourceVendorSpecificInfo", value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("classification_template");
		if(ret)
		{
			return (-1);
		}
		doQoSClassification();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQCt_SourceVendorSpecificInfoExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("classification_template.template.SourceVendorSpecificInfoExclude", value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQCt_SourceVendorSpecificInfoExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set("classification_template.template.SourceVendorSpecificInfoExclude", value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("classification_template");
		if(ret)
		{
			return (-1);
		}
		doQoSClassification();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQCt_SourceVendorSpecificInfoEnterprise(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("classification_template.template.SourceVendorSpecificInfoEnterprise", value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQCt_SourceVendorSpecificInfoEnterprise(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set("classification_template.template.SourceVendorSpecificInfoEnterprise", value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("classification_template");
		if(ret)
		{
			return (-1);
		}
		doQoSClassification();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQCt_SourceVendorSpecificInfoSubOption(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("classification_template.template.SourceVendorSpecificInfoSubOption", value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQCt_SourceVendorSpecificInfoSubOption(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set("classification_template.template.SourceVendorSpecificInfoSubOption", value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("classification_template.template.SourceVendorSpecificInfoSubOption");
		if(ret)
		{
			return (-1);
		}
		doQoSClassification();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQCt_DestVendorSpecificInfo(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("classification_template.template.DestVendorSpecificInfo", value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQCt_DestVendorSpecificInfo(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set("classification_template.template.DestVendorSpecificInfo", value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("classification_template");
		if(ret)
		{
			return (-1);
		}
		doQoSClassification();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQCt_DestVendorSpecificInfoExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("classification_template.template.DestVendorSpecificInfoExclude", value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQCt_DestVendorSpecificInfoExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set("classification_template.template.DestVendorSpecificInfoExclude", value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("classification_template");
		if(ret)
		{
			return (-1);
		}
		doQoSClassification();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQCt_DestVendorSpecificInfoEnterprise(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("classification_template.template.DestVendorSpecificInfoEnterprise", value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQCt_DestVendorSpecificInfoEnterprise(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set("classification_template.template.DestVendorSpecificInfoEnterprise", value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(CLASSIFICATION_TMP);
		if(ret)
		{
			return (-1);
		}
		doQoSClassification();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQCt_DestVendorSpecificInfoSubOption(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(QTMP_C_DestVendorSpecificInfoSubOption, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQCt_DestVendorSpecificInfoSubOption(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set("classification_template.template.DestVendorSpecificInfoSubOption", value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(CLASSIFICATION_TMP);
		if(ret)
		{
			return (-1);
		}
		doQoSClassification();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQCt_TCPACK(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DQCt_TCPACK, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Classification.");
	char Order[256] = {0};
	char name[256] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSClassificationMap, Order, atoi(index));
		if(ret)
		{
			return (-1);
		}
		sprintf(name, "qos.cf%d.TCPACK", atoi(Order));		
		tr_log(LOG_DEBUG,"name[%s]", name);
		ret = do_uci_get(name, value);
		if(ret)
		{
			strcpy(value, "0");
			ret = 0;
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQCt_TCPACK(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DQCt_TCPACK, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char *index = parseTemplate(path_name, ".Classification.");
	char Order[256] = {0};
	char name[256] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSClassificationMap, Order, atoi(index));
		if(ret)
		{
			return (-1);
		}
		sprintf(name, "qos.cf%d.TCPACK", atoi(Order));		
		tr_log(LOG_DEBUG,"name[%s]", name);
		ret = do_uci_set(name, value);
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit(QOSNUMBERENTRIES);
			if(ret)
			{
				return (-1);
			}
			doQoSClassification();
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQCt_TCPACKExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DQCt_TCPACKExclude, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Classification.");
	char Order[256] = {0};
	char name[256] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSClassificationMap, Order, atoi(index));
		if(ret)
		{
			return (-1);
		}
		sprintf(name, "qos.cf%d.TCPACKExclude", atoi(Order));		
		tr_log(LOG_DEBUG,"name[%s]", name);
		ret = do_uci_get(name, value);
		if(ret)
		{
			strcpy(value, "0");
			ret = 0;
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQCt_TCPACKExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DQCt_TCPACKExclude, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char *index = parseTemplate(path_name, ".Classification.");
	char Order[256] = {0};
	char name[256] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSClassificationMap, Order, atoi(index));
		if(ret)
		{
			return (-1);
		}
		sprintf(name, "qos.cf%d.TCPACKExclude", atoi(Order));		
		tr_log(LOG_DEBUG,"name[%s]", name);
		ret = do_uci_set(name, value);
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit(QOSNUMBERENTRIES);
			if(ret)
			{
				return (-1);
			}
			doQoSClassification();
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQCt_IPLengthMin(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DQCt_IPLengthMin, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Classification.");
	char Order[256] = {0};
	char name[256] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSClassificationMap, Order, atoi(index));
		if(ret)
		{
			return (-1);
		}
		sprintf(name, "qos.cf%d.IPLengthMin", atoi(Order));		
		tr_log(LOG_DEBUG,"name[%s]", name);
		ret = do_uci_get(name, value);
		if(ret)
		{
			strcpy(value, "0");
			ret = 0;
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQCt_IPLengthMin(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DQCt_IPLengthMin, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char *index = parseTemplate(path_name, ".Classification.");
	char Order[256] = {0};
	char name[256] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSClassificationMap, Order, atoi(index));
		if(ret)
		{
			return (-1);
		}
		sprintf(name, "qos.cf%d.IPLengthMin", atoi(Order));		
		tr_log(LOG_DEBUG,"name[%s]", name);
		ret = do_uci_set(name, value);
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit(QOSNUMBERENTRIES);
			if(ret)
			{
				return (-1);
			}
			doQoSClassification();
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQCt_IPLengthMax(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DQCt_IPLengthMax, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Classification.");
	char Order[256] = {0};
	char name[256] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSClassificationMap, Order, atoi(index));
		if(ret)
		{
			return (-1);
		}
		sprintf(name, "qos.cf%d.IPLengthMax", atoi(Order));		
		tr_log(LOG_DEBUG,"name[%s]", name);
		ret = do_uci_get(name, value);
		if(ret)
		{
			strcpy(value, "0");
			ret = 0;
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQCt_IPLengthMax(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DQCt_IPLengthMax, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char *index = parseTemplate(path_name, ".Classification.");
	char Order[256] = {0};
	char name[256] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSClassificationMap, Order, atoi(index));
		if(ret)
		{
			return (-1);
		}
		sprintf(name, "qos.cf%d.IPLengthMax", atoi(Order));		
		tr_log(LOG_DEBUG,"name[%s]", name);
		ret = do_uci_set(name, value);
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit(QOSNUMBERENTRIES);
			if(ret)
			{
				return (-1);
			}
			doQoSClassification();
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQCt_IPLengthExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DQCt_IPLengthExclude, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Classification.");
	char Order[256] = {0};
	char name[256] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSClassificationMap, Order, atoi(index));
		if(ret)
		{
			return (-1);
		}
		sprintf(name, "qos.cf%d.IPLengthExclude", atoi(Order));		
		tr_log(LOG_DEBUG,"name[%s]", name);
		ret = do_uci_get(name, value);
		if(ret)
		{
			strcpy(value, "0");
			ret = 0;
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQCt_IPLengthExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DQCt_IPLengthExclude, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char *index = parseTemplate(path_name, ".Classification.");
	char Order[256] = {0};
	char name[256] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSClassificationMap, Order, atoi(index));
		if(ret)
		{
			return (-1);
		}
		sprintf(name, "qos.cf%d.IPLengthExclude", atoi(Order));		
		tr_log(LOG_DEBUG,"name[%s]", name);
		ret = do_uci_set(name, value);
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit(QOSNUMBERENTRIES);
			if(ret)
			{
				return (-1);
			}
			doQoSClassification();
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQCt_DSCPCheck(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DQCt_DSCPCheck, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Classification.");
	char Order[256] = {0};
	char name[256] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSClassificationMap, Order, atoi(index));
		if(ret)
		{
			return (-1);
		}

		int num = getQosClassificationEntry(Order);
		if(num >= 0)
		{
			sprintf(name, "qos.cf%d.DSCPCheck", num);		
			tr_log(LOG_DEBUG,"name[%s]", name);
			ret = do_uci_get(name, value);
			if(ret)
			{
				strcpy(value, "-1");
				ret = 0;
			}
		}
		else
		{
			return -1;
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQCt_DSCPCheck(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DQCt_DSCPCheck, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char *index = parseTemplate(path_name, ".Classification.");
	char Order[256] = {0};
	char name[256] = {0};

	if((atoi(value) < -1) || (atoi(value) > 63))
	{
		return (-2);
	}
	
	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSClassificationMap, Order, atoi(index));
		if(ret)
		{
			return (-1);
		}

		int num = getQosClassificationEntry(Order);
		if(num >= 0)
		{
			sprintf(name, "qos.cf%d.DSCPCheck", num);
			tr_log(LOG_DEBUG,"name[%s]", name);
			ret = do_uci_set(name, value);
			if(ret)
			{
				return (-1);
			}
			else
			{
				ret = do_uci_commit(QOSNUMBERENTRIES);
				if(ret)
				{
					return (-1);
				}
				doQoSClassification();
			}
		}
		else
		{
			return -1;
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQCt_DSCPExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DQCt_DSCPExclude, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Classification.");
	char Order[256] = {0};
	char name[256] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSClassificationMap, Order, atoi(index));
		if(ret)
		{
			return (-1);
		}
		sprintf(name, "qos.cf%d.DSCPExclude", atoi(Order));		
		tr_log(LOG_DEBUG,"name[%s]", name);
		ret = do_uci_get(name, value);
		if(ret)
		{
			strcpy(value, "0");
			ret = 0;
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQCt_DSCPExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DQCt_DSCPExclude, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char *index = parseTemplate(path_name, ".Classification.");
	char Order[256] = {0};
	char name[256] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSClassificationMap, Order, atoi(index));
		if(ret)
		{
			return (-1);
		}
		sprintf(name, "qos.cf%d.DSCPExclude", atoi(Order));		
		tr_log(LOG_DEBUG,"name[%s]", name);
		ret = do_uci_set(name, value);
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit(QOSNUMBERENTRIES);
			if(ret)
			{
				return (-1);
			}
			doQoSClassification();
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQCt_DSCPMark(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DQCt_DSCPMark, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Classification.");
	char Order[256] = {0};
	char name[256] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSClassificationMap, Order, atoi(index));
		if(ret)
		{
			return (-1);
		}

		int num = getQosClassificationEntry(Order);
		if(num >= 0)
		{
			sprintf(name, "qos.cf%d.DSCPMark", num);
			tr_log(LOG_DEBUG,"name[%s]", name);
			ret = do_uci_get(name, value);
			if(ret)
			{
				strcpy(value, "-1");
				ret = 0;
			}		
		}
		else
		{
			return -1;
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQCt_DSCPMark(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DQCt_DSCPMark, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char *index = parseTemplate(path_name, ".Classification.");
	char Order[256] = {0};
	char name[256] = {0};

	if(atoi(value) < -2)
	{
		return -2;
	}

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSClassificationMap, Order, atoi(index));
		if(ret)
		{
			return (-1);
		}

		int num = getQosClassificationEntry(Order);
		if(num >= 0)
		{
			sprintf(name, "qos.cf%d.DSCPMark", num);
			tr_log(LOG_DEBUG,"name[%s]", name);
			ret = do_uci_set(name, value);
			if(ret)
			{
				return (-1);
			}
			else
			{
				ret = do_uci_commit(QOSNUMBERENTRIES);
				if(ret)
				{
					return (-1);
				}
				doQoSClassification();
			}
		}
		else
		{
			return -1;
		}		
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQCt_EthernetPriorityCheck(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DQCt_EthernetPriorityCheck, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Classification.");
	char Order[256] = {0};
	char name[256] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSClassificationMap, Order, atoi(index));
		if(ret)
		{
			return (-1);
		}
		sprintf(name, "qos.cf%d.EthernetPriorityCheck", atoi(Order));		
		tr_log(LOG_DEBUG,"name[%s]", name);
		ret = do_uci_get(name, value);
		if(ret)
		{
			strcpy(value, "-1");
			ret = 0;
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQCt_EthernetPriorityCheck(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DQCt_EthernetPriorityCheck, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char *index = parseTemplate(path_name, ".Classification.");
	char Order[256] = {0};
	char name[256] = {0};

	if(atoi(value) < -1)
	{
		return -2;
	}

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSClassificationMap, Order, atoi(index));
		if(ret)
		{
			return (-1);
		}
		sprintf(name, "qos.cf%d.EthernetPriorityCheck", atoi(Order));		
		tr_log(LOG_DEBUG,"name[%s]", name);
		ret = do_uci_set(name, value);
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit(QOSNUMBERENTRIES);
			if(ret)
			{
				return (-1);
			}
			doQoSClassification();
		}		
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQCt_EthernetPriorityExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DQCt_EthernetPriorityExclude, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Classification.");
	char Order[256] = {0};
	char name[256] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSClassificationMap, Order, atoi(index));
		if(ret)
		{
			return (-1);
		}
		sprintf(name, "qos.cf%d.EthernetPriorityExclude", atoi(Order));		
		tr_log(LOG_DEBUG,"name[%s]", name);
		ret = do_uci_get(name, value);
		if(ret)
		{
			strcpy(value, "0");
			ret = 0;
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQCt_EthernetPriorityExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DQCt_EthernetPriorityExclude, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char *index = parseTemplate(path_name, ".Classification.");
	char Order[256] = {0};
	char name[256] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSClassificationMap, Order, atoi(index));
		if(ret)
		{
			return (-1);
		}
		sprintf(name, "qos.cf%d.EthernetPriorityExclude", atoi(Order));		
		tr_log(LOG_DEBUG,"name[%s]", name);
		ret = do_uci_set(name, value);
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit(QOSNUMBERENTRIES);
			if(ret)
			{
				return (-1);
			}
			doQoSClassification();
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQCt_EthernetPriorityMark(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DQCt_EthernetPriorityMark, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQCt_EthernetPriorityMark(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(QTMP_C_EthernetPriorityMark, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(CLASSIFICATION_TMP);
		if(ret)
		{
			return (-1);
		}
		doQoSClassification();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQCt_InnerEthernetPriorityCheck(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(QTMP_C_InnerEthernetPriorityCheck, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQCt_InnerEthernetPriorityCheck(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(QTMP_C_InnerEthernetPriorityCheck, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(CLASSIFICATION_TMP);
		if(ret)
		{
			return (-1);
		}
		doQoSClassification();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQCt_InnerEthernetPriorityExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("classification_template.template.InnerEthernetPriorityExclude", value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQCt_InnerEthernetPriorityExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set("classification_template.template.InnerEthernetPriorityExclude", value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(CLASSIFICATION_TMP);
		if(ret)
		{
			return (-1);
		}
		doQoSClassification();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQCt_InnerEthernetPriorityMark(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("classification_template.template.InnerEthernetPriorityMark", value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQCt_InnerEthernetPriorityMark(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set("classification_template.template.InnerEthernetPriorityMark", value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(CLASSIFICATION_TMP);
		if(ret)
		{
			return (-1);
		}
		doQoSClassification();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQCt_EthernetDEICheck(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("classification_template.template.EthernetDEICheck", value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQCt_EthernetDEICheck(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set("classification_template.template.EthernetDEICheck", value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(CLASSIFICATION_TMP);
		if(ret)
		{
			return (-1);
		}
		doQoSClassification();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQCt_EthernetDEIExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("classification_template.template.EthernetDEIExclude", value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQCt_EthernetDEIExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set("classification_template.template.EthernetDEIExclude", value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(CLASSIFICATION_TMP);
		if(ret)
		{
			return (-1);
		}
		doQoSClassification();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQCt_VLANIDCheck(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DQCt_VLANIDCheck, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Classification.");
	char Order[256] = {0};
	char name[256] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSClassificationMap, Order, atoi(index));
		if(ret)
		{
			return (-1);
		}
		sprintf(name, "qos.cf%d.VLANIDCheck", atoi(Order));		
		tr_log(LOG_DEBUG,"name[%s]", name);
		ret = do_uci_get(name, value);
		if(ret)
		{
			strcpy(value, "-1");
			ret = 0;
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQCt_VLANIDCheck(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DQCt_VLANIDCheck, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char *index = parseTemplate(path_name, ".Classification.");
	char Order[256] = {0};
	char name[256] = {0};

	if(atoi(value) < -1)
	{
		return -2;
	}

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSClassificationMap, Order, atoi(index));
		if(ret)
		{
			return (-1);
		}
		sprintf(name, "qos.cf%d.VLANIDCheck", atoi(Order));		
		tr_log(LOG_DEBUG,"name[%s]", name);
		ret = do_uci_set(name, value);
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit(QOSNUMBERENTRIES);
			if(ret)
			{
				return (-1);
			}
			doQoSClassification();
		}		
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQCt_VLANIDExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DQCt_VLANIDExclude, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Classification.");
	char Order[256] = {0};
	char name[256] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSClassificationMap, Order, atoi(index));
		if(ret)
		{
			return (-1);
		}
		sprintf(name, "qos.cf%d.VLANIDExclude", atoi(Order));		
		tr_log(LOG_DEBUG,"name[%s]", name);
		ret = do_uci_get(name, value);
		if(ret)
		{
			strcpy(value, "0");
			ret = 0;
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQCt_VLANIDExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DQCt_VLANIDExclude, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char *index = parseTemplate(path_name, ".Classification.");
	char Order[256] = {0};
	char name[256] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSClassificationMap, Order, atoi(index));
		if(ret)
		{
			return (-1);
		}
		sprintf(name, "qos.cf%d.VLANIDExclude", atoi(Order));		
		tr_log(LOG_DEBUG,"name[%s]", name);
		ret = do_uci_set(name, value);
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit(QOSNUMBERENTRIES);
			if(ret)
			{
				return (-1);
			}
			doQoSClassification();
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQCt_OutOfBandInfo(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("classification_template.template.OutOfBandInfo", value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQCt_OutOfBandInfo(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set("classification_template.template.OutOfBandInfo", value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(CLASSIFICATION_TMP);
		if(ret)
		{
			return (-1);
		}
		doQoSClassification();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQCt_ForwardingPolicy(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("classification_template.template.ForwardingPolicy", value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQCt_ForwardingPolicy(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set("classification_template.template.ForwardingPolicy", value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(CLASSIFICATION_TMP);
		if(ret)
		{
			return (-1);
		}
		doQoSClassification();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQCt_TrafficClass(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DQCt_TrafficClass, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Classification.");
	char Order[256] = {0};
	char name[256] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSClassificationMap, Order, atoi(index));
		if(ret)
		{
			return (-1);
		}

		int num = getQosClassificationEntry(Order);
		if(num >= 0)
		{
			sprintf(name, "qos.cf%d.TrafficClass", num);		
			tr_log(LOG_DEBUG,"name[%s]", name);
			ret = do_uci_get(name, value);
			if(ret)
			{
				strcpy(value, "-1");
				ret = 0;
			}
		}
		else
		{
			return -1;
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQCt_TrafficClass(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DQCt_TrafficClass, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char *index = parseTemplate(path_name, ".Classification.");
	char Order[256] = {0};
	char name[256] = {0};

	if(atoi(value) < -1)
	{
		return (-2);
	}

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSClassificationMap, Order, atoi(index));
		if(ret)
		{
			return (-1);
		}

		int num = getQosClassificationEntry(Order);
		if(num >= 0)
		{
			sprintf(name, "qos.cf%d.TrafficClass", num);
			tr_log(LOG_DEBUG,"name[%s]", name);
			ret = do_uci_set(name, value);
			if(ret)
			{
				return (-1);
			}
			else
			{
				ret = do_uci_commit(QOSNUMBERENTRIES);
				if(ret)
				{
					return (-1);
				}
				doQoSClassification();
			}
		}
		else
		{
			return -1;
		}		
		/*sprintf(name, "trconf.Device_QoS_Classification_%d.App", atoi(Order));		
		tr_log(LOG_DEBUG,"name[%s]", name);
		ret = do_uci_set(name, "");
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit(QOSNUMBERENTRIES);
			if(ret)
			{
				return (-1);
			}
			doQoSClassification();
		}*/
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQCt_Policer(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("classification_template.template.Policer", value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQCt_Policer(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set("classification_template.template.Policer", value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(CLASSIFICATION_TMP);
		if(ret)
		{
			return (-1);
		}
		doQoSClassification();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQCt_App(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DQCt_App, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Classification.");
	char Order[256] = {0};
	char name[256] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSClassificationMap, Order, atoi(index));
		if(ret)
		{
			return (-1);
		}
		sprintf(name, "qos.cf%d.App", atoi(Order));		
		tr_log(LOG_DEBUG,"name[%s]", name);
		ret = do_uci_get(name, value);
		if(ret)
		{
			strcpy(value, "");
			ret = 0;
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQCt_App(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DQCt_App, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char *index = parseTemplate(path_name, ".Classification.");
	char Order[256] = {0};
	char name[256] = {0};

	if(strlen(value) > 256)
	{
		return -2;
	}

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSClassificationMap, Order, atoi(index));
		if(ret)
		{
			return (-1);
		}
		sprintf(name, "qos.cf%d.App", atoi(Order));		
		tr_log(LOG_DEBUG,"name[%s]", name);
		ret = do_uci_set(name, value);
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit(QOSNUMBERENTRIES);
			if(ret)
			{
				return (-1);
			}
		}		
		sprintf(name, "qos.cf%d.TrafficClass", atoi(Order));		
		tr_log(LOG_DEBUG,"name[%s]", name);
		ret = do_uci_set(name, "-1");
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit(QOSNUMBERENTRIES);
			if(ret)
			{
				return (-1);
			}
			doQoSClassification();
		}		
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQAt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DQAt_Enable, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".App.");
	char Alias[256] = {0};
	char name[256] = {0};
	char *p = NULL;

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSAppMap, Alias, atoi(index));
		if(ret)
		{
			return (-1);
		}
		p = strchr(Alias, '_');
		if(p != NULL)
		{
			sprintf(name, "trconf.Device_QoS_App_%d.Enable", atoi(p+1));		
			tr_log(LOG_DEBUG,"name[%s]", name);
			do_uci_get(name, value);
			if(ret)
			{
				strcpy(value, "0");
				ret = 0;
			}
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQAt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DQAt_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char *index = parseTemplate(path_name, ".App.");
	char Alias[256] = {0};
	char name[256] = {0};
	char *p = NULL;

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSAppMap, Alias, atoi(index));
		if(ret)
		{
			return (-1);
		}
		p = strchr(Alias, '_');
		if(p != NULL)
		{
			sprintf(name, "trconf.Device_QoS_App_%d.Enable", atoi(p+1)); 	
			tr_log(LOG_DEBUG,"name[%s]", name);
			ret = do_uci_set(name, value);
			if(ret)
			{
				return (-1);
			}
			else
			{
				ret = do_uci_commit(MS);
				if(ret)
				{
					return (-1);
				}
				//ret = 1; //means need to reboot for taking effect
			}
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQAt_Status(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DQAt_Status, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".App.");
	char Alias[256] = {0};
	char name[256] = {0};
	char tmp[256] = {0};
	char *p = NULL;

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSAppMap, Alias, atoi(index));
		if(ret)
		{
			return (-1);
		}
		p = strchr(Alias, '_');
		if(p != NULL)
		{
			sprintf(name, "trconf.Device_QoS_App_%d.Enable", atoi(p+1));		
			tr_log(LOG_DEBUG,"name[%s]", name);
			do_uci_get(name, tmp);
			if(atoi(tmp) == 1)
			{
				strcpy(value, "Enabled");
			}
			else
			{
				strcpy(value, "Disabled");
			}
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DQAt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DQAt_Alias, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".App.");
	char Alias[256] = {0};
	char name[256] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSAppMap, Alias, atoi(index));
		if(ret)
		{
			return (-1);
		}
		sprintf(name, "trconf.Device_QoS_App_%d.Alias", atoi(index));		
		tr_log(LOG_DEBUG,"name[%s]", name);
		do_uci_get(name, value);
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQAt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DQAt_Alias, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char *index = parseTemplate(path_name, ".App.");
	char Alias[32] = {0};
	char name[256] = {0};

	if (!isalpha(value[0]))
		return -2;
	
	if (strlen(value) > 64)
		return -2;

	if (index != NULL)
	{
		sprintf(name, "trconf.Device_QoS_App_%d.Alias", atoi(index));		
		tr_log(LOG_DEBUG,"name[%s]", name);
		ret = do_uci_set(name,value);
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit(MS);
			if(ret)
			{
				return (-1);
			}
		}
		toSaveMapFile(QoSAppMap, index, value); //update key info
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQAt_ProtocolIdentifier(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DQAt_ProtocolIdentifier, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".App.");
	char Alias[256] = {0};
	char name[256] = {0};
	char *p = NULL;
	
	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSAppMap, Alias, atoi(index));
		if(ret)
		{
			return (-1);
		}
		p = strchr(Alias, '_');
		if(p != NULL)
		{
			sprintf(name, "trconf.Device_QoS_App_%d.ProtocolIdentifier", atoi(p+1));		
			tr_log(LOG_DEBUG,"name[%s]", name);
			do_uci_get(name, value);
			if(ret)
			{
				strcpy(value, "");
				ret = 0;
			}
		}
	}
	else
	{
		return -1;
	}	
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQAt_ProtocolIdentifier(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DQAt_ProtocolIdentifier, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char *index = parseTemplate(path_name, ".App.");
	char Alias[256] = {0};
	char name[256] = {0};
	char *p = NULL;

	if(strlen(value) > 256)
	{
		return -2;
	}

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSAppMap, Alias, atoi(index));
		if(ret)
		{
			return (-1);
		}
		p = strchr(Alias, '_');
		if(p != NULL)
		{
			sprintf(name, "trconf.Device_QoS_App_%d.ProtocolIdentifier", atoi(p+1)); 	
			tr_log(LOG_DEBUG,"name[%s]", name);
			ret = do_uci_set(name, value);
			if(ret)
			{
				return (-1);
			}
			else
			{
				ret = do_uci_commit(MS);
				if(ret)
				{
					return (-1);
				}
				//ret = 1; //means need to reboot for taking effect
			}
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQAt_Name(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DQAt_Name, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".App.");
	char Alias[256] = {0};
	char name[256] = {0};
	char *p = NULL;
	
	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSAppMap, Alias, atoi(index));
		if(ret)
		{
			return (-1);
		}
		p = strchr(Alias, '_');
		if(p != NULL)
		{
			sprintf(name, "trconf.Device_QoS_App_%d.Name", atoi(p+1));		
			tr_log(LOG_DEBUG,"name[%s]", name);
			do_uci_get(name, value);
			if(ret)
			{
				strcpy(value, "");
				ret = 0;
			}
		}
	}
	else
	{
		return -1;
	}	
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQAt_Name(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DQAt_Name, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char *index = parseTemplate(path_name, ".App.");
	char Alias[256] = {0};
	char name[256] = {0};
	char *p = NULL;

	if(strlen(value) > 64)
	{
		return -2;
	}

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSAppMap, Alias, atoi(index));
		if(ret)
		{
			return (-1);
		}
		p = strchr(Alias, '_');
		if(p != NULL)
		{
			sprintf(name, "trconf.Device_QoS_App_%d.Name", atoi(p+1)); 	
			tr_log(LOG_DEBUG,"name[%s]", name);
			ret = do_uci_set(name, value);
			if(ret)
			{
				return (-1);
			}
			else
			{
				ret = do_uci_commit(MS);
				if(ret)
				{
					return (-1);
				}
				//ret = 1; //means need to reboot for taking effect
			}
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQAt_DefaultForwardingPolicy(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DQAt_DefaultForwardingPolicy, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQAt_DefaultForwardingPolicy(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DQAt_DefaultForwardingPolicy, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQAt_DefaultTrafficClass(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DQAt_DefaultTrafficClass, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".App.");
	char Alias[256] = {0};
	char name[256] = {0};
	char *p = NULL;
	
	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSAppMap, Alias, atoi(index));
		if(ret)
		{
			return (-1);
		}
		p = strchr(Alias, '_');
		if(p != NULL)
		{
			sprintf(name, "trconf.Device_QoS_App_%d.DefaultTrafficClass", atoi(p+1));		
			tr_log(LOG_DEBUG,"name[%s]", name);
			do_uci_get(name, value);
			if(ret)
			{
				strcpy(value, "");
				ret = 0;
			}
		}
	}
	else
	{
		return -1;
	}	
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQAt_DefaultTrafficClass(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DQAt_DefaultTrafficClass, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char *index = parseTemplate(path_name, ".App.");
	char Alias[256] = {0};
	char name[256] = {0};
	char *p = NULL;

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSAppMap, Alias, atoi(index));
		if(ret)
		{
			return (-1);
		}
		p = strchr(Alias, '_');
		if(p != NULL)
		{
			sprintf(name, "trconf.Device_QoS_App_%d.DefaultTrafficClass", atoi(p+1)); 	
			tr_log(LOG_DEBUG,"name[%s]", name);
			ret = do_uci_set(name, value);
			if(ret)
			{
				return (-1);
			}
			else
			{
				ret = do_uci_commit(MS);
				if(ret)
				{
					return (-1);
				}
				//ret = 1; //means need to reboot for taking effect
			}
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQAt_DefaultPolicer(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DQAt_DefaultPolicer, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQAt_DefaultPolicer(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DQAt_DefaultPolicer, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQAt_DefaultDSCPMark(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DQAt_DefaultDSCPMark, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".App.");
	char Alias[256] = {0};
	char name[256] = {0};
	char *p = NULL;
	
	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSAppMap, Alias, atoi(index));
		if(ret)
		{
			return (-1);
		}
		p = strchr(Alias, '_');
		if(p != NULL)
		{
			sprintf(name, "trconf.Device_QoS_App_%d.DefaultDSCPMark", atoi(p+1));		
			tr_log(LOG_DEBUG,"name[%s]", name);
			do_uci_get(name, value);
			if(ret)
			{
				strcpy(value, "");
				ret = 0;
			}
		}
	}
	else
	{
		return -1;
	}	
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQAt_DefaultDSCPMark(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DQAt_DefaultDSCPMark, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char *index = parseTemplate(path_name, ".App.");
	char Alias[256] = {0};
	char name[256] = {0};
	char *p = NULL;

	if(atoi(value) < -2)
	{
		return -2;
	}

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSAppMap, Alias, atoi(index));
		if(ret)
		{
			return (-1);
		}
		p = strchr(Alias, '_');
		if(p != NULL)
		{
			sprintf(name, "trconf.Device_QoS_App_%d.DefaultDSCPMark", atoi(p+1)); 	
			tr_log(LOG_DEBUG,"name[%s]", name);
			ret = do_uci_set(name, value);
			if(ret)
			{
				return (-1);
			}
			else
			{
				ret = do_uci_commit(MS);
				if(ret)
				{
					return (-1);
				}
				//ret = 1; //means need to reboot for taking effect
			}
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQAt_DefaultEthernetPriorityMark(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DQAt_DefaultEthernetPriorityMark, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQAt_DefaultEthernetPriorityMark(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DQAt_DefaultEthernetPriorityMark, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQAt_DefaultInnerEthernetPriorityMark(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DQAt_DefaultInnerEthernetPriorityMark, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQAt_DefaultInnerEthernetPriorityMark(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DQAt_DefaultInnerEthernetPriorityMark, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQFt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DQFt_Enable, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQFt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DQFt_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQFt_Status(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DQFt_Status, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DQFt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DQFt_Alias, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQFt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DQFt_Alias, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQFt_Type(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DQFt_Type, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQFt_Type(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DQFt_Type, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQFt_TypeParameters(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DQFt_TypeParameters, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQFt_TypeParameters(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DQFt_TypeParameters, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQFt_Name(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DQFt_Name, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQFt_Name(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DQFt_Name, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQFt_App(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DQFt_App, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQFt_App(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DQFt_App, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQFt_ForwardingPolicy(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DQFt_ForwardingPolicy, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQFt_ForwardingPolicy(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DQFt_ForwardingPolicy, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQFt_TrafficClass(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DQFt_TrafficClass, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQFt_TrafficClass(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DQFt_TrafficClass, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQFt_Policer(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DQFt_Policer, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQFt_Policer(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DQFt_Policer, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQFt_DSCPMark(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DQFt_DSCPMark, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQFt_DSCPMark(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DQFt_DSCPMark, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQFt_EthernetPriorityMark(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DQFt_EthernetPriorityMark, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQFt_EthernetPriorityMark(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DQFt_EthernetPriorityMark, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQFt_InnerEthernetPriorityMark(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DQFt_InnerEthernetPriorityMark, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQFt_InnerEthernetPriorityMark(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DQFt_InnerEthernetPriorityMark, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQPt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DQPt_Enable, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQPt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DQPt_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQPt_Status(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DQPt_Status, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DQPt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DQPt_Alias, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQPt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DQPt_Alias, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQPt_CommittedRate(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DQPt_CommittedRate, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQPt_CommittedRate(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DQPt_CommittedRate, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQPt_CommittedBurstSize(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DQPt_CommittedBurstSize, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQPt_CommittedBurstSize(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DQPt_CommittedBurstSize, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQPt_ExcessBurstSize(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DQPt_ExcessBurstSize, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQPt_ExcessBurstSize(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DQPt_ExcessBurstSize, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQPt_PeakRate(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DQPt_PeakRate, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQPt_PeakRate(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DQPt_PeakRate, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQPt_PeakBurstSize(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DQPt_PeakBurstSize, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQPt_PeakBurstSize(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DQPt_PeakBurstSize, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQPt_MeterType(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DQPt_MeterType, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQPt_MeterType(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DQPt_MeterType, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQPt_PossibleMeterTypes(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DQPt_PossibleMeterTypes, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQPt_PossibleMeterTypes(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DQPt_PossibleMeterTypes, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQPt_ConformingAction(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DQPt_ConformingAction, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQPt_ConformingAction(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DQPt_ConformingAction, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQPt_PartialConformingAction(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DQPt_PartialConformingAction, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQPt_PartialConformingAction(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DQPt_PartialConformingAction, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQPt_NonConformingAction(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DQPt_NonConformingAction, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQPt_NonConformingAction(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DQPt_NonConformingAction, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQPt_TotalCountedPackets(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DQPt_TotalCountedPackets, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DQPt_TotalCountedBytes(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DQPt_TotalCountedBytes, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DQPt_ConformingCountedPackets(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DQPt_ConformingCountedPackets, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DQPt_ConformingCountedBytes(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DQPt_ConformingCountedBytes, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DQPt_PartiallyConformingCountedPackets(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DQPt_PartiallyConformingCountedPackets, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DQPt_PartiallyConformingCountedBytes(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DQPt_PartiallyConformingCountedBytes, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DQPt_NonConformingCountedPackets(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DQPt_NonConformingCountedPackets, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DQPt_NonConformingCountedBytes(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DQPt_NonConformingCountedBytes, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DQQt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DQQt_Enable, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Queue.");
	char Alias[256] = {0};
	char name[256] = {0};
	int num = 0;

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSQueueMap, Alias, atoi(index));
		if(ret)
		{
			return (-1);
		}

		num = getQosQueueEntry(Alias);
		if(num >= 0)
		{
			sprintf(name, "qos.queue%d.Enable", num);		
			tr_log(LOG_DEBUG,"name[%s]", name);
			do_uci_get(name, value);
			if(ret)
			{
				strcpy(value, "0");
				ret = 0;
			}
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQQt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DQQt_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char *index = parseTemplate(path_name, ".Queue.");
	char Alias[256] = {0};
	char name[256] = {0};
	int num = 0;

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSQueueMap, Alias, atoi(index));
		if(ret)
		{
			return (-1);
		}

		num = getQosQueueEntry(Alias);
		if(num >= 0)
		{
			sprintf(name, "qos.queue%d.Enable", num); 	
			tr_log(LOG_DEBUG,"name[%s]", name);
			ret = do_uci_set(name, value);
			if(ret)
			{
				return (-1);
			}
			else
			{
				ret = do_uci_commit(QOSNUMBERENTRIES);
				if(ret)
				{
					return (-1);
				}
				doQoSQueue();
			}
		}
	}
	else
	{
		return -1;
	}
	//tr_log(LOG_DEBUG,"XXXXX tr_creat_queue_rules() ");
	//tr_creat_queue_rules();
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQQt_Status(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DQQt_Status, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Queue.");
	char Alias[256] = {0};
	char name[256] = {0};
	char tmp[256] = {0};
	int num = 0;

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSQueueMap, Alias, atoi(index));
		if(ret)
		{
			return (-1);
		}

		num = getQosQueueEntry(Alias);
		if(num >= 0)
		{
			sprintf(name, "qos.queue%d.Enable", num);		
			tr_log(LOG_DEBUG,"name[%s]", name);
			do_uci_get(name, tmp);
			if(atoi(tmp) == 1)
			{
				strcpy(value, "Enabled");
			}
			else
			{
				strcpy(value, "Disabled");
			}
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DQQt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DQQt_Alias, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Queue.");
	char Alias[256] = {0};
	char name[256] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSQueueMap, Alias, atoi(index));
	if(ret)
	{
			return (-1);
		}
		/*sprintf(name, "qos.queue%d.Alias", atoi(index));		
		tr_log(LOG_DEBUG,"name[%s]", name);
		do_uci_get(name, value);*/
		strcpy(value, Alias);
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQQt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DQQt_Alias, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char *index = parseTemplate(path_name, ".Queue.");
	char Alias[32] = {0};
	char name[256] = {0};

	if (!isalpha(value[0]))
		return -2;
	
	if (strlen(value) > 64)
		return -2;

	if (index != NULL)
	{
		/*sprintf(name, "qos.queue%d.Alias", atoi(index));		
		tr_log(LOG_DEBUG,"name[%s]", name);
		ret = do_uci_set(name,value);
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit(QOSNUMBERENTRIES);
			if(ret)
			{
				return (-1);
			}
		}*/
		toSaveMapFile(QoSQueueMap, index, value); //update key info
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQQt_TrafficClasses(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DQQt_TrafficClasses, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Queue.");
	char Alias[256] = {0};
	char name[256] = {0};
	/*char *p = NULL;
	char QueueNumberOfEntries[32] = {0};
	char Interface[256] = {0};
	char SchedulerAlgorithm[256] = {0};
	char InterfaceName[256] = {0};
	char TrafficClasses[256] = {0};
	int i = 0;
	int j = 0;
	int classid = 1;
	int classid1 = 1;*/
	int num = 0;

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSQueueMap, Alias, atoi(index));
		if(ret)
		{
			return (-1);
		}

		num = getQosQueueEntry(Alias);
		if(num >= 0)
		{
			sprintf(name, "qos.queue%d.TrafficClasses", num);		
			tr_log(LOG_DEBUG,"name[%s]", name);
			do_uci_get(name, value);
			if(ret)
			{
				strcpy(value, "0");
				ret = 0;
			}
		}		
		/*p = strchr(Alias, '_');
		if(p != NULL)
		{
		
			sprintf(name, "trconf.Device_QoS_Queue_%d.TrafficClasses", atoi(p+1));		
			tr_log(LOG_DEBUG,"name[%s]", name);
			do_uci_get(name, value);
			memset(QueueNumberOfEntries, 0, sizeof(QueueNumberOfEntries));
			do_uci_get(QUEUENUMBEROFENTRIES_PATH, QueueNumberOfEntries);
			printf("QueueNumberOfEntries: %s\n", QueueNumberOfEntries);
			
			while(i < atoi(QueueNumberOfEntries))
			{
				j++;
				sprintf(name, "queue.Device_QoS_Queue_%d", j); 	
				do_uci_get(name,value);
				if(strcmp(value, "queue") == 0)
				{
					sprintf(name, "queue.Device_QoS_Queue_%d.TrafficClasses", j);	
					do_uci_get(name, TrafficClasses);
					sprintf(name, "queue.Device_QoS_Queue_%d.Interface", j);	
					do_uci_get(name, Interface);
					sprintf(name, "queue.Device_QoS_Queue_%d.SchedulerAlgorithm", j);	
					do_uci_get(name, SchedulerAlgorithm);
			
					if(strcmp(Interface, "Device.IP.Interface.1") == 0)
					{
						strcpy(InterfaceName, "br-lan");
					}
					else
					{
						getEthInterfaceName("wan", InterfaceName);
					}
			
					if(strcasecmp(SchedulerAlgorithm, "SP") == 0)
					{
						strcpy(TrafficClasses, "101,102,103");
					}
					else if(strcasecmp(SchedulerAlgorithm, "WRR") == 0)
					{
						if(strcmp(InterfaceName, "br-lan") == 0)
						{
							sprintf(TrafficClasses, "%d00", classid);
							classid++;
						}
						else
						{
							sprintf(TrafficClasses, "%d00", classid1);
							classid1++;
						}		
					}
					else if(strcasecmp(SchedulerAlgorithm, "WFQ") == 0)
					{
						if(strcmp(InterfaceName, "br-lan") == 0)
						{
							sprintf(TrafficClasses, "%d00", classid);
							classid++;
						}
						else
						{
							sprintf(TrafficClasses, "%d00", classid1);
							classid1++;
						}		
					}

					if(j == atoi(p+1))
					{
						strcpy(value, TrafficClasses);
						break;
					}
					i++;
				}
			}
		}*/
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQQt_TrafficClasses(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DQQt_TrafficClasses, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char *index = parseTemplate(path_name, ".Queue.");
	char Alias[256] = {0};
	char name[256] = {0};
	int num = 0;

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSQueueMap, Alias, atoi(index));
		if(ret)
		{
			return (-1);
		}

		num = getQosQueueEntry(Alias);
		if(num >= 0)
		{
			sprintf(name, "qos.queue%d.TrafficClasses", num);
			tr_log(LOG_DEBUG,"name[%s]", name);
			ret = do_uci_set(name, value);
			if(ret)
			{
				return (-1);
			}
			else
			{
				ret = do_uci_commit(QOSNUMBERENTRIES);
				if(ret)
				{
					return (-1);
				}
				doQoSQueue();
			}
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQQt_Interface(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DQQt_Interface, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Queue.");
	char Alias[256] = {0};
	char name[256] = {0};
	int num = 0;

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSQueueMap, Alias, atoi(index));
		tr_log(LOG_DEBUG,"Alias[%s]", Alias);
		if(ret)
		{
			return (-1);
		}

		num = getQosQueueEntry(Alias);
		if(num >= 0)
		{
			sprintf(name, "qos.queue%d.Interface", num);		
			tr_log(LOG_DEBUG,"name[%s]", name);
			do_uci_get(name, value);
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQQt_Interface(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DQQt_Interface, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char *index = parseTemplate(path_name, ".Queue.");
	char Alias[256] = {0};
	char name[256] = {0};
	int num = 0;
	int i = 0, found = 0;

	if(strlen(value) > 256)	
	{
		return (-2);
	}

	for (i = 0; i <= WIFI_MAX_INSTANCE_NUM; i ++){
		sprintf(name, "Device.WiFi.SSID.%d", wifi_map[i].num);
		if (strcasecmp(value, name) == 0){
			found = 1;
			break;
		}
	}

	for (i = 0; i <= IP_LAN_INSTANCE_NUM; i ++){
		sprintf(name, "Device.IP.Interface.%d", lan_map[i].num);
		if (strcasecmp(value, name) == 0){
			found = 1;
			break;
		}
	}

	if (strcasecmp(value, IP_WAN_INTERFACE_PATH) == 0)
	{
		found = 1;
	}

	if(strlen(value) > 0 && found == 0)
	{
		return (-2);
	}
	
	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSQueueMap, Alias, atoi(index));
		tr_log(LOG_DEBUG,"Alias[%s]", Alias);
		if(ret)
		{
			return (-1);
		}

		num = getQosQueueEntry(Alias);
		if(num >= 0)
		{
			sprintf(name, "qos.queue%d.Interface", num);
			tr_log(LOG_DEBUG,"name[%s]", name);
			ret = do_uci_set(name, value);
			if(ret)
			{
				return (-1);
			}
			else
			{
				ret = do_uci_commit(QOSNUMBERENTRIES);
				if(ret)
				{
					return (-1);
				}
				doQoSQueue();
			}
		}
	}
	else
	{
		return -1;
	}

	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQQt_AllInterfaces(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	//ret = do_uci_get(DQQt_AllInterfaces, value);
	ret = do_uci_get("queue_template.template.AllInterfaces.", value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQQt_AllInterfaces(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	//ret = do_uci_set(DQQt_AllInterfaces, value);
	ret = do_uci_set("queue_template.template.AllInterfaces.", value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("queue_template");
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQQt_HardwareAssisted(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DQQt_HardwareAssisted, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "1");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DQQt_BufferLength(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("queue_template.template.BufferLength", value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DQQt_Weight(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DQQt_Weight, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Queue.");
	char Alias[256] = {0};
	char name[256] = {0};
	char *p = NULL;

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSQueueMap, Alias, atoi(index));
		if(ret)
		{
			return (-1);
		}
		p = strchr(Alias, '_');
		if(p != NULL)
		{
			sprintf(name, "queue.Device_QoS_Queue_%d.Weight", atoi(p+1));		
			tr_log(LOG_DEBUG,"name[%s]", name);
			do_uci_get(name, value);
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQQt_Weight(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DQQt_Weight, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char *index = parseTemplate(path_name, ".Queue.");
	char Alias[256] = {0};
	char name[256] = {0};
	char *p = NULL;

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSQueueMap, Alias, atoi(index));
		if(ret)
		{
			return (-1);
		}
		p = strchr(Alias, '_');
		if(p != NULL)
		{
			sprintf(name, "queue.Device_QoS_Queue_%d.Weight", atoi(p+1)); 	
			tr_log(LOG_DEBUG,"name[%s]", name);
			ret = do_uci_set(name, value);
			if(ret)
			{
				return (-1);
			}
			else
			{
				ret = do_uci_commit(QOSNUMBERENTRIES);
				if(ret)
				{
					return (-1);
				}
				//ret = 1; //means need to reboot for taking effect
			}
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQQt_Precedence(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DQQt_Precedence, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Queue.");
	char Alias[256] = {0};
	char name[256] = {0};
	char *p = NULL;

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSQueueMap, Alias, atoi(index));
		if(ret)
		{
			return (-1);
		}
		p = strchr(Alias, '_');
		if(p != NULL)
		{
			sprintf(name, "queue.Device_QoS_Queue_%d.Precedence", atoi(p+1));		
			tr_log(LOG_DEBUG,"name[%s]", name);
			do_uci_get(name, value);
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQQt_Precedence(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DQQt_Precedence, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char *index = parseTemplate(path_name, ".Queue.");
	char Alias[256] = {0};
	char name[256] = {0};
	char *p = NULL;

	if(atoi(value) < 1)
	{
		return (-2);
	}

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSQueueMap, Alias, atoi(index));
		if(ret)
		{
			return (-1);
		}
		p = strchr(Alias, '_');
		if(p != NULL)
		{
			sprintf(name, "queue.Device_QoS_Queue_%d.Precedence", atoi(p+1)); 	
			tr_log(LOG_DEBUG,"name[%s]", name);
			ret = do_uci_set(name, value);
			if(ret)
			{
				return (-1);
			}
			else
			{
				ret = do_uci_commit(QOSNUMBERENTRIES);
				if(ret)
				{
					return (-1);
				}
				//ret = 1; //means need to reboot for taking effect
			}		
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQQt_REDThreshold(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("queue_template.template.REDThreshold", value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQQt_REDThreshold(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set("queue_template.template.REDThreshold", value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("queue_template");
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQQt_REDPercentage(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("queue_template.template.REDPercentage", value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQQt_REDPercentage(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set("queue_template.template.REDPercentage", value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("queue_template");
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQQt_DropAlgorithm(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("queue_template.template.DropAlgorithm", value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQQt_DropAlgorithm(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set("queue_template.template.DropAlgorithm", value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("queue_template");
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQQt_SchedulerAlgorithm(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DQQt_SchedulerAlgorithm, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Queue.");
	char Alias[256] = {0};
	char name[256] = {0};
	int num = 0;

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSQueueMap, Alias, atoi(index));
		if(ret)
		{
			return (-1);
		}

		num = getQosQueueEntry(Alias);
		if(num >= 0)
		{
			sprintf(name, "qos.queue%d.SchedulerAlgorithm", num);		
			tr_log(LOG_DEBUG,"name[%s]", name);
			ret = do_uci_get(name, value);
			if(ret)
			{
				do_uci_set(name, "SP");
				do_uci_commit(QOSNUMBERENTRIES);
				strcpy(value, "SP");
				ret = 0;
			}
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQQt_SchedulerAlgorithm(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DQQt_SchedulerAlgorithm, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char *index = parseTemplate(path_name, ".Queue.");
	char Alias[256] = {0};
	char name[256] = {0};
	int num = 0;

	if((strcasecmp(value, "SP") != 0) && (strcasecmp(value, "WRR") != 0) && (strcasecmp(value, "WFQ") != 0))
	{
		return (-2);
	}

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSQueueMap, Alias, atoi(index));
		if(ret)
		{
			return (-1);
		}
		num = getQosQueueEntry(Alias);
		if(num >= 0)
		{
			sprintf(name, "qos.queue%d.SchedulerAlgorithm", num);
			tr_log(LOG_DEBUG,"name[%s]", name);
			ret = do_uci_set(name, value);
			if(ret)
			{
				return (-1);
			}
			else
			{
				ret = do_uci_commit(QOSNUMBERENTRIES);
				if(ret)
				{
					return (-1);
				}
				doQoSQueue();
			}
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQQt_ShapingRate(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("queue_template.template.ShapingRate", value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQQt_ShapingRate(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set("queue_template.template.ShapingRate", value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("queue_template");
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQQt_ShapingBurstSize(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("queue_template.template.ShapingBurstSize", value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQQt_ShapingBurstSize(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set("queue_template.template.ShapingBurstSize", value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("queue_template");
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQQt_Enable_3222(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DQQt_Enable_3222, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQQt_Enable_3222(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DQQt_Enable_3222, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQQt_Status_3224(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DQQt_Status_3224, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DQQt_Alias_3225(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DQQt_Alias_3225, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQQt_Alias_3225(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DQQt_Alias_3225, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQQt_Queue(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DQQt_Queue, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQQt_Queue(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DQQt_Queue, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQQt_Interface_3229(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DQQt_Interface_3229, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQQt_Interface_3229(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DQQt_Interface_3229, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQQt_OutputPackets(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DQQt_OutputPackets, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DQQt_OutputBytes(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DQQt_OutputBytes, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DQQt_DroppedPackets(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DQQt_DroppedPackets, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DQQt_DroppedBytes(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DQQt_DroppedBytes, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DQQt_QueueOccupancyPackets(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DQQt_QueueOccupancyPackets, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DQQt_QueueOccupancyPercentage(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DQQt_QueueOccupancyPercentage, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DQSt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DQSt_Enable, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Shaper.");
	char Alias[256] = {0};
	char name[256] = {0};
	char *p = NULL;

	if (index != NULL)
	{
		/*ret = lib_getvalue_mapfile_byinstance(QoSShaperMap, Alias, atoi(index));
		if(ret)
		{
			return (-1);
		}
		p = strchr(Alias, '_');
		if(p != NULL)
		{
			sprintf(name, "shaper.Device_QoS_Shaper_%d.Enable", atoi(p+1));		
			tr_log(LOG_DEBUG,"name[%s]", name);
			do_uci_get(name, value);
			if(ret)
			{
				strcpy(value, "0");
				ret = 0;
			}
		}*/
		sprintf(name, "qos.shaper%d.Enable", atoi(index)-1);		
		ret = do_uci_get(name, value);
		if(ret)
		{
			strcpy(value, "0");
			ret = 0;
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQSt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DQSt_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char *index = parseTemplate(path_name, ".Shaper.");
	char Alias[256] = {0};
	char name[256] = {0};
	char *p = NULL;

	if (index != NULL)
	{
		/*ret = lib_getvalue_mapfile_byinstance(QoSShaperMap, Alias, atoi(index));
		if(ret)
		{
			return (-1);
		}
		p = strchr(Alias, '_');
		if(p != NULL)
		{
			sprintf(name, "shaper.Device_QoS_Shaper_%d.Enable", atoi(p+1)); 	
			tr_log(LOG_DEBUG,"name[%s]", name);
			ret = do_uci_set(name, value);
			if(ret)
			{
				return (-1);
			}
			else
			{
				ret = do_uci_commit(SHAPER);
				if(ret)
				{
					return (-1);
				}
				ret = 1; //means need to reboot for taking effect
			}
		}*/
		sprintf(name, "qos.shaper%d.Enable", atoi(index)-1);		
		tr_log(LOG_DEBUG,"name[%s]", name);
		ret = do_uci_set(name, value);
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit("qos");
			if(ret)
			{
				return (-1);
			}
			//ret = 1; //means need to reboot for taking effect
			doQoSShaper();
		}		
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQSt_Status(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DQSt_Status, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Shaper.");
	char Alias[256] = {0};
	char name[256] = {0};
	char tmp[256] = {0};
	char *p = NULL;

	if (index != NULL)
	{
		/*ret = lib_getvalue_mapfile_byinstance(QoSShaperMap, Alias, atoi(index));
		if(ret)
		{
			return (-1);
		}
		p = strchr(Alias, '_');
		if(p != NULL)
		{
			sprintf(name, "shaper.Device_QoS_Shaper_%d.Enable", atoi(p+1));		
			tr_log(LOG_DEBUG,"name[%s]", name);
			do_uci_get(name, tmp);
			if(atoi(tmp) == 1)
			{
				strcpy(value, "Enabled");
			}
			else
			{
				strcpy(value, "Disabled");
			}
		}*/
		sprintf(name, "qos.shaper%d.Enable", atoi(index)-1);		
		do_uci_get(name, tmp);
		if(atoi(tmp) == 1)
		{
			strcpy(value, "Enabled");
		}
		else
		{
			strcpy(value, "Disabled");
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DQSt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DQSt_Alias, value);
	if(ret)
	{
		return -1;
	}*/
	ret = 1; //get from tr.xml
	/*char *index = parseTemplate(path_name, ".Shaper.");
	char Alias[256] = {0};
	char name[256] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSShaperMap, Alias, atoi(index));
		if(ret)
		{
			return (-1);
		}
		sprintf(name, "shaper.Device_QoS_Shaper_%d.Alias", atoi(index));		
		tr_log(LOG_DEBUG,"name[%s]", name);
		do_uci_get(name, value);
	}
	else
	{
		return -1;
	}*/
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQSt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (!isalpha(value[0]))
		return -2;
	
	if (strlen(value) > 64)
		return -2;

	/*ret = do_uci_set(DQSt_Alias, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	/*char *index = parseTemplate(path_name, ".Shaper.");
	char Alias[32] = {0};
	char name[256] = {0};

	if (!isalpha(value[0]))
		return -2;
	
	if (strlen(value) > 64)
		return -2;

	if (index != NULL)
	{
		sprintf(name, "shaper.Device_QoS_Shaper_%d.Alias", atoi(index));		
		tr_log(LOG_DEBUG,"name[%s]", name);
		ret = do_uci_set(name,value);
		if(ret)
		{
			return (-1);
		}
		else
		{
			//ret = do_uci_commit(MS);
			ret = do_uci_commit(SHAPER);
			if(ret)
			{
				return (-1);
			}
		}
		toSaveMapFile(QoSShaperMap, index, value); //update key info
	}*/
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQSt_Interface(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DQSt_Interface, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Shaper.");
	char Alias[256] = {0};
	char name[256] = {0};
	char *p = NULL;

	if (index != NULL)
	{
		/*ret = lib_getvalue_mapfile_byinstance(QoSShaperMap, Alias, atoi(index));
		if(ret)
		{
			return (-1);
		}
		p = strchr(Alias, '_');
		if(p != NULL)
		{
			sprintf(name, "shaper.Device_QoS_Shaper_%d.Interface", atoi(p+1));		
			tr_log(LOG_DEBUG,"name[%s]", name);
			do_uci_get(name, value);
		}*/
		sprintf(name, "qos.shaper%d.Interface", atoi(index)-1);		
		ret = do_uci_get(name, value);
		if(ret)
		{
			strcpy(value, "");
			ret = 0;
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQSt_Interface(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DQSt_Interface, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	/*char *index = parseTemplate(path_name, ".Shaper.");
	char Alias[256] = {0};
	char name[256] = {0};
	char *p = NULL;

	if(strlen(value) > 256)
	{
		return (-2);
	}
	
	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(QoSShaperMap, Alias, atoi(index));
		if(ret)
		{
			return (-1);
		}
		p = strchr(Alias, '_');
		if(p != NULL)
		{
			sprintf(name, "shaper.Device_QoS_Shaper_%d.Interface", atoi(p+1)); 	
			tr_log(LOG_DEBUG,"name[%s]", name);
			ret = do_uci_set(name, value);
			if(ret)
			{
				return (-1);
			}
			else
			{
				ret = do_uci_commit(SHAPER);
				if(ret)
				{
					return (-1);
				}
				ret = 1; //means need to reboot for taking effect
			}		
		}
	}
	else
	{
		return -1;
	}*/
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQSt_ShapingRate(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DQSt_ShapingRate, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Shaper.");
	char Alias[256] = {0};
	char name[256] = {0};
	char *p = NULL;
	char ShapingRate[32] = {0};
	char percentrate[32] = {0};

	if (index != NULL)
	{
		/*ret = lib_getvalue_mapfile_byinstance(QoSShaperMap, Alias, atoi(index));
		if(ret)
		{
			return (-1);
		}
		p = strchr(Alias, '_');
		if(p != NULL)
		{
			sprintf(name, "shaper.Device_QoS_Shaper_%d.ShapingRate", atoi(p+1));		
			tr_log(LOG_DEBUG,"name[%s]", name);
			ret = do_uci_get(name, value);
			if(ret)
			{
				strcpy(value, "-1");
				ret = 0;
			}
		}*/

		sprintf(name, "qos.shaper%d.percentrate", atoi(index)-1);	
		do_uci_get(name, percentrate);
		sprintf(name, "qos.shaper%d.ShapingRate", atoi(index)-1);		
		ret = do_uci_get(name, ShapingRate);
		if(ret)
		{
			strcpy(value, "-1");
			ret = 0;
		}
		if(atoi(ShapingRate) > 0)
		{
			if(atoi(percentrate) == 1)
			{
				strcpy(value, ShapingRate);
			}
			else
			{
				sprintf(value, "%d", atoi(ShapingRate) * 1000 * 1000);
			}
		}
		else
		{
			strcpy(value, "-1");
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQSt_ShapingRate(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DQSt_ShapingRate, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char *index = parseTemplate(path_name, ".Shaper.");
	char Alias[256] = {0};
	char name[256] = {0};
	char *p = NULL;
	char inf[32] = {0};
	char tmp[32] = {0};
	char rate[32] = {0};

	if(atoi(value) < -1)
	{
		return (-2);
	}
	
	if (index != NULL)
	{
		/*ret = lib_getvalue_mapfile_byinstance(QoSShaperMap, Alias, atoi(index));
		if(ret)
		{
			return (-1);
		}
		p = strchr(Alias, '_');
		if(p != NULL)
		{
			sprintf(name, "shaper.Device_QoS_Shaper_%d.ShapingRate", atoi(p+1)); 	
			tr_log(LOG_DEBUG,"name[%s]", name);
			ret = do_uci_set(name, value);
			if(ret)
			{
				return (-1);
			}
			else
			{
				//ret = do_uci_commit(MS);
				ret = do_uci_commit(SHAPER);
				if(ret)
				{
					return (-1);
				}
				ret = 1; //means need to reboot for taking effect
			}		
		}*/

		if(atoi(value) == -1)
		{
			strcpy(rate, "-1");
			sprintf(name, "qos.shaper%d.percentrate", atoi(index)-1);	
			do_uci_set(name, "0");
		}
		else if(atoi(value) <= 100)
		{
			if(atoi(index) == 1) //wan
			{
				getEthInterfaceName("wan", inf);
				getDevStatus(inf, "speed", tmp);
				
			}
			else if ((atoi(index) >= 2) && (atoi(index) <= 5)) //lan
			{
				getEthInterfaceName("lan", inf);
				getDevStatus(inf, "speed", tmp);
			}
			else
			{
				return (-1);
			}
			
			if (strcmp(tmp, "") != 0)
			{
				char *p = NULL;
				if ((p = strstr(tmp, "F")) != NULL) //for full speed
					*p = '\0';
				if ((p = strstr(tmp, "H")) != NULL) //for half speed
					*p = '\0';
			}
			sprintf(rate, "%d", atoi(tmp) / 100 * atoi(value));
			sprintf(name, "qos.shaper%d.percentrate", atoi(index)-1);	
			do_uci_set(name, "1");
		}
		else
		{
			sprintf(rate, "%d", atoi(value) / 1000 / 1000);
			sprintf(name, "qos.shaper%d.percentrate", atoi(index)-1);	
			do_uci_set(name, "0");
		}

		sprintf(name, "qos.shaper%d.ShapingRate", atoi(index)-1);		
		ret = do_uci_set(name, rate);
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit("qos");
			if(ret)
			{
				return (-1);
			}
			//ret = 1; //means need to reboot for taking effect
			doQoSShaper();
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DQSt_ShapingBurstSize(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DQSt_ShapingBurstSize, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Shaper.");
	char Alias[256] = {0};
	char name[256] = {0};
	char *p = NULL;

	if (index != NULL)
	{
		/*ret = lib_getvalue_mapfile_byinstance(QoSShaperMap, Alias, atoi(index));
		if(ret)
		{
			return (-1);
		}
		p = strchr(Alias, '_');
		if(p != NULL)
		{
			sprintf(name, "shaper.Device_QoS_Shaper_%d.ShapingBurstSize", atoi(p+1));		
			tr_log(LOG_DEBUG,"name[%s]", name);
			do_uci_get(name, value);
		}*/
		sprintf(name, "qos.shaper%d.ShapingBurstSize", atoi(index)-1); 	
		ret = do_uci_get(name, value);
		if(ret)
		{
			strcpy(value, "0");
			ret = 0;
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DQSt_ShapingBurstSize(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DQSt_ShapingBurstSize, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char *index = parseTemplate(path_name, ".Shaper.");
	char Alias[256] = {0};
	char name[256] = {0};
	char *p = NULL;

	if (index != NULL)
	{
		/*ret = lib_getvalue_mapfile_byinstance(QoSShaperMap, Alias, atoi(index));
		if(ret)
		{
			return (-1);
		}
		p = strchr(Alias, '_');
		if(p != NULL)
		{
			sprintf(name, "shaper.Device_QoS_Shaper_%d.ShapingBurstSize", atoi(p+1)); 	
			tr_log(LOG_DEBUG,"name[%s]", name);
			ret = do_uci_set(name, value);
			if(ret)
			{
				return (-1);
			}
			else
			{
				//ret = do_uci_commit(MS);
				ret = do_uci_commit(SHAPER);
				if(ret)
				{
					return (-1);
				}
				ret = 1; //means need to reboot for taking effect
			}
		}*/
		sprintf(name, "qos.shaper%d.ShapingBurstSize", atoi(index)-1);	
		tr_log(LOG_DEBUG,"name[%s]", name);
		ret = do_uci_set(name, value);
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit("qos");
			if(ret)
			{
				return (-1);
			}
			//ret = 1; //means need to reboot for taking effect
			doQoSShaper();
		}	
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DL_ConfigPassword(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
#if 0
	ret = do_uci_get("pwd.super_user.passwd", value);
	if(ret)
	{
		return -1;
	}
#else
	strcpy(value, ""); //When read, this parameter returns an empty string
#endif
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DL_ConfigPassword(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set("pwd.super_user.passwd", value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("pwd");
		if(ret)
		{
			return (-1);
		}
		system("/etc/init.d/lighttpd restart &");
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DH_HostNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DH_HostNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}*/
	char keyvalue[MAXMAPITEMS][128];
	int  number = 0;

	number = get_Hosts_ip(keyvalue);
	sprintf(value, "%d", number);

	//update node
	node_t node;
	ret = lib_resolve_node( "Device.Hosts.Host.", &node );
	tr_log(LOG_DEBUG,"ret[%d]",ret);
	if (ret == 0){
		lib_dynamic_init_children(node);
	}
	
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHHt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DHHt_Alias, value);
	if(ret)
	{
		return -1;
	}*/
	ret = 1; //getting from tr.xml
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DHHt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (!isalpha(value[0]))
		return -2;
	
	if (strlen(value) > 64)
		return -2;
	
	/*ret = do_uci_set(DHHt_Alias, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//set to tr.xml
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DHHt_PhysAddress(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DHHt_PhysAddress, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Host.");
	char mac[32] = {0};

	if (index != NULL){
		ret = lib_getvalue_mapfile_byinstance(HostsHostMap, mac, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			get_Hosts_Host_info(mac, value, "mac");
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHHt_IPAddress(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DHHt_IPAddress, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Host.");
	char mac[32] = {0};

	if (index != NULL){
		ret = lib_getvalue_mapfile_byinstance(HostsHostMap, mac, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			get_Hosts_Host_info(mac, value, "ip");
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHHt_AddressSource(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DHHt_AddressSource, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Host.");
	char mac[32] = {0};

	if (index != NULL){
		ret = lib_getvalue_mapfile_byinstance(HostsHostMap, mac, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			char dhcpip[32] = {0};
			get_DHCPv4_Server_Pool_Client_info(mac, dhcpip, "IpAddress"); //to find if or not in dhcp list
			if (dhcpip[0] != '\0')
				strcpy(value, "DHCP");
			else
				strcpy(value, "Static");
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHHt_DHCPClient(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DHHt_DHCPClient, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Host.");
	char mac[32] = {0};

	if (index != NULL){
		ret = lib_getvalue_mapfile_byinstance(HostsHostMap, mac, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			char dhcpip[32] = {0};
			char inf[32] = {0};

			get_Hosts_Host_info(mac, inf, "l3dev");
			
			get_DHCPv4_Server_Pool_Client_info(mac, dhcpip, "MacAddress"); //to find if or not in dhcp list
			if (dhcpip[0] != '\0'){ //Must relase by dhcp server
				get_DHCPv4_Server_Pool_Client_entry_path(dhcpip, inf, value);
			}
			else
				strcpy(value, "");
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHHt_LeaseTimeRemaining(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DHHt_LeaseTimeRemaining, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Host.");
	char mac[32] = {0};
	char leasetime[128] = {0};
	long int leasetime2 = 0;
	long int leasetime3 = 0;
	char *ptr;
	
	if (index != NULL){
		ret = lib_getvalue_mapfile_byinstance(HostsHostMap, mac, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			char dhcpip[32] = {0};
			get_DHCPv4_Server_Pool_Client_info(mac, dhcpip, "IpAddress"); //to find if or not in dhcp list
			if (dhcpip[0] != '\0'){
				get_DHCPv4_Server_Pool_Client_info(mac, leasetime, "LeaseTime");
				leasetime2 = strtol(leasetime, &ptr, 10);
				printf("=================leasetime=%ld\n", leasetime2);
				
				leasetime3 = getLocalTimeWithSeconds();
				sprintf(value, "%ld", leasetime2 - leasetime3);
			}
			else
				strcpy(value, "0"); //for static, always 0
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHHt_AssociatedDevice(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DHHt_AssociatedDevice, value);
	if(ret)
	{
		return -1;
	}*/
	a_wlanAssociatedDev dev;
	char *index = parseTemplate(path_name, ".Host.");
	char mac[32] = {0};
	char *ptr = NULL;

	memset(&dev, 0, sizeof(a_wlanAssociatedDev));
	if (index != NULL){
		ret = lib_getvalue_mapfile_byinstance(HostsHostMap, mac, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			memset(&dev, 0, sizeof(a_wlanAssociatedDev));
			strcpy(dev.mac, mac);
			tr_log(LOG_DEBUG,"dev.mac[%s]",dev.mac);
			get_Wlan_AssociatedDeviceInfo(&dev);
			strcpy(value, dev.pathname);
			if((ptr = strrchr(dev.pathname, '.')) != NULL)
			{
				node_t node;
				char tmp_path[256] = {0};
				strncpy(tmp_path, dev.pathname, ptr-dev.pathname);
				tr_log(LOG_DEBUG,"tmp_path: [%s]", tmp_path);
				ret = lib_resolve_node( tmp_path, &node );
				tr_log(LOG_DEBUG,"ret[%d]",ret);
				if (ret == 0){
					lib_dynamic_init_children(node);
				}
			}
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHHt_Layer1Interface(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DHHt_Layer1Interface, value);
	if(ret)
	{
		return -1;
	}*/
	a_wlanAssociatedDev dev;
	char *index = parseTemplate(path_name, ".Host.");
	char mac[32] = {0};

	memset(&dev, 0, sizeof(a_wlanAssociatedDev));
	if (index != NULL){
		ret = lib_getvalue_mapfile_byinstance(HostsHostMap, mac, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			strcpy(dev.mac, mac);
			get_Wlan_AssociatedDeviceInfo(&dev);
			if (strcmp(dev.inf, "") == 0)
				strcpy(value, ETHERNET_LAN_INTERFACE_PATH); //xml path name
			else{
				int has24g = 0;
				int has5g = 0;
				int i = 0;

				for (i = 0; i < WIFI_MAX_INSTANCE_NUM; i ++){
					if (strstr(dev.inf, wifi_map[i].wlaninf) != NULL){
						if (wifi_map[i].num >= WIFI5G_START_INSTANCE_NUM && wifi_map[i].num <= WIFI5G_END_INSTANCE_NUM)
							has5g ++;
						else
							has24g ++;
					}
				}

				if (has5g != 0)
					strcpy(value, WIFI_RADIO_5G_PATH);
				if (has24g != 0)
					strcpy(value, WIFI_RADIO_24G_PATH);
			}
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHHt_Layer3Interface(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DHHt_Layer3Interface, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Host.");
	char mac[32] = {0};

	if (index != NULL){
		ret = lib_getvalue_mapfile_byinstance(HostsHostMap, mac, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			char inf[32] = {0};
			get_Hosts_Host_info(mac, inf, "l3dev");
			get_Layer3Interface_path(inf, value);
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHHt_VendorClassID(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DHHt_VendorClassID, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, ""); //always an empty string
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHHt_ClientID(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DHHt_ClientID, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, ""); //always an empty string
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHHt_UserClassID(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DHHt_UserClassID, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, ""); //always an empty string
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHHt_HostName(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DHHt_HostName, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Host.");
	char mac[32] = {0};

	if (index != NULL){
		ret = lib_getvalue_mapfile_byinstance(HostsHostMap, mac, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			get_DHCPv4_Server_Pool_Client_info(mac, value, "HostName"); //to find if or not in dhcp list
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHHt_Active(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DHHt_Active, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Host.");
	char mac[32] = {0};
	char ip[32] = {0};

	if (index != NULL){
		ret = lib_getvalue_mapfile_byinstance(HostsHostMap, mac, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			get_Hosts_Host_info(mac, ip, "ip");
			if (ip[0] != '\0')
				strcpy(value, "1");
			else
				strcpy(value, "0");
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHHt_ActiveLastChange(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DHHt_LeaseTimeRemaining, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Host.");
	char mac[32] = {0};
	char leasetime[128] = {0};
	long int leasetime2 = 0;
	long int leasetime3 = 0;
	char *ptr;
	
	if (index != NULL){
		ret = lib_getvalue_mapfile_byinstance(HostsHostMap, mac, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			char dhcpip[32] = {0};
			get_DHCPv4_Server_Pool_Client_info(mac, dhcpip, "IpAddress"); //to find if or not in dhcp list
			if (dhcpip[0] != '\0'){
				get_DHCPv4_Server_Pool_Client_info(mac, leasetime, "LeaseTime");
				leasetime2 = strtol(leasetime, &ptr, 10);
				printf("=================leasetime2=%ld\n", leasetime2);
				memset(leasetime, 0, sizeof(leasetime));
				getDHCPServerLeaseTime(leasetime);
				leasetime3 = strtol(leasetime, &ptr, 10);
				printf("=================leasetime3=%ld\n", leasetime3);
				changedSecondsToDateTime(leasetime2 - leasetime3, value);
			}
			else
				strcpy(value, "0001-01-01T00:00:00Z");
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHHt_IPv4AddressNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DHHt_IPv4AddressNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "1"); //always 1
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHHt_IPv6AddressNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DHHt_IPv6AddressNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "1"); //always 1
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHHtIt_IPAddress(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DHHtIt_IPAddress, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Host.");
	char mac[32] = {0};

	if (index != NULL){
		ret = lib_getvalue_mapfile_byinstance(HostsHostMap, mac, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			get_Hosts_Host_info(mac, value, "ip");
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DHHtIt_IPAddress_3269(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DHHtIt_IPAddress_3269, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Host.");
	char mac[32] = {0};

	if (index != NULL){
		ret = lib_getvalue_mapfile_byinstance(HostsHostMap, mac, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			get_Device_DHCPv6_Server_Pool_1_Client_address_by_mac(mac, value);
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DD_SupportedRecordTypes(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DD_SupportedRecordTypes, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "A,AAAA,SRV,PTR");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDC_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("dhcp.@dnsmasq[0].domainneeded", value);
	if(ret)
	{
		strcpy(value, "1");
		ret = 0;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDC_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set("dhcp.@dnsmasq[0].domainneeded", value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("dhcp");
		if(ret)
		{
			return (-1);
		}
		//ret = 1; //means need to reboot for taking effect
		doRestartNetwork();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDC_Status(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("dhcp.@dnsmasq[0].domainneeded", value);
	if(ret)
	{
		strcpy(value, "1");
		ret = 0;
	}
	if(strcmp(value, "1") == 0)
		strcpy(value, "Enabled");
	else
		strcpy(value, "Disabled");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDC_ServerNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDC_ServerNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "2"); //always 2
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDCSt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDCSt_Enable, value);
	if(ret)
	{
		return -1;
	}*/
	a_dnsinfo dnsinfo;

	memset(&dnsinfo, 0, sizeof(dnsinfo));
	getDnsServerInfo(&dnsinfo);

	char *index = parseTemplate(path_name, ".Server.");
	if (index != NULL){
		if(atoi(index) == 1){
			if(dnsinfo.statusdns1 == 1)
				strcpy(value, "1");
			else
				strcpy(value, "0");
		}
		else{
			if(dnsinfo.statusdns2 == 1)
				strcpy(value, "1");
			else
				strcpy(value, "0");
		}	
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDCSt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DDCSt_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDCSt_Status(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDCSt_Status, value);
	if(ret)
	{
		return -1;
	}*/
	a_dnsinfo dnsinfo;

	memset(&dnsinfo, 0, sizeof(dnsinfo));
	getDnsServerInfo(&dnsinfo);

	char *index = parseTemplate(path_name, ".Server.");
	if (index != NULL){
		if(atoi(index) == 1){
			if(dnsinfo.statusdns1 == 1)
				strcpy(value, "Enabled");
			else
				strcpy(value, "Disabled");
		}
		else{
			if(dnsinfo.statusdns2 == 1)
				strcpy(value, "Enabled");
			else
				strcpy(value, "Disabled");
		}	
	}
	
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDCSt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDCSt_Alias, value);
	if(ret)
	{
		return -1;
	}*/
	ret = 1; //getting from tr.xml
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDCSt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (!isalpha(value[0]))
		return -2;
	
	if (strlen(value) > 64)
		return -2;
	
	/*ret = do_uci_set(DDCSt_Alias, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//set to tr.xml
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDCSt_DNSServer(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDCSt_DNSServer, value);
	if(ret)
	{
		return -1;
	}*/
	a_dnsinfo dnsinfo;

	memset(&dnsinfo, 0, sizeof(dnsinfo));
	getDnsServerInfo(&dnsinfo);

	char *index = parseTemplate(path_name, ".Server.");
	if (index != NULL){
		if(atoi(index) == 1)
			strcpy(value, dnsinfo.dns1);
		else
			strcpy(value, dnsinfo.dns2);
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDCSt_DNSServer(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	char dns[64] = {0};
	char dns2[64] = {0};
	char *p = NULL;

	ret = do_uci_get("network.wan.peerdns", dns);
	if(ret)
	{
		strcpy(dns, "1"); //auto dns
		ret = 0;
	}

	if (atoi(dns) == 1) //don't set for auto dns
		return -1;

	char *index = parseTemplate(path_name, ".Server.");
	if (index == NULL)
		return -1;

	memset(dns, 0, sizeof(dns));
	ret = do_uci_get("network.wan.dns", dns);
	if(ret)
	{
		return -1;
	}

	if(atoi(index) == 1 && strcmp(value, "") == 0) //don't allow the main dns ip is null
		return -1;
	
	if ((p = strstr(dns, " ")) != NULL){
		if(atoi(index) == 1){
			sprintf(dns2, "%s %s", value, p+1);
		}
		else{
			*p = '\0';
			if (strcmp(value, "") != 0) //check the setting vlaue if or not the null
				sprintf(dns2, "%s %s", dns, value);
			else
				sprintf(dns2, "%s", dns);
		}
	}
	else
	{
		if(atoi(index) == 1){
			strcpy(dns2, value);
		}
		else{
			if (strcmp(dns, "") != 0){
				if (strcmp(value, "") != 0) //check the setting vlaue if or not the null
					sprintf(dns2, "%s %s", dns, value);
				else
					sprintf(dns2, "%s", dns);
			}
			else
				strcpy(dns2, value); //don't care the setting value if or not the null
		}
	}
	
	ret = do_uci_set("network.wan.dns", dns2);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("network");
		if(ret)
		{
			return (-1);
		}
		//ret = 1; //means need to reboot for taking effect
		doRestartNetwork();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDCSt_Interface(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDCSt_Interface, value);
	if(ret)
	{
		return -1;
	}*/
	/*a_dnsinfo dnsinfo;
	memset(&dnsinfo, 0, sizeof(dnsinfo));
	getDnsServerInfo(&dnsinfo);
	strcpy(value, dnsinfo.device);*/
	if (checkEthWanUpDown())
		strcpy(value, IP_WAN_INTERFACE_PATH); //interface path name
	else
		strcpy(value, "");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDCSt_Interface(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DDCSt_Interface, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDCSt_Type(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDCSt_Type, value);
	if(ret)
	{
		return -1;
	}*/
	a_dnsinfo dnsinfo;

	memset(&dnsinfo, 0, sizeof(dnsinfo));
	getDnsServerInfo(&dnsinfo);
	strcpy(value, dnsinfo.type);
	
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDR_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("dhcp.lan.ignore", value); //with the same as dhcp server
	if(ret)
	{
		//for router default value, this node maybe not exist
		strcpy(value, "0"); //meas enable
		ret = 0;
	}
	if (strcmp(value, "0") == 0) //0 means enable
		strcpy(value, "1");
	else
		strcpy(value, "0");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDR_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char dhcponoff[8] = {0};
	if (strcmp(value, "1") == 0)
		strcpy(dhcponoff, "0");
	else
		strcpy(dhcponoff, "1");
	ret = do_uci_set("dhcp.lan.ignore", dhcponoff); //with the same as dhcp server
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("dhcp");
		if(ret)
		{
			return (-1);
		}
		//ret = 1; //means need to reboot for taking effect
		doRestartNetwork();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDR_Status(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("dhcp.lan.ignore", value); //with the same as dhcp server
	if(ret)
	{
		strcpy(value, "Enabled");
		ret = 0;
	}
	else{
		if (strcmp(value, "0") == 0) //0 means enable
			strcpy(value, "Enabled");
		else
			strcpy(value, "Disabled");
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDR_ForwardNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDR_ForwardNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "2"); //always 2
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDRFt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDRFt_Enable, value);
	if(ret)
	{
		return -1;
	}*/
	char dnsvalue[64] = {0};

	ret = do_uci_get("dhcp.lan.dhcp_option", dnsvalue);
	if(ret)
	{
		return -1;
	}
	char *index = parseTemplate(path_name, ".Forwarding.");
	if (index != NULL){
		if(atoi(index) == 1)
		{
			if (strstr(dnsvalue, "6,") != NULL)
				strcpy(value, "1");
			else
				strcpy(value, "0");
		}
		else if (atoi(index) == 2)
		{
			if (strstr(dnsvalue, "44,") != NULL)
				strcpy(value, "1");
			else
				strcpy(value, "0");
		}
		else
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDRFt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DDRFt_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDRFt_Status(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char dnsvalue[64] = {0};

	ret = do_uci_get("dhcp.lan.dhcp_option", dnsvalue);
	if(ret)
	{
		return -1;
	}
	char *index = parseTemplate(path_name, ".Forwarding.");
	if (index != NULL){
		if(atoi(index) == 1)
		{
			if (strstr(dnsvalue, "6,") != NULL)
				strcpy(value, "Enabled");
			else
				strcpy(value, "Disabled");
		}
		else if (atoi(index) == 2)
		{
			if (strstr(dnsvalue, "44,") != NULL)
				strcpy(value, "Enabled");
			else
				strcpy(value, "Disabled");
		}
		else
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDRFt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDRFt_Alias, value);
	if(ret)
	{
		return -1;
	}*/
	ret = 1; //getting from tr.xml
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDRFt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (!isalpha(value[0]))
		return -2;
	
	if (strlen(value) > 64)
		return -2;
	
	/*ret = do_uci_set(DDRFt_Alias, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//set to tr.xml
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDRFt_DNSServer(char * path_name, char *value)
{
	int ret = 0;
	char dnsvalue[64] = {0};
	char *ptr = NULL;
	char *q = NULL;
	int i = 0;

	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("dhcp.lan.dhcp_option", dnsvalue);
	if(ret)
	{
		return -1;
	}
	char *index = parseTemplate(path_name, ".Forwarding.");
	if (index != NULL){
		if(atoi(index) == 1)
		{
			if ((ptr = strstr(dnsvalue, "6,")) != NULL){
				/*ptr = ptr+2;
				for (i = 0; ptr[i] != ' ' && ptr[i] != '\n' && ptr[i] != '\0'; i++)
					value[i] = ptr[i];*/
				strcpy(value, ptr+2);
				if ((q = strstr(value, " ")) != NULL || (q = strstr(value, "\n")) != NULL)
					*q = '\0';
			}
			else
				strcpy(value, ""); //no dnsserver ip
		}
		else if (atoi(index) == 2)
		{
			if ((ptr = strstr(dnsvalue, "44,")) != NULL){
				if ((q = strstr(ptr, "\n")) != NULL)
					*q = '\0';
				strcpy(value, ptr+3);
			}
			else
				strcpy(value, ""); //no dnsserver ip
		}
		else
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDRFt_DNSServer(char * path_name, char *value)
{
	int ret = 0;
	char dnsoldvalue[64] = {0};
	char dnsnewvalue[64] = {0};
	char gw[32] = {0};
	char dns1[32] = {0};
	char dns2[32] = {0};
	char *ptr = NULL;
	int i = 0;

	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("dhcp.lan.dhcp_option", dnsoldvalue);
	if(ret)
	{
		return (-1);
	}
	else
	{
		char *index = parseTemplate(path_name, ".Forwarding.");
		if (index == NULL)
			return -1;

		if(atoi(index) == 1 && strcmp(value, "") == 0) //don't allow the main dns relay ip is null
			return -1;
		
		if ((ptr = strstr(dnsoldvalue, "3,")) != NULL){ //get gw ip
			//ptr = ptr+2;
			for (i = 0; ptr[i] != ' ' && ptr[i] != '\n' && ptr[i] != '\0'; i++)
				gw[i] = ptr[i];
		}
		else
			strcpy(gw, "");
		if ((ptr = strstr(dnsoldvalue, "6,")) != NULL){ //get dns1 ip
			//ptr = ptr+2;
			for (i = 0; ptr[i] != ' ' && ptr[i] != '\n' && ptr[i] != '\0'; i++)
				dns1[i] = ptr[i];
		}
		else
			strcpy(dns1, "");
		if ((ptr = strstr(dnsoldvalue, "44,")) != NULL){ //get dns2 ip
			//ptr = ptr+3;
			for (i = 0; ptr[i] != ' ' && ptr[i] != '\n' && ptr[i] != '\0'; i++)
				dns2[i] = ptr[i];
		}
		else
			strcpy(dns2, "");

		if (gw[0] != '\0')
			sprintf(dnsnewvalue, "%s ", gw);
		
		if(atoi(index) == 1){
			if (strcmp(value, "") != 0) //check the value name if or not is the null
				sprintf(dnsnewvalue, "%s6,%s", dnsnewvalue, value);
			if (dns2[0] != '\0')
				sprintf(dnsnewvalue, "%s %s", dnsnewvalue, dns2);
		}
		else if (atoi(index) == 2){
			if (dns1[0] != '\0')
				sprintf(dnsnewvalue, "%s%s", dnsnewvalue, dns1);
			if (strcmp(value, "") != 0) //check the value name if or not is the null
				sprintf(dnsnewvalue, "%s 44,%s", dnsnewvalue, value);
		}
		else
			return -1;
		ret = do_uci_set("dhcp.lan.dhcp_option", dnsnewvalue);
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit("dhcp");
			if(ret)
			{
				return (-1);
			}
			//ret = 1; //means need to reboot for taking effect
			doRestartNetwork();
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDRFt_Interface(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDRFt_Interface, value);
	if(ret)
	{
		return -1;
	}*/
	sprintf(value, "Device.IP.Interface.%d", lan_map[0].num); //for lan
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDRFt_Interface(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DDRFt_Interface, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDRFt_Type(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDRFt_Type, value);
	if(ret)
	{
		return -1;
	}*/
	a_infinfo infStatus;

	memset(&infStatus, 0, sizeof(infStatus));
	getInterfaceInfo("lan", &infStatus);
	if (strcmp(infStatus.proto, "static") == 0)
		strcpy(value, "Static");
	else
		strcpy(value, "DHCP");

	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDDN_DiagnosticsState(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDDN_DiagnosticsState, value);
	if(ret)
	{
		strcpy(value, "None");
		ret = 0;
	}
	if (strcmp(value, " ") == 0)
		strcpy(value, "None");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDDN_DiagnosticsState(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char cmd[512] = {0};
	char cmd2[512] = {0};
	char dnsserver[128] = {0};
	char hostnmae[128] = {0};
	char NumberOfRepetitions[32] = {0};
	char line[128] = {0};
	char SuccessCount[32] = {0};
	int i = 0, j = 0;
	FILE *fp = NULL;
	long int time1 = 0;
	long int time2 = 0;

	if(strcasecmp(value, "Requested") == 0)
	{
		ret = do_uci_get(DDDN_DNSServer, dnsserver);
		if(ret)
		{
			return (-1);
		}
		if(dnsserver[0] == '\0' || strcmp(dnsserver, " ") == 0)
		{
			return (-1);
		}
		ret = do_uci_get(DDDN_HostName, hostnmae);
		if(ret)
		{
			return (-1);
		}
		if(hostnmae[0] == '\0' || strcmp(hostnmae, " ") == 0)
		{
			return (-1);
		}
		ret = do_uci_get(DDDN_NumberOfRepetitions, NumberOfRepetitions);
		if(ret)
		{
			return (-1);
		}
		if(NumberOfRepetitions[0] == '\0' || strcmp(NumberOfRepetitions, " ") == 0)
		{
			strcpy(NumberOfRepetitions, "1"); //default 1
		}

		sprintf(cmd, "nslookup %s %s > /tmp/NSLookupDiagnostics.Result", hostnmae, dnsserver);

		for (i = 0; i < atoi(NumberOfRepetitions); i ++){
			time1 = getLocalTimeWithSeconds();
			system(cmd);
			if((fp=popen("cat /tmp/NSLookupDiagnostics.Result | grep Name:","r")) != NULL){
				if (fgets(line,sizeof(line)-1,fp)){
					j ++;
				}
				pclose(fp);
				time2 = getLocalTimeWithSeconds();
				memset(cmd2, 0, sizeof(cmd2));
				sprintf(cmd2, "echo ResponseTime: %ld >> /tmp/NSLookupDiagnostics.Result", (time2 - time1) * 1000); //milliseconds
				system(cmd2);
				memset(cmd2, 0, sizeof(cmd2));
				sprintf(cmd2, "cp /tmp/NSLookupDiagnostics.Result /tmp/NSLookupDiagnostics.Result%d", i);
				system(cmd2);
			}
		}
		memset(cmd2, 0, sizeof(cmd2));
		sprintf(cmd2, "echo %d > /tmp/NSLookupDiagnostics.ResultNumber", i);
		system(cmd2);
	}
	else
	{
		return (-1);
	}
		
	ret = do_uci_set(DDDN_DiagnosticsState, "Complete");
	if(ret)
	{
		return (-1);
	}
	else
	{
		sentEventforDiagnostic();
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}

	sprintf(SuccessCount, "%d", j);
	ret = do_uci_set(DDDN_SuccessCount, SuccessCount);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDDN_Interface(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDDN_Interface, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDDN_Interface(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (strlen(value) > 256)
		return -2;
	
	ret = do_uci_set(DDDN_Interface, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDDN_HostName(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDDN_HostName, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDDN_HostName(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (strlen(value) > 256)
		return -2;
	
	ret = do_uci_set(DDDN_HostName, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDDN_DNSServer(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDDN_DNSServer, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDDN_DNSServer(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (strlen(value) > 256)
		return -2;
	
	ret = do_uci_set(DDDN_DNSServer, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDDN_Timeout(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDDN_Timeout, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDDN_Timeout(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDDN_Timeout, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDDN_NumberOfRepetitions(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDDN_NumberOfRepetitions, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDDN_NumberOfRepetitions(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDDN_NumberOfRepetitions, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDDN_SuccessCount(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDDN_SuccessCount, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDDN_ResultNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDDN_ResultNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}*/
	char keyvalue[MAXMAPITEMS][256];
	int num = get_Device_NSLookupDiagnostics_Result_Entry(keyvalue);

	sprintf(value, "%d", num);
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDDNRt_Status(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDDNRt_Status, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Result.");

	if (index != NULL){
		getNSLookupDiagnosticsResultValue(atoi(index) - 1, "Status", value);
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDDNRt_AnswerType(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDDNRt_AnswerType, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Result.");

	if (index != NULL){
		getNSLookupDiagnosticsResultValue(atoi(index) - 1, "AnswerType", value);
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDDNRt_HostNameReturned(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDDNRt_HostNameReturned, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Result.");
	if (index != NULL){
		getNSLookupDiagnosticsResultValue(atoi(index) - 1, "HostNameReturned", value);
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDDNRt_IPAddresses(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDDNRt_IPAddresses, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Result.");

	if (index != NULL){
		getNSLookupDiagnosticsResultValue(atoi(index) - 1, "IPAddresses", value);
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDDNRt_DNSServerIP(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDDNRt_DNSServerIP, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Result.");

	if (index != NULL){
		getNSLookupDiagnosticsResultValue(atoi(index) - 1, "DNSServerIP", value);
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDDNRt_ResponseTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDDNRt_ResponseTime, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Result.");

	if (index != NULL){
		getNSLookupDiagnosticsResultValue(atoi(index) - 1, "ResponseTime", value);
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDS_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDS_Enable, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDS_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDS_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDS_ServiceNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDS_ServiceNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDSSt_InstanceName(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDSSt_InstanceName, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDSSt_ApplicationProtocol(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDSSt_ApplicationProtocol, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDSSt_TransportProtocol(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDSSt_TransportProtocol, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDSSt_Domain(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDSSt_Domain, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDSSt_Port(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDSSt_Port, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDSSt_Target(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDSSt_Target, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDSSt_Status(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDSSt_Status, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDSSt_LastUpdate(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDSSt_LastUpdate, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDSSt_Host(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDSSt_Host, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDSSt_TimeToLive(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDSSt_TimeToLive, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDSSt_Priority(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDSSt_Priority, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDSSt_Weight(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDSSt_Weight, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDSSt_TextRecordNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDSSt_TextRecordNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDSStTt_Key(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDSStTt_Key, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDSStTt_Value(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDSStTt_Value, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DN_InterfaceSettingNumberOfEntries_3337(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DN_InterfaceSettingNumberOfEntries_3337, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "1");//only one WAN Interface
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DN_PortMappingNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	//update node
	/*node_t node;
	ret = lib_resolve_node( "Device.NAT.PortMapping.", &node );
	tr_log(LOG_DEBUG,"ret[%d]",ret);
	if (ret == 0){
		lib_init_PortMapping_children(node);
	}*/

	ret = do_uci_get(NET_FW_PORTFWD_NUM, value);
	if(ret)
	{
		return -1;
	}

	/*FILE *fp = NULL;
	char buff[8192] = {0};
	int i = 0;
	char *p = NULL;
	char *q = NULL;

	fp = fopen("/etc/portforwarding_save.txt", "r");

	if(fp != NULL)
	{
		while(fgets(buff, sizeof(buff), fp))
		{
			p = buff;
			while((q = strstr(p, "ServiceName")) != NULL)
			{
				i++;
				p = q + strlen("ServiceName");
			}
		}
		fclose(fp);
	}
	sprintf(value, "%d", i);*/
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DNIt_Enable_3339(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("firewall.zone_wan.masq", value);
	if(ret)
	{
		strcpy(value, "1");
		ret = 0;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DNIt_Enable_3339(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	ret = do_uci_set("firewall.zone_wan.masq", value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		if (atoi(value) == 1) {
			do_uci_set("firewall.zone_wan.input", "REJECT");
		} else {
			do_uci_set("firewall.zone_wan.input", "ACCEPT");
		}
		ret = do_uci_commit("firewall");
		if(ret)
		{
			return (-1);
		}
		//ret = 1; //means need to reboot for taking effect
		doRestartNetwork();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DNIt_Status_3341(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char natstatus[32] ={0};
	a_infinfo wanStatus;

	ret = do_uci_get("firewall.zone_wan.masq", natstatus);
	if(ret)
	{
		strcpy(natstatus, "1");
		ret = 0;
	}

	memset(&wanStatus, 0, sizeof(wanStatus));
	getInterfaceInfo("wan", &wanStatus);

	if ((atoi(natstatus) == 1) && (wanStatus.status == 1))
		strcpy(value, "Enabled");
	else
		strcpy(value, "Disabled");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DNIt_Alias_3342(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DNIt_Alias_3342, value);
	if(ret)
	{
		return -1;
	}*/
	ret = 1; //getting from tr.xml
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DNIt_Alias_3342(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (!isalpha(value[0]))
		return -2;
	
	if (strlen(value) > 64)
		return -2;
		
	/*ret = do_uci_set(DNIt_Alias_3342, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//set to tr.xml
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DNIt_Interface_3344(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DNIt_Interface_3344, value);
	if(ret)
	{
		return -1;
	}*/
	if (checkEthWanUpDown())
		strcpy(value, IP_WAN_INTERFACE_PATH); //the value is the path name
	else
		strcpy(value, "");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DNIt_Interface_3344(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DNIt_Interface_3344, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DNPt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DNPt_Enable, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".PortMapping.");
	char externalport[32] = {0};

	if (index != NULL){
		ret = lib_getvalue_mapfile_byinstance(PortMappingMap, externalport, atoi(index));
		if(ret)
		{
			return (-1);
		}

		getPortmappingEntry("Enable", value, externalport);
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DNPt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set("firewall.wan_pf.enabled", value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("firewall");
		if(ret)
		{
			return (-1);
		}
		run_portmaping_entry();
	}*/
	char *index = parseTemplate(path_name, ".PortMapping.");
	char ExternalPort[256] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(PortMappingMap, ExternalPort, atoi(index));
		if(ret)
		{
			return (-1);
		}
		//ret = 1; //means need to reboot for taking effect
		rewrite_portmaping_entry("Enable", value, ExternalPort);
		doPortmapping();
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DNPt_Status(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DNPt_Status, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".PortMapping.");
	char externalport[32] = {0};
	char tmp[128] = {0};

	if (index != NULL){
		ret = lib_getvalue_mapfile_byinstance(PortMappingMap, externalport, atoi(index));
		if(ret)
		{
			return (-1);
		}

		getPortmappingEntry("Enable", tmp, externalport);
	}
	else
	{
		return -1;
	}
	if(atoi(tmp) == 1)
	{
		strcpy(value, "Enabled");
	}
	else
	{
		strcpy(value, "Disabled");
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DNPt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DNPt_Alias, value);
	if(ret)
	{
		return -1;
	}*/
	ret = 1; //getting from tr.xml
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DNPt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (!isalpha(value[0]))
		return -2;
	
	if (strlen(value) > 64)
		return -2;
	
	/*ret = do_uci_set(DNPt_Alias, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//set to tr.xml
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DNPt_Interface(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DNPt_Interface, value);
	if(ret)
	{
		return -1;
	}*/
	if (checkEthWanUpDown())
		strcpy(value, IP_WAN_INTERFACE_PATH); //the value is the path name
	else
		strcpy(value, "");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DNPt_Interface(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DNPt_Interface, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DNPt_AllInterfaces(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DNPt_AllInterfaces, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "1");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DNPt_AllInterfaces(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DNPt_AllInterfaces, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DNPt_LeaseDuration(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DNPt_LeaseDuration, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "0"); //always 0
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DNPt_LeaseDuration(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DNPt_LeaseDuration, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DNPt_RemoteHost(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DNPt_RemoteHost, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".PortMapping.");
	char externalport[32] = {0};

	if (index != NULL){
		ret = lib_getvalue_mapfile_byinstance(PortMappingMap, externalport, atoi(index));
		if(ret)
		{
			return (-1);
		}

		getPortmappingEntry("ExternalIP", value, externalport);
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DNPt_RemoteHost(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DNPt_RemoteHost, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char *index = parseTemplate(path_name, ".PortMapping.");
	char ExternalPort[256] = {0};

	if(strlen(value) > 256)
	{
		return (-2);
	}

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(PortMappingMap, ExternalPort, atoi(index));
		if(ret)
		{
			return (-1);
		}
		//ret = 1; //means need to reboot for taking effect
		rewrite_portmaping_entry("ExternalIP", value, ExternalPort);
		doPortmapping();
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DNPt_ExternalPort(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DNPt_ExternalPort, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".PortMapping.");
	char externalport[32] = {0};
	char buff[1024] = {0};
	char *p = NULL;

	if (index != NULL){
		ret = lib_getvalue_mapfile_byinstance(PortMappingMap, externalport, atoi(index));
		if(ret)
		{
			return (-1);
		}

		getPortmappingEntry("ExternalPort", buff, externalport);
	}
	else
	{
		return -1;
	}

	tr_log(LOG_DEBUG,"buff[%s]",buff);
	if((p = strchr(buff, ':')) != NULL)
	{
		*p = '\0';
	}
	strcpy(value, buff);
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DNPt_ExternalPort(char * path_name, char *value)
{
	int ret = 0;
	char *p = NULL;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DNPt_ExternalPort, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char *index = parseTemplate(path_name, ".PortMapping.");
	char ExternalPort[256] = {0};
	char port_protocol[256] = {0};
	char buff[256] = {0};
	tr_log(LOG_DEBUG,"set value [%s]",value);

	if((p = strchr(value, '_')) != NULL)
	{
		*p = '\0';
	}
	
	tr_log(LOG_DEBUG,"atoi(value) [%d]",atoi(value));
	if(atoi(value) < 0 || atoi(value) > 65535)	
	{
		return (-2);
	}

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(PortMappingMap, ExternalPort, atoi(index));
		if(ret)
		{
			return (-1);
		}
		//ret = 1; //means need to reboot for taking effect
		getPortmappingEntry("Protocol", buff, ExternalPort);
		rewrite_portmaping_entry("ExternalPort", value, ExternalPort);
		
		sprintf(port_protocol, "%s_%s", value, buff);
		toSaveMapFile(PortMappingMap, index, port_protocol); //update key info
		doPortmapping();
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DNPt_ExternalPortEndRange(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DNPt_ExternalPortEndRange, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".PortMapping.");
	char externalport[32] = {0};
	char tmp[128] = {0};
	char *p = NULL;

	if (index != NULL){
		ret = lib_getvalue_mapfile_byinstance(PortMappingMap, externalport, atoi(index));
		if(ret)
		{
			return (-1);
		}

		getPortmappingEntry("PortRange", tmp, externalport);
	}
	else
	{
		return -1;
	}

	if((p = strchr(tmp, ':')) != NULL)
	{
		strcpy(value, p+1);
	}
	else
	{
		strcpy(value, "0");
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DNPt_ExternalPortEndRange(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DNPt_ExternalPortEndRange, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char *index = parseTemplate(path_name, ".PortMapping.");
	char ExternalPort[256] = {0};

	if(atoi(value) < 0 || atoi(value) > 65535)	
	{
		return (-2);
	}

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(PortMappingMap, ExternalPort, atoi(index));
		if(ret)
		{
			return (-1);
		}
		//ret = 1; //means need to reboot for taking effect
		if(rewrite_portmaping_entry("PortRange", value, ExternalPort) == -1)
		{
			return (-2);
		}
		doPortmapping();
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DNPt_InternalPort(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DNPt_InternalPort, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".PortMapping.");
	char externalport[32] = {0};

	if (index != NULL){
		ret = lib_getvalue_mapfile_byinstance(PortMappingMap, externalport, atoi(index));
		if(ret)
		{
			return (-1);
		}

		getPortmappingEntry("LocalPort", value, externalport);
	}
	else
	{
		return -1;
	}

	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DNPt_InternalPort(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DNPt_InternalPort, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char *index = parseTemplate(path_name, ".PortMapping.");
	char ExternalPort[256] = {0};

	if(atoi(value) < 0 || atoi(value) > 65535)	
	{
		return (-2);
	}

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(PortMappingMap, ExternalPort, atoi(index));
		if(ret)
		{
			return (-1);
		}
		//ret = 1; //means need to reboot for taking effect
		rewrite_portmaping_entry("LocalPort", value, ExternalPort);
		doPortmapping();
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DNPt_Protocol(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DNPt_Protocol, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".PortMapping.");
	char externalport[32] = {0};
	char buff[1024] = {0};

	if (index != NULL){
		ret = lib_getvalue_mapfile_byinstance(PortMappingMap, externalport, atoi(index));
		if(ret)
		{
			return (-1);
		}

		getPortmappingEntry("Protocol", buff, externalport);
	}
	else
	{
		return -1;
	}

	if(strcmp(buff, "0") == 0)
	{
		strcpy(value, "TCP");
	}
	else if(strcmp(buff, "1") == 0)
	{
		strcpy(value, "UDP");
	}
	else if(strcmp(buff, "2") == 0)
	{
		strcpy(value, "BOTH");
	}
	else
	{
		strcpy(value, "");
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DNPt_Protocol(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DNPt_Protocol, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char *index = parseTemplate(path_name, ".PortMapping.");
	char ExternalPort[256] = {0};
	char port_protocol[256] = {0};
	char buff[256] = {0};
	char tmp[256] = {0};
	char protocol[32] = {0};
	char *p = NULL;

	if ((strcasecmp(value, "TCP") != 0) && (strcasecmp(value, "UDP") != 0) && (strcasecmp(value, "BOTH") != 0))
		return -2;

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(PortMappingMap, ExternalPort, atoi(index));
		if(ret)
		{
			return (-1);
		}
		//ret = 1; //means need to reboot for taking effect
		getPortmappingEntry("ExternalPort", tmp, ExternalPort);
		tr_log(LOG_DEBUG,"tmp[%s]",tmp);
		if((p = strchr(tmp, ':')) != NULL)
		{
			*p = '\0';
		}
		strcpy(buff, tmp);
		tr_log(LOG_DEBUG,"buff[%s]",buff);
		rewrite_portmaping_entry("Protocol", value, ExternalPort);
		if(strcasecmp(value, "tcp") == 0)
		{
			strcpy(protocol, "0");
		}
		else if(strcasecmp(value, "udp") == 0)
		{
			strcpy(protocol, "1");
		}
		else if(strcasecmp(value, "both") == 0)
		{
			strcpy(protocol, "2");
		}
		sprintf(port_protocol, "%s_%s", buff, protocol);
		toSaveMapFile(PortMappingMap, index, port_protocol); //update key info
		doPortmapping();
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DNPt_InternalClient(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DNPt_InternalClient, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".PortMapping.");
	char externalport[32] = {0};

	if (index != NULL){
		ret = lib_getvalue_mapfile_byinstance(PortMappingMap, externalport, atoi(index));
		if(ret)
		{
			return (-1);
		}

		getPortmappingEntry("LocalIp", value, externalport);
	}
	else
	{
		return -1;
	}

	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DNPt_InternalClient(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DNPt_InternalClient, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char *index = parseTemplate(path_name, ".PortMapping.");
	char ExternalPort[256] = {0};

	if(strlen(value) > 256)
	{
		return (-2);
	}

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(PortMappingMap, ExternalPort, atoi(index));
		if(ret)
		{
			return (-1);
		}
		//ret = 1; //means need to reboot for taking effect
		rewrite_portmaping_entry("LocalIp", value, ExternalPort);
		doPortmapping();
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DNPt_Description(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DNPt_Description, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".PortMapping.");
	char externalport[32] = {0};

	if (index != NULL){
		ret = lib_getvalue_mapfile_byinstance(PortMappingMap, externalport, atoi(index));
		if(ret)
		{
			return (-1);
		}

		getPortmappingEntry("ServiceName", value, externalport);
	}
	else
	{
		return -1;
	}

	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DNPt_Description(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DNPt_Description, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char *index = parseTemplate(path_name, ".PortMapping.");
	char ExternalPort[256] = {0};

	if(strlen(value) > 256)
	{
		return (-2);
	}

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(PortMappingMap, ExternalPort, atoi(index));
		if(ret)
		{
			return (-1);
		}
		//ret = 1; //means need to reboot for taking effect
		rewrite_portmaping_entry("ServiceName", value, ExternalPort);
		doPortmapping();
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DD_ClientNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DD_ClientNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "1"); //Only one client for WAN dynamic getting IP Address
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDCt_Enable_3372(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDCt_Enable_3372, value);
	if(ret)
	{
		return -1;
	}*/
	char wanmode[32] = {0};

	getWanMode(wanmode);
	if ((strcmp(wanmode, "dhcp") == 0) && (checkEthWanUpDown() == 1))
		strcpy(value, "1");
	else
		strcpy(value, "0");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDCt_Enable_3372(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DDCt_Enable_3372, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't do anything
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDCt_Alias_3374(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDCt_Alias_3374, value);
	if(ret)
	{
		return -1;
	}*/
	ret = 1; //getting from tr.xml
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDCt_Alias_3374(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (!isalpha(value[0]))
		return -2;
	
	if (strlen(value) > 64)
		return -2;
	
	/*ret = do_uci_set(DDCt_Alias_3374, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//set to tr.xml
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDCt_V4_Interface(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get("network.wan.ifname", value);
	if(ret)
	{
		return -1;
	}*/
	char wanmode[32] = {0};

	getWanMode(wanmode);
	if ((strcmp(wanmode, "dhcp") == 0) && (checkEthWanUpDown() == 1))
		strcpy(value, IP_WAN_INTERFACE_PATH);
	else
		strcpy(value, "");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}

int get_DDCt_Status_3376(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get("network.wan.proto", value);
	if(ret)
	{
		return -1;
	}*/
	char wanmode[32] = {0};
	a_infinfo wanStatus;

	getWanMode(wanmode);
	if (strcmp(wanmode, "dhcp") != 0){
		strcpy(value, "Disabled");
		tr_log(LOG_DEBUG,"get value [%s]",value);
		return 0;
	}
		
	memset(&wanStatus, 0, sizeof(wanStatus));
	getInterfaceInfo("wan", &wanStatus);
	if (strcmp(wanStatus.proto, "dhcp") == 0 && wanStatus.status == 1)
		strcpy(value, "Enabled");
	else
		strcpy(value, "Disabled");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDCt_DHCPStatus(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDCt_DHCPStatus, value);
	if(ret)
	{
		return -1;
	}*/
	a_infinfo wanStatus;

	memset(&wanStatus, 0, sizeof(wanStatus));
	getInterfaceInfo("wan", &wanStatus);
	if (strcmp(wanStatus.proto, "dhcp") == 0 && wanStatus.status == 1)
	{
		if (strcmp(wanStatus.ipv4_address, "") != 0)
			strcpy(value, "Bound");
		else
			strcpy(value, "Requesting");
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDCt_Renew(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDCt_Renew, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "0");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDCt_Renew(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DDCt_Renew, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char wanmode[32] = {0};

	getWanMode(wanmode);
	if (strcmp(wanmode, "dhcp") != 0){
		return -1;
	}
	
	if (strcmp(value, "1") == 0){
		a_infinfo wanStatus;
		memset(&wanStatus, 0, sizeof(wanStatus));
		getInterfaceInfo("wan", &wanStatus);
		if (strcmp(wanStatus.proto, "dhcp") == 0 && wanStatus.status == 1){
			system("killall -SIGUSR1 udhcpc");
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDCt_IPAddress(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDCt_IPAddress, value);
	if(ret)
	{
		return -1;
	}*/
	a_infinfo wanStatus;

	memset(&wanStatus, 0, sizeof(wanStatus));
	getInterfaceInfo("wan", &wanStatus);
	if (strcmp(wanStatus.proto, "dhcp") == 0 && wanStatus.status == 1)
	{
		strcpy(value, wanStatus.ipv4_address);
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDCt_SubnetMask(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDCt_SubnetMask, value);
	if(ret)
	{
		return -1;
	}*/
	char inf[32] = {0};
	a_infinfo wanStatus;

	memset(&wanStatus, 0, sizeof(wanStatus));
	getInterfaceInfo("wan", &wanStatus);
	if (strcmp(wanStatus.proto, "dhcp") == 0 && wanStatus.status == 1)
	{
		//strcpy(value, wanStatus.mask);
		getEthInterfaceName("wan", inf);
		getNetmask(inf, value);
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDCt_IPRouters(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDCt_IPRouters, value);
	if(ret)
	{
		return -1;
	}*/
	a_infinfo wanStatus;

	memset(&wanStatus, 0, sizeof(wanStatus));
	getInterfaceInfo("wan", &wanStatus);
	if (strcmp(wanStatus.proto, "dhcp") == 0 && wanStatus.status == 1)
	{
		strcpy(value, wanStatus.nexthop);
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDCt_DNSServers(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDCt_DNSServers, value);
	if(ret)
	{
		return -1;
	}*/
	a_infinfo wanStatus;

	memset(&wanStatus, 0, sizeof(wanStatus));
	getInterfaceInfo("wan", &wanStatus);
	if (strcmp(wanStatus.proto, "dhcp") == 0 && wanStatus.status == 1)
	{
		strcpy(value, wanStatus.dns);
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDCt_LeaseTimeRemaining(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDCt_LeaseTimeRemaining, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "-1"); //always -1, menas infinite lease
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDCt_DHCPServer(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDCt_DHCPServer, value);
	if(ret)
	{
		return -1;
	}*/
	a_infinfo wanStatus;

	memset(&wanStatus, 0, sizeof(wanStatus));
	getInterfaceInfo("wan", &wanStatus);
	if (strcmp(wanStatus.proto, "dhcp") == 0 && wanStatus.status == 1)
	{
		strcpy(value, wanStatus.nexthop);
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDCt_PassthroughEnable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDCt_PassthroughEnable, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "0"); //always 0, don't support passthrough
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDCt_PassthroughEnable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DDCt_PassthroughEnable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't support to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDCt_PassthroughDHCPPool(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDCt_PassthroughDHCPPool, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, ""); //always null, don't support 
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDCt_PassthroughDHCPPool(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DDCt_PassthroughDHCPPool, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't support to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDCt_SentOptionNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDCt_SentOptionNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "0");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDCt_ReqOptionNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDCt_ReqOptionNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "0");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDCtSt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDCtSt_Enable, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDCtSt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDCtSt_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDCtSt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDCtSt_Alias, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDCtSt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDCtSt_Alias, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDCtSt_Tag(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDCtSt_Tag, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDCtSt_Tag(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDCtSt_Tag, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDCtSt_Value(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDCtSt_Value, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDCtSt_Value(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDCtSt_Value, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDCtRt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDCtRt_Enable, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDCtRt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDCtRt_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDCtRt_Order(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDCtRt_Order, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDCtRt_Order(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDCtRt_Order, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDCtRt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDCtRt_Alias, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDCtRt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDCtRt_Alias, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDCtRt_Tag(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDCtRt_Tag, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDCtRt_Tag(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDCtRt_Tag, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDCtRt_Value(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDCtRt_Value, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDS_Enable_3409(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("dhcp.lan.ignore", value);
	if(ret)
	{
		//for router default value, this node maybe not exist
		strcpy(value, "1");
		ret = 0;
	}
	else{
		if (strcmp(value, "0") == 0) //0 means enable
			strcpy(value, "1");
		else
			strcpy(value, "0");
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDS_Enable_3409(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char dhcponoff[8] = {0};

	if (strcmp(value, "0") == 0)
		strcpy(dhcponoff, "1");
	else if (strcmp(value, "1") == 0)
		strcpy(dhcponoff, "0");
	else
		return (-1);
	ret = do_uci_set("dhcp.lan.ignore", dhcponoff);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("dhcp");
		if(ret)
		{
			return (-1);
		}
		//ret = 1; //means need to reboot for taking effect
		doDhcprestart(1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDS_PoolNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDS_PoolNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}*/
	sprintf(value, "%d", DHCPV4_SERVER_POOL_INSTANCE_NUM);
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDSPt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDSPt_Enable, value);
	if(ret)
	{
		return -1;
	}*/
	char *p = parseTemplate(path_name, ".Pool.");

	if (p == NULL)
		return -1;

	if (checkDhcpServerOnOff(p) == 1)
		strcpy(value, "1");
	else
		strcpy(value, "0");
	
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDSPt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DDSPt_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char ucipath[64] = {0};
	char *p = parseTemplate(path_name, ".Pool.");

	if (p == NULL)
		return -1;

	
	if (atoi(p) == 1)
		strcpy(ucipath, "dhcp.lan.ignore");
	else{
		char name[64] = {0};
		char tmpvalue[64] = {0};
		sprintf(ucipath, "dhcp.lan%d", atoi(p)-1);
		sprintf(name, "lan%d", atoi(p)-1);
		ret = do_uci_get(ucipath, tmpvalue);
		if(ret)
		{
			addUciTopNode("dhcp", name);
			ret = 0;
		}
		memset(ucipath, 0, sizeof(ucipath));
		sprintf(ucipath, "dhcp.lan%d.ignore", atoi(p)-1);
	}

	if (strcmp(value, "0") == 0) //0 means enable
		strcpy(value, "1");
	else
		strcpy(value, "0");

	ret = do_uci_set(ucipath, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("dhcp");
		if(ret)
		{
			return (-1);
		}
		//ret = 1; //means need to reboot for taking effect
		doDhcprestart(atoi(p));
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDSPt_Status(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char *p = parseTemplate(path_name, ".Pool.");

	if (p == NULL)
		return -1;

	if (checkDhcpServerOnOff(p) == 1)
		strcpy(value, "Enabled");
	else
		strcpy(value, "Disabled");

	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDSPt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDSPt_Alias, value);
	if(ret)
	{
		return -1;
	}*/
	ret = 1; //getting from tr.xml
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDSPt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (!isalpha(value[0]))
		return -2;
	
	if (strlen(value) > 64)
		return -2;
	
	/*ret = do_uci_set(DDSPt_Alias, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//set to tr.xml
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDSPt_Order(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDSPt_Order, value);
	if(ret)
	{
		return -1;
	}*/
	char *p = parseTemplate(path_name, ".Pool.");

	if (p == NULL)
		return -1;

	sprintf(value, "%d", atoi(p));	
	
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDSPt_Order(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DDSPt_Order, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDSPt_Interface(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDSPt_Interface, value);
	if(ret)
	{
		return -1;
	}*/
	char *p = parseTemplate(path_name, ".Pool.");

	if (p == NULL)
		return -1;
	
	if (checkDhcpServerOnOff(p) == 1)
		sprintf(value, "Device.IP.Interface.%d", atoi(p));
	else
		strcpy(value, "");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDSPt_Interface(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DDSPt_Interface, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDSPt_VendorClassID(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDSPt_VendorClassID, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDSPt_VendorClassID(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DDSPt_VendorClassID, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDSPt_VendorClassIDExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDSPt_VendorClassIDExclude, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "0");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDSPt_VendorClassIDExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DDSPt_VendorClassIDExclude, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDSPt_VendorClassIDMode(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDSPt_VendorClassIDMode, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "Exact"); //default value
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDSPt_VendorClassIDMode(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DDSPt_VendorClassIDMode, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDSPt_ClientID(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDSPt_ClientID, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDSPt_ClientID(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DDSPt_ClientID, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDSPt_ClientIDExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDSPt_ClientIDExclude, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "0");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDSPt_ClientIDExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DDSPt_ClientIDExclude, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDSPt_UserClassID(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDSPt_UserClassID, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDSPt_UserClassID(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DDSPt_UserClassID, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDSPt_UserClassIDExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDSPt_UserClassIDExclude, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "0");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDSPt_UserClassIDExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DDSPt_UserClassIDExclude, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDSPt_Chaddr(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDSPt_Chaddr, value);
	if(ret)
	{
		return -1;
	}*/
	char inf[32] = {0};
	char * ptr = NULL;
	char *p = parseTemplate(path_name, ".Pool.");

	if (p == NULL)
		return -1;

	if (atoi(p) == 1)
		strcpy(inf, "br-lan");
	else
		sprintf(inf, "br-lan%d", atoi(p)-1);
	
	getDevStatus(inf, "macaddr", value);
	if ((ptr = strtok(value, "\"")) != NULL)
		strcpy(value, ptr);
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDSPt_Chaddr(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DDSPt_Chaddr, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDSPt_ChaddrMask(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDSPt_ChaddrMask, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "FF:FF:FF:FF:FF:FF"); //means one host
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDSPt_ChaddrMask(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DDSPt_ChaddrMask, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDSPt_ChaddrExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDSPt_ChaddrExclude, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "0"); //always 0
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDSPt_ChaddrExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DDSPt_ChaddrExclude, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDSPt_MinAddress(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char ucipath[64] = {0};
	char *p = parseTemplate(path_name, ".Pool.");

	if (p == NULL)
		return -1;

	if (atoi(p) == 1)
		strcpy(ucipath, "dhcp.lan.start");
	else
		sprintf(ucipath, "dhcp.lan%d.start", atoi(p)-1);
	
	ret = do_uci_get(ucipath, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDSPt_MinAddress(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	char ucipath[64] = {0};
	char *p = parseTemplate(path_name, ".Pool.");

	if (p == NULL)
		return -1;

	if (strlen(value) > 15)
		return -2;

	if (atoi(p) == 1)
		strcpy(ucipath, "dhcp.lan.start");
	else{
		char name[64] = {0};
		char tmpvalue[64] = {0};
		sprintf(ucipath, "dhcp.lan%d", atoi(p)-1);
		sprintf(name, "lan%d", atoi(p)-1);
		ret = do_uci_get(ucipath, tmpvalue);
		if(ret)
		{
			addUciTopNode("dhcp", name);
			ret = 0;
		}
		memset(ucipath, 0, sizeof(ucipath));
		sprintf(ucipath, "dhcp.lan%d.start", atoi(p)-1);
	}
	
	ret = do_uci_set(ucipath, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("dhcp");
		if(ret)
		{
			return (-1);
		}
		//ret = 1; //means need to reboot for taking effect
		doDhcprestart(atoi(p));
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDSPt_MaxAddress(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char ucipath[64] = {0};
	char *p = parseTemplate(path_name, ".Pool.");

	if (p == NULL)
		return -1;

	if (atoi(p) == 1)
		strcpy(ucipath, "dhcp.lan.end");
	else
		sprintf(ucipath, "dhcp.lan%d.end", atoi(p)-1);
	
	ret = do_uci_get(ucipath, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDSPt_MaxAddress(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char ucipath[64] = {0};
	char *p = parseTemplate(path_name, ".Pool.");

	if (p == NULL)
		return -1;

	if (strlen(value) > 15)
		return -2;

	if (atoi(p) == 1)
		strcpy(ucipath, "dhcp.lan.end");
	else{
		char name[64] = {0};
		char tmpvalue[64] = {0};
		sprintf(ucipath, "dhcp.lan%d", atoi(p)-1);
		sprintf(name, "lan%d", atoi(p)-1);
		ret = do_uci_get(ucipath, tmpvalue);
		if(ret)
		{
			addUciTopNode("dhcp", name);
			ret = 0;
		}
		memset(ucipath, 0, sizeof(ucipath));
		sprintf(ucipath, "dhcp.lan%d.end", atoi(p)-1);
	}
	
	ret = do_uci_set(ucipath, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("dhcp");
		if(ret)
		{
			return (-1);
		}
		//ret = 1; //means need to reboot for taking effect
		doDhcprestart(atoi(p));
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDSPt_ReservedAddresses(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDSPt_ReservedAddresses, value);
	if(ret)
	{
		return -1;
	}*/
	char *p = parseTemplate(path_name, ".Pool.");

	if (p == NULL)
		return -1;
	if (atoi(p) == 1) //only support dhcp.lan
		get_DHCPv4_Server_Pool_1_ReservedAddresses_list(value);
	else
		strcpy(value, "");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDSPt_ReservedAddresses(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DDSPt_ReservedAddresses, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDSPt_SubnetMask(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char ucipath[64] = {0};
	char *p = parseTemplate(path_name, ".Pool.");

	if (p == NULL)
		return -1;

	if (atoi(p) == 1)
		strcpy(ucipath, "network.lan.netmask");
	else
		sprintf(ucipath, "network.lan%d.netmask", atoi(p)-1);
	
	ret = do_uci_get(ucipath, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDSPt_SubnetMask(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char ucipath[64] = {0};
	char *p = parseTemplate(path_name, ".Pool.");

	if (p == NULL)
		return -1;

	if (strcmp(value, "") == 0) //don't allow to set null
		return -1;

	if (strlen(value) > 15)
		return -2;

	if (isValidNetmask(value) == 0)
		return -2;

	if (atoi(p) == 1)
		strcpy(ucipath, "network.lan.netmask");
	else{
		char name[64] = {0};
		char tmpvalue[64] = {0};
		sprintf(ucipath, "network.lan%d", atoi(p)-1);
		sprintf(name, "lan%d", atoi(p)-1);
		ret = do_uci_get(ucipath, tmpvalue);
		if(ret)
		{
			addUciTopNode("network", name);
			ret = 0;
		}
		memset(ucipath, 0, sizeof(ucipath));
		sprintf(ucipath, "network.lan%d.netmask", atoi(p)-1);
	}
	
	ret = do_uci_set(ucipath, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("network");
		if(ret)
		{
			return (-1);
		}
		//ret = 1; //means need to reboot for taking effect
		doDhcprestart(atoi(p));
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDSPt_DNSServers(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char *p = parseTemplate(path_name, ".Pool.");
	char ucipath[64] = {0};
	char optionvalue[256] = {0};
	char *ptr = NULL;
	char ip[2][32];

	if (p == NULL)
		return -1;

	if (atoi(p) == 1)
		strcpy(ucipath, "dhcp.lan.dhcp_option");
	else
		sprintf(ucipath, "dhcp.lan%d.dhcp_option", atoi(p)-1);
	ret = do_uci_get(ucipath, optionvalue);
	if(ret)
	{
		strcpy(value, "");
		ret = 0;
	}
	else
	{
		memset(ip, 0, sizeof(ip));
		if((ptr = strstr(optionvalue, "6,")) != NULL){
			strcpy(ip[0], ptr+2);
			if((ptr = strstr(ip[0], " ")) != NULL){
				*ptr = '\0';
			}
		}
		if((ptr = strstr(optionvalue, "44,")) != NULL){
			strcpy(ip[1], ptr+3);
			if((ptr = strstr(ip[1], " ")) != NULL){
				*ptr = '\0';
			}
		}
		if (strcmp(ip[0], "") != 0)
			strcpy(value, ip[0]);
		if (strcmp(ip[1], "") != 0){
			if (strcmp(value, "") == 0)
				strcpy(value, ip[1]);
			else
				sprintf(value, "%s,%s", value, ip[1]);
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDSPt_DNSServers(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char optionvalue[256] = {0};
	char optioninfo[4][64];
	char value2[256] = {0};
	char ucipath[64] = {0};
	int i = 0, found = 0;
	char *p = parseTemplate(path_name, ".Pool.");

	if (p == NULL)
		return -1;

	if (strcmp(value, "") == 0) //don't allow to set null
		return -1;

	if (atoi(p) == 1)
		strcpy(ucipath, "dhcp.lan.dhcp_option");
	else{
		char name[64] = {0};
		char tmpvalue[64] = {0};
		sprintf(ucipath, "dhcp.lan%d", atoi(p)-1);
		sprintf(name, "lan%d", atoi(p)-1);
		ret = do_uci_get(ucipath, tmpvalue);
		if(ret)
		{
			addUciTopNode("dhcp", name);
			ret = 0;
		}
		memset(ucipath, 0, sizeof(ucipath));
		sprintf(ucipath, "dhcp.lan%d.dhcp_option", atoi(p)-1);
	}

	ret = do_uci_get(ucipath, optionvalue);
	if(ret)
	{
		ret = do_uci_set(ucipath, value);
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit("dhcp");
			if(ret)
			{
				return (-1);
			}
			//ret = 1; //means need to reboot for taking effect
		}
	}
	else
	{
		memset(optioninfo, 0, sizeof(optioninfo));
		sscanf(optionvalue, "%s %s %s %s", optioninfo[0], optioninfo[1], optioninfo[2], optioninfo[3]);
		printf("############optioninfo[0]=%s, optioninfo[1]=%s, optioninfo[2]=%s, optioninfo[3]=%s\n", optioninfo[0], optioninfo[1], optioninfo[2], optioninfo[3]);
		for (i = 0; i < 4; i ++){
			if (strstr(optioninfo[i], "6,") != NULL){
				sprintf(optioninfo[i], "6,%s", value);
				found = 1;
				break;
			}
		}

		if (found == 0){
			for (i = 0; i < 4; i ++){
				if (strcmp(optioninfo[i], "") == 0){
					sprintf(optioninfo[i], "6,%s", value);
					break;
				}
			}
		}

		for (i = 0; i < 4; i ++){
			if (strcmp(value2, "") == 0 && strcmp(optioninfo[i], "") != 0)
				strcpy(value2, optioninfo[i]);
			else{
				if (strcmp(optioninfo[i], "") != 0)
					sprintf(value2, "%s %s", value2, optioninfo[i]);
			}
		}

		printf("#######value=%s\n", value2);
		ret = do_uci_set(ucipath, value2);
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit("dhcp");
			if(ret)
			{
				return (-1);
			}
			//ret = 1; //means need to reboot for taking effect
		}
	}

	doDhcprestart(atoi(p));
	tr_log(LOG_DEBUG,"set value [%s]",value2);
	return ret;
}
int get_DDSPt_DomainName(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char *p = parseTemplate(path_name, ".Pool.");
	char ucipath[64] = {0};
	char optionvalue[256] = {0};
	char *ptr = NULL;

	if (p == NULL)
		return -1;

	if (atoi(p) == 1)
		strcpy(ucipath, "dhcp.@dnsmasq[0].domain");
	else
		sprintf(ucipath, "dhcp.lan%d.dhcp_option", atoi(p)-1);
	ret = do_uci_get(ucipath, optionvalue);
	if(ret)
	{
		strcpy(value, "");
		ret = 0;
	}
	else
	{
		if (atoi(p) == 1)
			strcpy(value, optionvalue);
		else
		{
			if((ptr = strstr(optionvalue, "15,")) != NULL){
				strcpy(value, ptr+3);
				if((ptr = strstr(value, " ")) != NULL){
					*ptr = '\0';
				}
			}
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDSPt_DomainName(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char optionvalue[256] = {0};
	char optioninfo[4][64];
	char value2[256] = {0};
	char ucipath[64] = {0};
	int i = 0, found = 0;
	char *p = parseTemplate(path_name, ".Pool.");

	if (p == NULL)
		return -1;

	if (strcmp(value, "") == 0) //don't allow to set null
		return -1;

	if (atoi(p) == 1)
		strcpy(ucipath, "dhcp.@dnsmasq[0].domain");
	else{
		char name[64] = {0};
		char tmpvalue[64] = {0};
		sprintf(ucipath, "dhcp.lan%d", atoi(p)-1);
		sprintf(name, "lan%d", atoi(p)-1);
		ret = do_uci_get(ucipath, tmpvalue);
		if(ret)
		{
			addUciTopNode("dhcp", name);
			ret = 0;
		}
		memset(ucipath, 0, sizeof(ucipath));
		sprintf(ucipath, "dhcp.lan%d.dhcp_option", atoi(p)-1);
	}
	
	ret = do_uci_get(ucipath, optionvalue);
	if(ret)
	{
		ret = do_uci_set(ucipath, value);
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit("dhcp");
			if(ret)
			{
				return (-1);
			}
			//ret = 1; //means need to reboot for taking effect
		}
	}
	else
	{
		memset(optioninfo, 0, sizeof(optioninfo));
		sscanf(optionvalue, "%s %s %s %s", optioninfo[0], optioninfo[1], optioninfo[2], optioninfo[3]);
		printf("############optioninfo[0]=%s, optioninfo[1]=%s, optioninfo[2]=%s, optioninfo[3]=%s\n", optioninfo[0], optioninfo[1], optioninfo[2], optioninfo[3]);
		for (i = 0; i < 4; i ++){
			if (strstr(optioninfo[i], "15,") != NULL){
				sprintf(optioninfo[i], "15,%s", value);
				found = 1;
				break;
			}
		}

		if (found == 0){
			for (i = 0; i < 4; i ++){
				if (strcmp(optioninfo[i], "") == 0){
					sprintf(optioninfo[i], "15,%s", value);
					break;
				}
			}
		}

		if (atoi(p) == 1)
			strcpy(value2, value);
		else
		{
			for (i = 0; i < 4; i ++){
				if (strcmp(value2, "") == 0 && strcmp(optioninfo[i], "") != 0)
					strcpy(value2, optioninfo[i]);
				else{
					if (strcmp(optioninfo[i], "") != 0)
						sprintf(value2, "%s %s", value2, optioninfo[i]);
				}
			}
		}

		printf("#######value=%s\n", value2);
		ret = do_uci_set(ucipath, value2);
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit("dhcp");
			if(ret)
			{
				return (-1);
			}
			//ret = 1; //means need to reboot for taking effect
		}
	}

	doDhcprestart(atoi(p));
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDSPt_IPRouters(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char *p = parseTemplate(path_name, ".Pool.");
	char ucipath[64] = {0};
	char optionvalue[256] = {0};
	char *ptr = NULL;

	if (p == NULL)
		return -1;

	if (atoi(p) == 1)
		strcpy(ucipath, "dhcp.lan.dhcp_option");
	else
		sprintf(ucipath, "dhcp.lan%d.dhcp_option", atoi(p)-1);
	ret = do_uci_get(ucipath, optionvalue);
	if(ret)
	{
		strcpy(value, "");
		ret = 0;
	}
	else
	{
		if((ptr = strstr(optionvalue, "3,")) != NULL){
			strcpy(value, ptr+2);
			if((ptr = strstr(value, " ")) != NULL){
				*ptr = '\0';
			}
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDSPt_IPRouters(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char optionvalue[256] = {0};
	char optioninfo[4][64];
	char value2[256] = {0};
	char ucipath[64] = {0};
	int i = 0, found = 0;
	char *p = parseTemplate(path_name, ".Pool.");

	if (p == NULL)
		return -1;

	if (strcmp(value, "") == 0) //don't allow to set null
		return -1;

	if (atoi(p) == 1)
		strcpy(ucipath, "dhcp.lan.dhcp_option");
	else{
		char name[64] = {0};
		char tmpvalue[64] = {0};
		sprintf(ucipath, "dhcp.lan%d", atoi(p)-1);
		sprintf(name, "lan%d", atoi(p)-1);
		ret = do_uci_get(ucipath, tmpvalue);
		if(ret)
		{
			addUciTopNode("dhcp", name);
			ret = 0;
		}
		memset(ucipath, 0, sizeof(ucipath));
		sprintf(ucipath, "dhcp.lan%d.dhcp_option", atoi(p)-1);
	}
	
	ret = do_uci_get(ucipath, optionvalue);
	if(ret)
	{
		ret = do_uci_set(ucipath, value);
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit("dhcp");
			if(ret)
			{
				return (-1);
			}
			//ret = 1; //means need to reboot for taking effect
		}
	}
	else
	{
		memset(optioninfo, 0, sizeof(optioninfo));
		sscanf(optionvalue, "%s %s %s %s", optioninfo[0], optioninfo[1], optioninfo[2], optioninfo[3]);
		printf("############optioninfo[0]=%s, optioninfo[1]=%s, optioninfo[2]=%s, optioninfo[3]=%s\n", optioninfo[0], optioninfo[1], optioninfo[2], optioninfo[3]);
		for (i = 0; i < 4; i ++){
			if (strstr(optioninfo[i], "3,") != NULL){
				sprintf(optioninfo[i], "3,%s", value);
				found = 1;
				break;
			}
		}

		if (found == 0){
			for (i = 0; i < 4; i ++){
				if (strcmp(optioninfo[i], "") == 0){
					sprintf(optioninfo[i], "3,%s", value);
					break;
				}
			}
		}

		for (i = 0; i < 4; i ++){
			if (strcmp(value2, "") == 0 && strcmp(optioninfo[i], "") != 0)
				strcpy(value2, optioninfo[i]);
			else{
				if (strcmp(optioninfo[i], "") != 0)
					sprintf(value2, "%s %s", value2, optioninfo[i]);
			}
		}

		printf("#######value=%s\n", value2);
		ret = do_uci_set(ucipath, value2);
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit("dhcp");
			if(ret)
			{
				return (-1);
			}
			//ret = 1; //means need to reboot for taking effect
		}
	}

	doDhcprestart(atoi(p));
	tr_log(LOG_DEBUG,"set value [%s]",value2);
	return ret;
}
int get_DDSPt_LeaseTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char ucipath[64] = {0};
	char *p = parseTemplate(path_name, ".Pool.");

	if (p == NULL)
		return -1;

	if (atoi(p) == 1)
		strcpy(ucipath, "dhcp.lan.leasetime");
	else
		sprintf(ucipath, "dhcp.lan%d.leasetime", atoi(p)-1);
	
	ret = do_uci_get(ucipath, value);
	if(ret)
	{
		strcpy(value, "-1"); //default value
		ret = 0;
	}
	else
	{
		char *ptr = NULL;
		if ((ptr = strstr(value, "s")) != NULL){
			*ptr = '\0';
		}
		else if ((ptr = strstr(value, "h")) != NULL) {
			*ptr = '\0';
			sprintf(value, "%d", atoi(value)*60*60); //changed hours to seconds
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDSPt_LeaseTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char ucipath[64] = {0};
	char *p = parseTemplate(path_name, ".Pool.");

	if (p == NULL)
		return -1;

	if (strcmp(value, "") == 0) //don't allow to set null
		return -1;

	if (atoi(value) < -1)
		return -2;

	if (atoi(p) == 1)
		strcpy(ucipath, "dhcp.lan.leasetime");
	else{
		char name[64] = {0};
		char tmpvalue[64] = {0};
		sprintf(ucipath, "dhcp.lan%d", atoi(p)-1);
		sprintf(name, "lan%d", atoi(p)-1);
		ret = do_uci_get(ucipath, tmpvalue);
		if(ret)
		{
			addUciTopNode("dhcp", name);
			ret = 0;
		}
		memset(ucipath, 0, sizeof(ucipath));
		sprintf(ucipath, "dhcp.lan%d.leasetime", atoi(p)-1);
	}
	
	sprintf(value, "%ss", value); //add prefix char 's'
	ret = do_uci_set(ucipath, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("dhcp");
		if(ret)
		{
			return (-1);
		}
		//ret = 1; //means need to reboot for taking effect
		doDhcprestart(atoi(p));
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDSPt_StaticAddressNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDSPt_StaticAddressNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}*/
	char keyvalue[MAXMAPITEMS][128];
	int  number = 0;
	char *p = parseTemplate(path_name, ".Pool.");

	if (p == NULL)
		return -1;
	
	if (atoi(p) == 1){ //only support dhcp.lan
		number = get_DHCPv4_Server_Pool_1_StaticAddress_ip(keyvalue);
		sprintf(value, "%d", number);
	}
	else
		strcpy(value, "0");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDSPt_OptionNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	char tmp[32] = {0};
	
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	memset(tmp, 0, sizeof(tmp));
	ret = do_uci_get(DDSPt_OptionNumberOfEntries, tmp);
	if(ret)
	{
		strcpy(value, "0");
		ret = 0;
	}
	else
	{
		sprintf(value, "%d", atoi(tmp));
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDSPt_ClientNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDSPt_ClientNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}*/
	char *p = parseTemplate(path_name, ".Pool.");

	if (p == NULL)
		return -1;
	
	sprintf(value, "%d", get_DHCPv4_Server_Pool_Client_num(atoi(p)));

	//update node
	node_t node;
	char path_name_change[128] = {0};
	sprintf(path_name_change,"Device.DHCPv4.Server.Pool.%d.Client.",atoi(p));
	ret = lib_resolve_node( path_name_change, &node );
	tr_log(LOG_DEBUG,"ret[%d]",ret);
	if (ret == 0){
		lib_dynamic_init_children(node);
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDSPtSt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("dhcp.@dnsmasq[0].readethers", value);
	if(ret)
	{
		strcpy(value, "0");
		ret = 0;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDSPtSt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DDSPtSt_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't support set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDSPtSt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDSPtSt_Alias, value);
	if(ret)
	{
		return -1;
	}*/
	ret = 1; //getting from tr.xml
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDSPtSt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (!isalpha(value[0]))
		return -2;
	
	if (strlen(value) > 64)
		return -2;
	
	/*ret = do_uci_set(DDSPtSt_Alias, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//set to tr.xml
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDSPtSt_Chaddr(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDSPtSt_Chaddr, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".StaticAddress.");
	char ip[32] = {0};

	if (index != NULL){
		ret = lib_getvalue_mapfile_byinstance(DHCPv4ServerPool1StaticAddressMap, ip, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			get_DHCPv4_Server_Pool_1_StaticAddress_info(ip, value, "mac");
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDSPtSt_Chaddr(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DDSPtSt_Chaddr, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char *index = parseTemplate(path_name, ".StaticAddress.");
	char ip[32] = {0};

	if (strlen(value) > 17)
		return -2;
	
	if (index != NULL){
		ret = lib_getvalue_mapfile_byinstance(DHCPv4ServerPool1StaticAddressMap, ip, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			set_DHCPv4_Server_Pool_1_StaticAddress_info(ip, value, "mac");
			//ret = 1; //means need to reboot for taking effect
			char *p = parseTemplate(path_name, ".Pool.");
			if(p != NULL)
			{
				doDhcprestart(atoi(p));
			}
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDSPtSt_Yiaddr(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDSPtSt_Yiaddr, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".StaticAddress.");
	char ip[32] = {0};

	if (index != NULL){
		ret = lib_getvalue_mapfile_byinstance(DHCPv4ServerPool1StaticAddressMap, ip, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			strcpy(value, ip);
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDSPtSt_Yiaddr(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DDSPtSt_Yiaddr, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char *index = parseTemplate(path_name, ".StaticAddress.");
	char ip[32] = {0};

	if (strlen(value) > 15)
		return -2;
	
	if (index != NULL){
		ret = lib_getvalue_mapfile_byinstance(DHCPv4ServerPool1StaticAddressMap, ip, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			set_DHCPv4_Server_Pool_1_StaticAddress_info(ip, value, "ip");
			
			toSaveMapFile(DHCPv4ServerPool1StaticAddressMap, index, value); //update key info
			//ret = 1; //means need to reboot for taking effect
			char *p = parseTemplate(path_name, ".Pool.");
			if(p != NULL)
			{
				doDhcprestart(atoi(p));
			}
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDSPtOt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDSPtOt_Enable, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Option.");
	char key[256] = {0};
	char name[256] = {0};
	int number = 0;

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(RouterDHCPv4ServerOptionMap, key, atoi(index));
		if(ret)
		{
			return (-1);
		}

		number = get_Device_DHCPv4_Server_Option_num(key);
		if(number != 0)
		{
			sprintf(name, "trconf.Device_DHCPv4_Server_Pool_template_Option_%d.Enable", number);		
			ret = do_uci_get(name, value);
			if(ret)
			{
				strcpy(value, "0");
				ret = 0;
			}
		}
		else
		{
			return (-1);
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDSPtOt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DDSPtOt_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	char *index = parseTemplate(path_name, ".Option.");
	char key[256] = {0};
	char name[256] = {0};
	int number = 0;
	char tag[64] = {0};
	char optionvalue[64] = {0};
	char dhcpoptions[256] = {0};
	char tmp[256] = {0};
	
	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(RouterDHCPv4ServerOptionMap, key, atoi(index));
		if(ret)
		{
			return (-1);
		}
		number = get_Device_DHCPv4_Server_Option_num(key);
		if(number != 0)
		{
			sprintf(name, "trconf.Device_DHCPv4_Server_Pool_template_Option_%d.Enable", number);		
			ret = do_uci_set(name, value);
			if(ret)
			{
				return (-1);
			}
			else
			{
				ret = do_uci_commit(MS);
				if(ret)
				{
					return (-1);
				}
				//ret = 1; //means need to reboot for taking effect
				set_dhcp_option();		
				tr_log(LOG_DEBUG,"set value [%s]",value);
				char *p = parseTemplate(path_name, ".Pool.");
				if(p != NULL)
				{
					doDhcprestart(atoi(p));
				}
			}
		}
		else
		{
			return (-1);
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDSPtOt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDSPtOt_Alias, value);
	if(ret)
	{
		return -1;
	}*/
	ret = 1; //getting from tr.xml
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDSPtOt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (!isalpha(value[0]))
		return -2;
	
	if (strlen(value) > 64)
		return -2;
	
	/*ret = do_uci_set(DDSPtOt_Alias, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//set to tr.xml
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDSPtOt_Tag(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDSPtOt_Tag, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Option.");
	char key[256] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(RouterDHCPv4ServerOptionMap, key, atoi(index));
		if(ret)
		{
			return (-1);
		}

		strcpy(value, key);
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDSPtOt_Tag(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DDSPtOt_Tag, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char *index = parseTemplate(path_name, ".Option.");
	char key[256] = {0};
	char name[256] = {0};
	int number = 0;
	
	if(atoi(value) < 1 || atoi(value) > 254)
	{
		return -2;
	}

	if (index != NULL)
	{
		sprintf(name, "trconf.Device_DHCPv4_Server_Pool_template_Option_%d.Tag", atoi(index));		
		tr_log(LOG_DEBUG,"name[%s]", name);
		ret = do_uci_set(name,value);
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit(MS);
			if(ret)
			{
				return (-1);
			}
			//ret = 1; //means need to reboot for taking effect
		}
		toSaveMapFile(RouterDHCPv4ServerOptionMap, index, value); //update key info
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDSPtOt_Value(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDSPtOt_Value, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Option.");
	char key[256] = {0};
	char name[256] = {0};
	int number = 0;

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(RouterDHCPv4ServerOptionMap, key, atoi(index));
		if(ret)
		{
			return (-1);
		}

		number = get_Device_DHCPv4_Server_Option_num(key);
		if(number != 0)
		{
			sprintf(name, "trconf.Device_DHCPv4_Server_Pool_template_Option_%d.Value", number);		
			ret = do_uci_get(name, value);
			if(ret)
			{
				strcpy(value, "");
				ret = 0;
			}
		}
		else
		{
			return (-1);
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDSPtOt_Value(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DDSPtOt_Value, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char *index = parseTemplate(path_name, ".Option.");
	char key[256] = {0};
	char name[256] = {0};
	int number = 0;
	
	if(strlen(value) > 255)
	{
		return -2;
	}
	
	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(RouterDHCPv4ServerOptionMap, key, atoi(index));
		if(ret)
		{
			return (-1);
		}
		number = get_Device_DHCPv4_Server_Option_num(key);
		if(number != 0)
		{
			sprintf(name, "trconf.Device_DHCPv4_Server_Pool_template_Option_%d.Value", number);		
			ret = do_uci_set(name, value);
			if(ret)
			{
				return (-1);
			}
			else
			{
				ret = do_uci_commit(MS);
				if(ret)
				{
					return (-1);
				}
				//ret = 1; //means need to reboot for taking effect
				char *p = parseTemplate(path_name, ".Pool.");
				if(p != NULL)
				{
					doDhcprestart(atoi(p));
				}
			}
		}
		else
		{
			return (-1);
		}
	}
	else
	{
		return -1;
	}

	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDSPtCt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDSPtCt_Alias, value);
	if(ret)
	{
		return -1;
	}*/
	ret = 1; //getting from tr.xml
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDSPtCt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (!isalpha(value[0]))
		return -2;
	
	if (strlen(value) > 64)
		return -2;
		
	/*ret = do_uci_set(DDSPtCt_Alias, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//set to tr.xml
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDSPtCt_Chaddr(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDSPtCt_Chaddr, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Client.");
	char *p = parseTemplate(path_name, ".Pool.");
	char mac[32] = {0};
	char filename[64] = {0};

	if (index != NULL && p != NULL){

		sprintf(filename, "DHCPv4ServerPool%sClientMap.mapping", p);
		ret = lib_getvalue_mapfile_byinstance(filename, mac, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			strcpy(value, mac);
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDSPtCt_Active(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDSPtCt_Active, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Client.");
	char *p = parseTemplate(path_name, ".Pool.");
	char mac[32] = {0};
	char ip[32] = {0};
	char filename[64] = {0};

	if (index != NULL && p != NULL){
		sprintf(filename, "DHCPv4ServerPool%sClientMap.mapping", p);
		ret = lib_getvalue_mapfile_byinstance(filename, mac, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			get_DHCPv4_Server_Pool_Client_info(mac, ip, "IpAddress");
			if (ip[0] != '\0')
				check_Device_DHCP_Server_Pool_Client_address_active("inet", ip, value);
			else
				strcpy(value, "0");
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDSPtCt_IPv4AddressNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDSPtCt_IPv4AddressNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "1"); //always one ip address
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDSPtCt_OptionNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDSPtCt_OptionNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}*/
	char *ptr;
    char *tmpvalue;
    node_t tmpnode;
	char clientip[32] = {0};
	char newpath[256] = {0};
	char tmp[256] = {0};
	FILE *fp = NULL;
	char tmpname[32] = {0};
    char line[128] = {0};
    int i = 0;

	ptr = strstr(path_name, "OptionNumberOfEntries");
	if(ptr != NULL)
	{
		strncpy(tmp, path_name, ptr-path_name);
		sprintf(newpath, "%sIPv4Address.1.IPAddress", tmp);
		if( lib_resolve_node( newpath, &tmpnode ) == 0 ) 
		{
			ret = lib_get_value( tmpnode, &tmpvalue );
		
			if( ret != 0 ) 
			{
				tr_log( LOG_ERROR, "Get %s failed!", newpath );
			} 
			else 
			{
				strcpy(clientip, tmpvalue);
			}
		
			lib_destroy_value( tmpvalue );
		}
	}
	tr_log(LOG_DEBUG,"clientip: %s",clientip);
	memset(tmpname, 0, sizeof(tmpname));
	sprintf(tmpname, "/tmp/%s_optinos", clientip);

	if ((fp = fopen(tmpname,"r")) != NULL) 
	{
    	while (fgets(line, sizeof(line), fp))
		{
        	i++;
    	}
    	fclose(fp);
	}

	sprintf(value, "%d", i);
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDSPtCtIt_IPAddress(char * path_name, char *value)
{
	int ret = 0;
	/*tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDSPtCtIt_IPAddress, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Client.");
	char *p = parseTemplate(path_name, ".Pool.");
	char mac[32] = {0};
	char filename[64] = {0};

	if (index != NULL && p != NULL){
		sprintf(filename, "DHCPv4ServerPool%sClientMap.mapping", p);
		ret = lib_getvalue_mapfile_byinstance(filename, mac, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			get_DHCPv4_Server_Pool_Client_info(mac, value, "IpAddress");
		}
	}

	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDSPtCtIt_LeaseTimeRemaining(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDSPtCtIt_LeaseTimeRemaining, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Client.");
	char *p = parseTemplate(path_name, ".Pool.");
	char mac[32] = {0};
	char filename[64] = {0};
	char leasetime[128] = {0};
	long int leasetime2 = 0;
	char *ptr;

	if (index != NULL && p != NULL){
		sprintf(filename, "DHCPv4ServerPool%sClientMap.mapping", p);
		ret = lib_getvalue_mapfile_byinstance(filename, mac, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			get_DHCPv4_Server_Pool_Client_info(mac, leasetime, "LeaseTime");
			leasetime2 = strtol(leasetime, &ptr, 10);
			printf("=================leasetime=%ld\n", leasetime2);
			changedSecondsToDateTime(leasetime2, value);
		}
	}

	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDSPtCtOt_Tag(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDSPtCtOt_Tag, value);
	if(ret)
	{
		return -1;
	}*/
	char tag[32] = {0};
	char *ptr;
    char *tmpvalue;
    node_t tmpnode;
	char clientip[32] = {0};
	char newpath[256] = {0};
	char tmp[256] = {0};
	char tmpname[32] = {0};
	FILE *fp = NULL;
	char option[32] = {0};
	char mapfilename[256] = {0};
	char path[256] = {0};
	char *endptr;

	strcpy(path, path_name);
	ptr = strstr(path_name, "Option");
	if(ptr != NULL)
	{
		strncpy(tmp, path_name, ptr-path_name);
		sprintf(newpath, "%sIPv4Address.1.IPAddress", tmp);
		if( lib_resolve_node( newpath, &tmpnode ) == 0 ) 
		{
			ret = lib_get_value( tmpnode, &tmpvalue );
		
			if( ret != 0 ) 
			{
				tr_log( LOG_ERROR, "Get %s failed!", newpath );
				ret = 0;
			} 
			else 
			{
				strcpy(clientip, tmpvalue);
			}
		
			lib_destroy_value( tmpvalue );
		}
	}

	char *index = parseTemplate(path, ".Option.");

	if (index != NULL)
	{
		sprintf(mapfilename, "DHCPv4ServerPool1Client_%s_OptionsMap.mapping", clientip);
		ret = lib_getvalue_mapfile_byinstance(mapfilename, tag, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			sprintf(value, "%d", strtol(tag, &endptr, 16));			
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDSPtCtOt_Value(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDSPtCtOt_Value, value);
	if(ret)
	{
		return -1;
	}*/
	char tag[32] = {0};
	char *ptr;
    char *tmpvalue;
    node_t tmpnode;
	char clientip[32] = {0};
	char newpath[256] = {0};
	char tmp[256] = {0};
	char tmpname[32] = {0};
	FILE *fp = NULL;
	char buff[256] = {0};
	char option[32] = {0};
	char mapfilename[256] = {0};
	char path[256] = {0};

	strcpy(path, path_name);
	ptr = strstr(path_name, "Option");
	if(ptr != NULL)
	{
		strncpy(tmp, path_name, ptr-path_name);
		sprintf(newpath, "%sIPv4Address.1.IPAddress", tmp);
		if( lib_resolve_node( newpath, &tmpnode ) == 0 ) 
		{
			ret = lib_get_value( tmpnode, &tmpvalue );
		
			if( ret != 0 ) 
			{
				tr_log( LOG_ERROR, "Get %s failed!", newpath );
				ret = 0;
			} 
			else 
			{
				strcpy(clientip, tmpvalue);
			}
		
			lib_destroy_value( tmpvalue );
		}
	}
	
	char *index = parseTemplate(path, ".Option.");

	if (index != NULL)
	{
		sprintf(mapfilename, "DHCPv4ServerPool1Client_%s_OptionsMap.mapping", clientip);
		ret = lib_getvalue_mapfile_byinstance(mapfilename, tag, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			sprintf(tmpname, "/tmp/%s_optinos", clientip);
			fp = fopen(tmpname, "r");
			if(fp != NULL)
			{
				sprintf(option, "option:%s", tag);
				while(fgets(buff, sizeof(buff), fp))
				{
					if(strstr(buff, option) != NULL)
					{
						ptr = strchr(buff, ',');
						if(ptr != NULL)
						{
							strcpy(value, ptr+1);
						}
					}
				}
			}
			fclose(fp);
		}
	}
	ptr = strchr(value, '\n');
	if(ptr != NULL)
	{
		*ptr = '\0';
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDR_Enable_3486(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDR_Enable_3486, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDR_Enable_3486(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDR_Enable_3486, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDR_Status_3488(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDR_Status_3488, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDR_ForwardingNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDR_ForwardingNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDRFt_Enable_3490(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDRFt_Enable_3490, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDRFt_Enable_3490(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDRFt_Enable_3490, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDRFt_Status_3492(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDRFt_Status_3492, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDRFt_Alias_3493(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDRFt_Alias_3493, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDRFt_Alias_3493(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDRFt_Alias_3493, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDRFt_Order(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDRFt_Order, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDRFt_Order(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDRFt_Order, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDRFt_Interface_3497(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDRFt_Interface_3497, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDRFt_Interface_3497(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDRFt_Interface_3497, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDRFt_VendorClassID(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDRFt_VendorClassID, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDRFt_VendorClassID(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDRFt_VendorClassID, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDRFt_VendorClassIDExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDRFt_VendorClassIDExclude, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDRFt_VendorClassIDExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDRFt_VendorClassIDExclude, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDRFt_VendorClassIDMode(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDRFt_VendorClassIDMode, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDRFt_VendorClassIDMode(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDRFt_VendorClassIDMode, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDRFt_ClientID(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDRFt_ClientID, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDRFt_ClientID(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDRFt_ClientID, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDRFt_ClientIDExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDRFt_ClientIDExclude, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDRFt_ClientIDExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDRFt_ClientIDExclude, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDRFt_UserClassID(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDRFt_UserClassID, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDRFt_UserClassID(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDRFt_UserClassID, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDRFt_UserClassIDExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDRFt_UserClassIDExclude, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDRFt_UserClassIDExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDRFt_UserClassIDExclude, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDRFt_Chaddr(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDRFt_Chaddr, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDRFt_Chaddr(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDRFt_Chaddr, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDRFt_ChaddrMask(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDRFt_ChaddrMask, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDRFt_ChaddrMask(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDRFt_ChaddrMask, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDRFt_ChaddrExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDRFt_ChaddrExclude, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDRFt_ChaddrExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDRFt_ChaddrExclude, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDRFt_LocallyServed(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDRFt_LocallyServed, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDRFt_LocallyServed(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDRFt_LocallyServed, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDRFt_DHCPServerIPAddress(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDRFt_DHCPServerIPAddress, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDRFt_DHCPServerIPAddress(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDRFt_DHCPServerIPAddress, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DD_ClientNumberOfEntries_3523(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DD_ClientNumberOfEntries_3523, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "1"); //always 1
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DD_ClientNumberOfEntries_3523(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DD_ClientNumberOfEntries_3523, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDCt_Enable_3525(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("ipv6.@global[0].connection_type", value);
	if(ret)
	{
		strcpy(value, "0");
		ret = 0;
	}
	if (atoi(value) == 1) //means active mode
		strcpy(value, "1");
	else
		strcpy(value, "0");
	
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDCt_Enable_3525(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char dhcpc[32] = {0};

	ret = do_uci_get("ipv6.@global[0].connection_type", dhcpc);
	if(ret)
	{
		strcpy(dhcpc, "0");
		ret = 0;
	}
	if ((atoi(dhcpc) != 1 && atoi(value) == 1) || (atoi(dhcpc) == 1 && atoi(value) == 0)){
		ret = do_uci_set("ipv6.@global[0].connection_type", value);
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit("ipv6");
			if(ret)
			{
				return (-1);
			}
			//ret = 1; //means need to reboot for taking effect
			doRestartNetwork();
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDCt_Alias_3527(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDCt_Alias_3527, value);
	if(ret)
	{
		return -1;
	}*/
	ret = 1; //getting from tr.xml
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDCt_Alias_3527(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (!isalpha(value[0]))
		return -2;
	
	if (strlen(value) > 64)
		return -2;
	
	/*ret = do_uci_set(DDCt_Alias_3527, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//set to tr.xml
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDCt_Interface(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDCt_Interface, value);
	if(ret)
	{
		return -1;
	}*/
	if (checkEthWanUpDown())
		strcpy(value, IP_WAN_INTERFACE_PATH);
	else
		strcpy(value, "");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDCt_Interface(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DDCt_Interface, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDCt_Status_3531(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char ipv6_connection_type[32] = {0};

	ret = do_uci_get("ipv6.@global[0].connection_type", ipv6_connection_type);
	if(ret)
	{
		strcpy(ipv6_connection_type, "0");
		ret = 0;
	}

	if (atoi(ipv6_connection_type) == 1) //means dhcpv6c client mode
		strcpy(value, "Enabled");
	else
		strcpy(value, "Disabled");
	
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDCt_DUID(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDCt_DUID, value);
	if(ret)
	{
		return -1;
	}*/
	FILE *fp = NULL;
    char line[128] = {0};
    int i = 0, j = 0;
	char *ptr = NULL;
	
	if ((fp=popen("cat /tmp/dhcp6cDuidc","r")) != NULL){
		if (fgets(line,sizeof(line)-1,fp)){
			if ((ptr = strstr(line, "\n")) != NULL){
				*ptr = '\0';
				strcpy(value, line);
			}
		}
		else
			strcpy(value, "");
    	pclose(fp);
	}
	else
		strcpy(value, "");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDCt_RequestAddresses(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDCt_RequestAddresses, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "1"); //always enable
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDCt_RequestAddresses(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DDCt_RequestAddresses, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDCt_RequestPrefixes(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("ipv6.@native[0].dhcp_pd", value);
	if(ret)
	{
		strcpy(value, "1");
		ret = 0;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDCt_RequestPrefixes(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set("ipv6.@native[0].dhcp_pd", value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("ipv6");
		if(ret)
		{
			return (-1);
		}
		//ret = 1; //means need to reboot for taking effect
		doRestartNetwork();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDCt_RapidCommit(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDCt_RapidCommit, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "0"); //always 0, not support
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDCt_RapidCommit(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DDCt_RapidCommit, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDCt_Renew_3539(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDCt_Renew_3539, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "0"); //always 0
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDCt_Renew_3539(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DDCt_Renew_3539, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	if (atoi(value) == 1)
		system("killall -SIGUSR1 odhcp6c");
	else
		return -1;
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDCt_SuggestedT1(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDCt_SuggestedT1, value);
	if(ret)
	{
		return -1;
	}*/
	FILE *fp = NULL;
    char line[128] = {0};
    int i = 0, j = 0;
	char *ptr = NULL;
	
	if ((fp=popen("cat /tmp/dhcpv6cT1T2 | grep T1","r")) != NULL){
		if (fgets(line,sizeof(line)-1,fp)){
			sscanf(line, "%*s %*s %s", value);
			if ((ptr = strstr(value, "\n")) != NULL){
				*ptr = '\0';
			}
		}
		else
			strcpy(value, "-1");
    	pclose(fp);
	}
	else
		strcpy(value, "-1");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDCt_SuggestedT1(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DDCt_SuggestedT1, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDCt_SuggestedT2(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDCt_SuggestedT2, value);
	if(ret)
	{
		return -1;
	}*/
	FILE *fp = NULL;
    char line[128] = {0};
    int i = 0, j = 0;
	char *ptr = NULL;
	
	if ((fp=popen("cat /tmp/dhcpv6cT1T2 | grep T2","r")) != NULL){
		if (fgets(line,sizeof(line)-1,fp)){
			sscanf(line, "%*s %*s %s", value);
			if ((ptr = strstr(value, "\n")) != NULL){
				*ptr = '\0';
			}
		}
		else
			strcpy(value, "-1");
    	pclose(fp);
	}
	else
		strcpy(value, "-1");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDCt_SuggestedT2(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DDCt_SuggestedT2, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDCt_SupportedOptions(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDCt_SupportedOptions, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value,"3,5,21,22,23,24,31,56,64,67,82,83,94,95,96");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDCt_RequestedOptions(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("ipv6.@native[0].requestedoptions", value);
	if(ret)
	{
		strcpy(value, "");
		ret = 0;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDCt_RequestedOptions(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set("ipv6.@native[0].requestedoptions", value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("ipv6");
		if(ret)
		{
			return (-1);
		}
		//ret = 1; //means need to reboot for taking effect
		doRestartNetwork();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDCt_ServerNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDCt_ServerNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}*/
	char keyvalue[MAXMAPITEMS][256];
	int num = get_Device_DHCPv6ClientServer_Entry(keyvalue);
	sprintf(value, "%d", num);
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDCt_SentOptionNumberOfEntries_3549(char * path_name, char *value)
{
	int ret = 0;
	char tmp[256] = {0};
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDCt_SentOptionNumberOfEntries_3549, tmp);
	if(ret)
	{
		strcpy(value, "0");
		ret = 0;
	}
	else
	{
		sprintf(value, "%d", atoi(tmp));
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDCt_ReceivedOptionNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDCt_ReceivedOptionNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}*/
	char keyvalue[MAXMAPITEMS][256];
	int num = get_Device_DHCPv6ClientReceivedOption_Entry(keyvalue);
	sprintf(value, "%d", num);
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDCtSt_SourceAddress(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDCtSt_SourceAddress, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Server.");
	char addr[32] = {0};
	if (index != NULL){
		ret = lib_getvalue_mapfile_byinstance(DHCPv6ClientServerMap, addr, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			strcpy(value, addr);
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDCtSt_DUID(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDCtSt_DUID, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Server.");
	char addr[32] = {0};
	FILE *fp = NULL;
    char line[128] = {0};
	char *ptr = NULL;
	if (index != NULL){
		ret = lib_getvalue_mapfile_byinstance(DHCPv6ClientServerMap, addr, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			if ((fp=popen("cat /tmp/dhcp6cDuids","r")) != NULL){
				if (fgets(line,sizeof(line)-1,fp)){
					if ((ptr = strstr(line, "\n")) != NULL){
						*ptr = '\0';
						strcpy(value, line);
					}
				}
				else
					strcpy(value, "");
		    	pclose(fp);
			}
			else
				strcpy(value, "");
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDCtSt_InformationRefreshTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDCtSt_InformationRefreshTime, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "0001-01-01T00:00:00Z");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDCtSt_Enable_3554(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDCtSt_Enable_3554, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".SentOption.");
	char key[256] = {0};
	char name[256] = {0};
	int number = 0;

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(RouterDHCPv6clinetOptionMap, key, atoi(index));
		if(ret)
		{
			return (-1);
		}

		number = get_Device_DHCPv6_Clinet_SendOption_num(key);
		if(number != 0)
		{
			sprintf(name, "trconf.Device_DHCPv6_Clinet_template_SendOption_%d.Enable", number);		
			ret = do_uci_get(name, value);
			if(ret)
			{
				strcpy(value, "0");
				ret = 0;
			}
		}
		else
		{
			return (-1);
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDCtSt_Enable_3554(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DDCtSt_Enable_3554, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char *index = parseTemplate(path_name, ".SentOption.");
	char key[256] = {0};
	char name[256] = {0};
	int number = 0;
	char tag[64] = {0};
	char optionvalue[64] = {0};
	char dhcpoptions[256] = {0};
	char tmp[256] = {0};
	
	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(RouterDHCPv6clinetOptionMap, key, atoi(index));
		if(ret)
		{
			return (-1);
		}
		number = get_Device_DHCPv6_Clinet_SendOption_num(key);
		if(number != 0)
		{
			sprintf(name, "trconf.Device_DHCPv6_Clinet_template_SendOption_%d.Enable", number);		
			ret = do_uci_set(name, value);
			if(ret)
			{
				return (-1);
			}
			else
			{
				ret = do_uci_commit(MS);
				if(ret)
				{
					return (-1);
				}
				//ret = 1; //means need to reboot for taking effect
				set_dhcpv6_clinet_sentoption();		
				tr_log(LOG_DEBUG,"set value [%s]",value);
				doRestartNetwork();
			}
		}
		else
		{
			return (-1);
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDCtSt_Alias_3556(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDCtSt_Alias_3556, value);
	if(ret)
	{
		return -1;
	}*/
	ret = 1; //getting from tr.xml
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDCtSt_Alias_3556(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	if (!isalpha(value[0]))
		return -2;
	
	if (strlen(value) > 64)
		return -2;

	/*ret = do_uci_set(DDCtSt_Alias_3556, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//set to tr.xml
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDCtSt_Tag_3558(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDCtSt_Tag_3558, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".SentOption.");
	char key[256] = {0};
	
	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(RouterDHCPv6clinetOptionMap, key, atoi(index));
		if(ret)
		{
			return (-1);
		}
	
		strcpy(value, key);
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDCtSt_Tag_3558(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DDCtSt_Tag_3558, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char *index = parseTemplate(path_name, ".SentOption.");
	char key[256] = {0};
	char name[256] = {0};
	int number = 0;
	
	if(atoi(value) < 0 || atoi(value) > 65535)
	{
		return -2;
	}

	if (index != NULL)
	{
		sprintf(name, "trconf.Device_DHCPv6_Clinet_template_SendOption_%d.Tag", atoi(index));		
		tr_log(LOG_DEBUG,"name[%s]", name);
		ret = do_uci_set(name,value);
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit(MS);
			if(ret)
			{
				return (-1);
			}
			//ret = 1; //means need to reboot for taking effect
		}
		toSaveMapFile(RouterDHCPv6clinetOptionMap, index, value); //update key info
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDCtSt_Value_3560(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDCtSt_Value_3560, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".SentOption.");
	char key[256] = {0};
	char name[256] = {0};
	int number = 0;

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(RouterDHCPv6clinetOptionMap, key, atoi(index));
		if(ret)
		{
			return (-1);
		}

		number = get_Device_DHCPv6_Clinet_SendOption_num(key);
		if(number != 0)
		{
			sprintf(name, "trconf.Device_DHCPv6_Clinet_template_SendOption_%d.Value", number);		
			ret = do_uci_get(name, value);
			if(ret)
			{
				strcpy(value, "");
				ret = 0;
			}
		}
		else
		{
			return (-1);
		}
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDCtSt_Value_3560(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DDCtSt_Value_3560, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char *index = parseTemplate(path_name, ".SentOption.");
	char key[256] = {0};
	char name[256] = {0};
	int number = 0;
	
	if(strlen(value) > 255)
	{
		return -2;
	}
	
	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(RouterDHCPv6clinetOptionMap, key, atoi(index));
		if(ret)
		{
			return (-1);
		}
		number = get_Device_DHCPv6_Clinet_SendOption_num(key);
		if(number != 0)
		{
			sprintf(name, "trconf.Device_DHCPv6_Clinet_template_SendOption_%d.Value", number);		
			ret = do_uci_set(name, value);
			if(ret)
			{
				return (-1);
			}
			else
			{
				ret = do_uci_commit(MS);
				if(ret)
				{
					return (-1);
				}
			}
			//ret = 1; //means need to reboot for taking effect
			doRestartNetwork();
		}
		else
		{
			return (-1);
		}
	}
	else
	{
		return -1;
	}

	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDCtRt_Tag_3562(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char *endptr = NULL;

	/*ret = do_uci_get(DDCtRt_Tag_3562, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".ReceivedOption.");
	char tag[32] = {0};

	if (index != NULL){
		ret = lib_getvalue_mapfile_byinstance(DHCPv6ClientReceivedOptionMap, tag, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			tr_log(LOG_DEBUG,"path_name[%d]",strtol(tag, &endptr, 16));
			sprintf(value, "%d", strtol(tag, &endptr, 16));
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDCtRt_Value_3563(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDCtRt_Value_3563, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".ReceivedOption.");
	char tag[32] = {0};
	char tmpname[32] = {0};
	FILE *fp = NULL;
	char buff[256] = {0};
	char option[32] = {0};
	char *ptr = NULL;

	if (index != NULL){
		ret = lib_getvalue_mapfile_byinstance(DHCPv6ClientReceivedOptionMap, tag, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			sprintf(tmpname, "/tmp/%s_optinos_parse", "dhcpv6");
			fp = fopen(tmpname, "r");
			if(fp != NULL)
			{
				sprintf(option, "option:%s", tag);
				while(fgets(buff, sizeof(buff), fp))
				{
					if(strstr(buff, option) != NULL)
					{
						ptr = strchr(buff, ',');
						if(ptr != NULL)
						{
							strcpy(value, ptr+1);
						}
					}
				}
				fclose(fp);
			}
		}
	}
	if((ptr = strchr(value, '\n')) != NULL)
	{
		*ptr = '\0';
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDCtRt_Server(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDCtRt_Server, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "Device.DHCPv6.Client.1.Server.1");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDS_Enable_3565(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	//LAN and WAN with the same node for ipv6
	ret = do_uci_get("ipv6.@global[0].connection_type", value);
	if(ret)
	{
		strcpy(value, "0");
		ret = 0;
	}
	if (atoi(value) == 0)
		strcpy(value, "0");
	else
		strcpy(value, "1");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDS_Enable_3565(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DDS_Enable_3565, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	char dhcps[32] = {0};

	ret = do_uci_get("ipv6.@global[0].connection_type", dhcps);
	if(ret)
	{
		strcpy(dhcps, "0");
		ret = 0;
	}
	if ((atoi(dhcps) == 0 && atoi(value) == 1) || (atoi(dhcps) == 1 && atoi(value) == 0)){
		ret = do_uci_set("ipv6.@global[0].connection_type", value);
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit("ipv6");
			if(ret)
			{
				return (-1);
			}
			//ret = 1; //means need to reboot for taking effect
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDS_PoolNumberOfEntries_3567(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDS_PoolNumberOfEntries_3567, value);
	if(ret)
	{
		return -1;
	}*/
	char keyvalue[MAXMAPITEMS][256];
	int num = get_Device_DHCPv6ServerPool_Entry(keyvalue);
	sprintf(value, "%d", num);
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDSPt_Enable_3568(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDSPt_Enable_3568, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "1"); //always enable
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDSPt_Enable_3568(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DDSPt_Enable_3568, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDSPt_Status_3570(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (getDHCPv6ServerPoolStatus())
		strcpy(value, "Enabled");
	else
		strcpy(value, "Disabled");
	
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDSPt_Alias_3571(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDSPt_Alias_3571, value);
	if(ret)
	{
		return -1;
	}*/
	ret = 1; //getting from tr.xml
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDSPt_Alias_3571(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (!isalpha(value[0]))
		return -2;
	
	if (strlen(value) > 64)
		return -2;
	
	/*ret = do_uci_set(DDSPt_Alias_3571, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//set to tr.xml
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDSPt_Order_3573(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDSPt_Order_3573, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "1"); //always 1
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDSPt_Order_3573(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DDSPt_Order_3573, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDSPt_Interface_3575(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDSPt_Interface_3575, value);
	if(ret)
	{
		return -1;
	}*/
	sprintf(value, "Device.IP.Interface.%d", lan_map[0].num); //lan interface
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDSPt_Interface_3575(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DDSPt_Interface_3575, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDSPt_DUID(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDSPt_DUID, value);
	if(ret)
	{
		return -1;
	}*/
	FILE *fp = NULL;
    char line[128] = {0};
	char *ptr = NULL;
	int i = 0, j = 0;

	if((fp=fopen("/var/lib/dibbler/server-duid","r")) != NULL){
		fgets(line,sizeof(line)-1,fp);
		if (strcmp(line, "") != 0){
			if ((ptr = strstr(line, "\n")) != NULL)
				*ptr = '\0';
			//strcpy(value, line);
		}
		//else
		//	strcpy(value, "");

		for (i = 0, j = 0; line[i] != '\0'; i ++){
			if (line[i] != ':'){
				value[j] = line[i];
				j++;
			}
		}
		value[j] = '\0';
		fclose(fp);
	}
	else
		strcpy(value, "");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDSPt_DUID(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DDSPt_DUID, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDSPt_DUIDExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDSPt_DUIDExclude, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "0"); //always 0
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDSPt_DUIDExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DDSPt_DUIDExclude, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDSPt_VendorClassID_3581(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDSPt_VendorClassID_3581, value);
	if(ret)
	{
		return -1;
	}*/
	FILE *fp = NULL;
    char line[128] = {0};
	char *ptr = NULL;

	if((fp=popen("cat /etc/dibbler/server.conf | grep 'option vendor-spec'","r")) != NULL){
		fgets(line,sizeof(line)-1,fp);
		if (strcmp(line, "") != 0){
			sscanf(line, "%*s %*s %s", value);
			if ((ptr = strstr(value, "\n")) != NULL)
				*ptr = '\0';
		}
		else
			strcpy(value, "");
		pclose(fp);
	}
	else
		strcpy(value, "");

	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDSPt_VendorClassID_3581(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DDSPt_VendorClassID_3581, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDSPt_VendorClassIDExclude_3583(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDSPt_VendorClassIDExclude_3583, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "0"); //always 0
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDSPt_VendorClassIDExclude_3583(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DDSPt_VendorClassIDExclude_3583, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDSPt_UserClassID_3585(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDSPt_UserClassID_3585, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, ""); //always empty
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDSPt_UserClassID_3585(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DDSPt_UserClassID_3585, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDSPt_UserClassIDExclude_3587(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDSPt_UserClassIDExclude_3587, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "0"); //always 0
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDSPt_UserClassIDExclude_3587(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DDSPt_UserClassIDExclude_3587, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDSPt_SourceAddress(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDSPt_SourceAddress, value);
	if(ret)
	{
		return -1;
	}*/
	FILE *fp = NULL;
    char line[128] = {0};
	char *ptr = NULL;

	if((fp=popen("ifconfig br-lan | grep 'Scope:Link'","r")) != NULL){
		if (fgets(line,sizeof(line)-1,fp)){
			sscanf(line, "%*s %*s %s %*s", value);
			if ((ptr = strstr(value, "/")) != NULL)
				*ptr = '\0';
		}
		else
			strcpy(value, "");
		pclose(fp);
	}
	else
		strcpy(value, "");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDSPt_SourceAddress(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DDSPt_SourceAddress, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDSPt_SourceAddressMask(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDSPt_SourceAddressMask, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, ""); //always empty
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDSPt_SourceAddressMask(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DDSPt_SourceAddressMask, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDSPt_SourceAddressExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDSPt_SourceAddressExclude, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "0"); //always 0
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDSPt_SourceAddressExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DDSPt_SourceAddressExclude, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDSPt_IANAEnable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDSPt_IANAEnable, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "1"); //always enable
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDSPt_IANAEnable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DDSPt_IANAEnable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDSPt_IANAManualPrefixes(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDSPt_IANAManualPrefixes, value);
	if(ret)
	{
		return -1;
	}*/
	char type[32] = {0};

	ret = do_uci_get("ipv6.@global[0].connection_type", type);
	if(ret)
	{
		strcpy(type, "0");
		ret = 0;
	}

	if (atoi(type) == 5) //static mode
		sprintf(value, "Device.IP.Interface.%d.IPv6Prefix.1.Prefix", lan_map[0].num);
	else
		strcpy(value, "");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDSPt_IANAManualPrefixes(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DDSPt_IANAManualPrefixes, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDSPt_IANAPrefixes(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDSPt_IANAPrefixes, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, ""); //always null
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDSPt_IAPDEnable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("ipv6.@native[0].dhcp_pd", value);
	if(ret)
	{
		strcpy(value, "1");
		ret = 0;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDSPt_IAPDEnable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set("ipv6.@native[0].dhcp_pd", value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("ipv6");
		if(ret)
		{
			return (-1);
		}
		//ret = 1; //means need to reboot for taking effect
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDSPt_IAPDManualPrefixes(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDSPt_IAPDManualPrefixes, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, ""); //always null
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDSPt_IAPDManualPrefixes(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DDSPt_IAPDManualPrefixes, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDSPt_IAPDPrefixes(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDSPt_IAPDPrefixes, value);
	if(ret)
	{
		return -1;
	}*/
	char *p = NULL;
	char native[32] = {0};
	
	ret = do_uci_get("ipv6.@global[0].connection_type", native);
	if(ret)
	{
		return -1;
	}

	if (atoi(native) == 1) //native mode
		sprintf(value, "Device.IP.Interface.%d.IPv6Prefix.1.Prefix", lan_map[0].num);
	else
		strcpy(value, "");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDSPt_IAPDAddLength(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("ipv6.@native[0].prefix_len", value); //just getting active mode prefix len
	if(ret)
	{
		strcpy(value, "64"); //default value
		ret = 0;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDSPt_IAPDAddLength(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DDSPt_IAPDAddLength, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDSPt_ClientNumberOfEntries_3607(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDSPt_ClientNumberOfEntries_3607, value);
	if(ret)
	{
		return -1;
	}*/
	char keyvalue[MAXMAPITEMS][256];
	int num = get_Device_DHCPv6_Server_Pool_1_Client_address(keyvalue);

	sprintf(value, "%d", num);
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDSPt_OptionNumberOfEntries_3608(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDSPt_OptionNumberOfEntries_3608, value);
	if(ret)
	{
		return -1;
	}*/	
	FILE *fp = NULL;
    char line[128] = {0};
    int i = 0;
	
	if((fp=popen("cat /var/lib/dibbler/server-CfgMgr.xml | grep extraOption","r")) != NULL){
		while(fgets(line,sizeof(line)-1,fp)){
			i ++;
		}
    	pclose(fp);
	}
	sprintf(value, "%d", i);

	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDSPtCt_Alias_3609(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDSPtCt_Alias_3609, value);
	if(ret)
	{
		return -1;
	}*/
	ret = 1; //getting from tr.xml
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDSPtCt_Alias_3609(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (!isalpha(value[0]))
		return -2;
	
	if (strlen(value) > 64)
		return -2;
	
	/*ret = do_uci_set(DDSPtCt_Alias_3609, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//set to tr.xml
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDSPtCt_SourceAddress(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDSPtCt_SourceAddress, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Client.");
	char key[256] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(DHCPv6ServerPool1ClientMap, key, atoi(index));
		if(ret)
		{
			return (-1);
		}

		strcpy(value, key);
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDSPtCt_Active_3612(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDSPtCt_Active_3612, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Client.");
	char key[256] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(DHCPv6ServerPool1ClientMap, key, atoi(index));
		if(ret)
		{
			return (-1);
		}
	}
	else
	{
		return -1;
	}
	check_Device_DHCP_Server_Pool_Client_address_active("inet6", key, value);
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDSPtCt_IPv6AddressNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDSPtCt_IPv6AddressNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "1"); //always 1
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDSPtCt_IPv6PrefixNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDSPtCt_IPv6PrefixNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "1"); //always 1
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDSPtCt_OptionNumberOfEntries_3615(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDSPtCt_OptionNumberOfEntries_3615, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "0"); //don't get this value, so wirte 0
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDSPtCtIt_IPAddress_3616(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDSPtCtIt_IPAddress_3616, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Client.");
	char key[256] = {0};

	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(DHCPv6ServerPool1ClientMap, key, atoi(index));
		if(ret)
		{
			return (-1);
		}

		strcpy(value, key);
	}
	else
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDSPtCtIt_PreferredLifetime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDSPtCtIt_PreferredLifetime, value);
	if(ret)
	{
		return -1;
	}*/
	getDhcpv6IANAPreferredLifetime(value);
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDSPtCtIt_ValidLifetime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DDSPtCtIt_ValidLifetime, value);
	if(ret)
	{
		return -1;
	}*/
	getDhcpv6IANAValidLifetime(value);
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDSPtCtIt_Prefix(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("ipv6.@native[0].ipv6_prefix", value);
	if(ret)
	{
		strcpy(value, "");
		ret = 0;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDSPtCtIt_PreferredLifetime_3620(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("ipv6.@native[0].pd_preferred_lifetime", value);
	if(ret)
	{
		strcpy(value, "");
		ret = 0;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDSPtCtIt_ValidLifetime_3621(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("ipv6.@native[0].pd_valid_lifetime", value);
	if(ret)
	{
		strcpy(value, "");
		ret = 0;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDSPtCtOt_Tag_3622(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDSPtCtOt_Tag_3622, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDSPtCtOt_Value_3623(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDSPtCtOt_Value_3623, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDSPtOt_Enable_3624(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDSPtOt_Enable_3624, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDSPtOt_Alias_3625(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDSPtOt_Alias_3625, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDSPtOt_Tag_3626(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDSPtOt_Tag_3626, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDSPtOt_Value_3627(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDSPtOt_Value_3627, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDSPtOt_PassthroughClient(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDSPtOt_PassthroughClient, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DI_SupplicantNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DI_SupplicantNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "1"); //only WAN dhcp and static modes support 802.1x auth
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DISt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DISt_Enable, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "1"); //always enable
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DISt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DISt_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DISt_Status(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char wanproto[32] = {0};
	char md5auth[32] = {0};
	
	getWanMode(wanproto);
	if (strcmp(wanproto, "dhcp") == 0 || strcmp(wanproto, "static") == 0){
		ret = do_uci_get("network.wan.8021xmd5", md5auth);
		if(ret)
		{
			return -1;
		}
		if (atoi(md5auth) == 1)
			strcpy(value, "Enabled");
		else
			strcpy(value, "Disabled");
	}
	else
		strcpy(value, "Disabled");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DISt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DISt_Alias, value);
	if(ret)
	{
		return -1;
	}*/
	ret = 1; //getting from tr.xml
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DISt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (!isalpha(value[0]))
		return -2;
	
	if (strlen(value) > 64)
		return -2;
	
	/*ret = do_uci_set(DISt_Alias, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//set to tr.xml
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DISt_Interface(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DISt_Interface, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, ETHERNET_WAN_LINK_PATH); //this value must the path name
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DISt_Interface(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DISt_Interface, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DISt_PAEState(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DISt_PAEState, value);
	if(ret)
	{
		return -1;
	}*/
	a_infinfo wanStatus;
	char md5auth[32] = {0};

	memset(&wanStatus, 0, sizeof(wanStatus));
	getInterfaceInfo("wan", &wanStatus);
	if (wanStatus.status == 1){
		if ((strcmp(wanStatus.proto, "dhcp") == 0 || strcmp(wanStatus.proto, "static") == 0) && (strcmp(wanStatus.ipv4_address, "") != 0)){
			ret = do_uci_get("network.wan.8021xmd5", md5auth);
			if(ret)
			{
				return -1;
			}
			if (atoi(md5auth) == 1)
				strcpy(value, "Authenticated");
			else
				strcpy(value, "Disconnected");
		}
		else
			strcpy(value, "Disconnected");
	}
	else
		strcpy(value, "Disconnected");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DISt_EAPIdentity(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DISt_EAPIdentity, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DISt_EAPIdentity(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DISt_EAPIdentity, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DISt_MaxStart(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DISt_MaxStart, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DISt_MaxStart(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DISt_MaxStart, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DISt_StartPeriod(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DISt_StartPeriod, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DISt_StartPeriod(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DISt_StartPeriod, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DISt_HeldPeriod(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DISt_HeldPeriod, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DISt_HeldPeriod(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DISt_HeldPeriod, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DISt_AuthPeriod(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DISt_AuthPeriod, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DISt_AuthPeriod(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DISt_AuthPeriod, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DISt_AuthenticationCapabilities(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DISt_AuthenticationCapabilities, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "EAP-MD5"); //only support md5 auth
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DISt_StartFailurePolicy(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DISt_StartFailurePolicy, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DISt_StartFailurePolicy(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DISt_StartFailurePolicy, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DISt_AuthenticationSuccessPolicy(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DISt_AuthenticationSuccessPolicy, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DISt_AuthenticationSuccessPolicy(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DISt_AuthenticationSuccessPolicy, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DISt_Reset(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DISt_Reset, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DISt_Reset(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DISt_Reset, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DISt_Disconnect(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DISt_Disconnect, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DISt_Disconnect(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DISt_Disconnect, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIStS_ReceivedFrames(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIStS_ReceivedFrames, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIStS_TransmittedFrames(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIStS_TransmittedFrames, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIStS_TransmittedStartFrames(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIStS_TransmittedStartFrames, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIStS_TransmittedLogoffFrames(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIStS_TransmittedLogoffFrames, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIStS_TransmittedResponseIdFrames(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIStS_TransmittedResponseIdFrames, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIStS_TransmittedResponseFrames(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIStS_TransmittedResponseFrames, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIStS_ReceivedRequestIdFrames(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIStS_ReceivedRequestIdFrames, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIStS_ReceivedRequestFrames(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIStS_ReceivedRequestFrames, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIStS_ReceivedInvalidFrames(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIStS_ReceivedInvalidFrames, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIStS_ReceivedLengthErrorFrames(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIStS_ReceivedLengthErrorFrames, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIStS_LastFrameVersion(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIStS_LastFrameVersion, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIStS_LastFrameSourceMACAddress(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIStS_LastFrameSourceMACAddress, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIStE_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIStE_Enable, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIStE_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIStE_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIStE_SharedSecret(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIStE_SharedSecret, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIStE_SharedSecret(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIStE_SharedSecret, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIStE_Enable_3673(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIStE_Enable_3673, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIStE_Enable_3673(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIStE_Enable_3673, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIStE_MutualAuthenticationEnable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIStE_MutualAuthenticationEnable, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIStE_MutualAuthenticationEnable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIStE_MutualAuthenticationEnable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DU_UserNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DU_UserNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "3");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUUt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUUt_Alias, value);
	if(ret)
	{
		return -1;
	}*/
	ret = 1; //getting from tr.xml
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DUUt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (!isalpha(value[0]))
		return -2;
	
	if (strlen(value) > 64)
		return -2;
	
	/*ret = do_uci_set(DUUt_Alias, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//set to tr.xml
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DUUt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUUt_Enable, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "1"); //always 1
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DUUt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	//don't support set
	/*ret = do_uci_set(DUUt_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DUUt_RemoteAccessCapable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char buff[32] = {0};
	char *p = parseTemplate(path_name, ".User.");

	if (p == NULL)
		return -1;

	if(atoi(p) == 1)
	{
		ret = do_uci_get("pwd.technician.remote_web", value);
		if(ret)
		{
			strcpy(value, "0"); 
			ret = 0;
		}
	}
	else if(atoi(p) == 2)
	{
		ret = do_uci_get("pwd.subscriber.remote_web", value);
		if(ret)
		{
			strcpy(value, "0");
			ret = 0;
		}
	}
	else if(atoi(p) == 3)
	{
		ret = do_uci_get("pwd.operator.remote_web", value);
		if(ret)
		{
			strcpy(value, "0");
			ret = 0;
		}
	}
	else
	{
		return -1;
	}
	
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DUUt_RemoteAccessCapable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char buff[32] = {0};
	int adminpermission = 0;
	int rootpermission = 0;
	char *p = parseTemplate(path_name, ".User.");

	if (p == NULL)
		return -1;

	if (atoi(p) == 1)
	{
		ret = do_uci_set("pwd.technician.remote_web", value);
	}
	else if(atoi(p) == 2)
	{
		ret = do_uci_set("pwd.subscriber.remote_web", value);
	}
	else if(atoi(p) == 3)
	{
		ret = do_uci_set("pwd.operator.remote_web", value);
	}
	else
	{
		return (-1);
	}

	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("pwd");
		if(ret)
		{
			return (-1);
		}
	}
	
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DUUt_Username(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	char *p = parseTemplate(path_name, ".User.");

	if (p == NULL)
		return -1;

	if(atoi(p) == 1)
	{
		ret = do_uci_get("pwd.technician.name", value);
	}
	else if(atoi(p) == 2)
	{
		ret = do_uci_get("pwd.subscriber.name", value);
	}
	else if(atoi(p) == 3)
	{
		ret = do_uci_get("pwd.operator.name", value);
	}
	else
	{
		return -1;
	}
	
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DUUt_Username(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	//don't allow to change username
	/*ret = do_uci_set("pwd.super_user.name", value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("pwd");
		if(ret)
		{
			return (-1);
		}
	}*/
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DUUt_Password(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
#if 0
	char *p = parseTemplate(path_name, ".User.");

	if (p == NULL)
		return -1;

	if(atoi(p) == 1)
	{
		ret = do_uci_get("pwd.super_user.passwd", value);
	}
	else if(atoi(p) == 2)
	{
		ret = do_uci_get("pwd.manager.passwd", value);
	}
	else
	{
		return -1;
	}

	if(ret)
	{
		return -1;
	}
#else
	strcpy(value, ""); //When read, this parameter returns an empty string
#endif
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DUUt_Password(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char *p = parseTemplate(path_name, ".User.");

	if (p == NULL)
		return -1;

	if (strlen(value) < 4 || strlen(value) > 16)
		return -2;

	if(atoi(p) == 1)
	{
		ret = do_uci_set("pwd.technician.normal_passwd", value);
		ret = do_uci_set("pwd.technician.ssh_passwd", value);
	}
	else if(atoi(p) == 2)
	{
		ret = do_uci_set("pwd.subscriber.normal_passwd", value);
		ret = do_uci_set("pwd.subscriber.ssh_passwd", value);
	}
	else if(atoi(p) == 3)
	{
		ret = do_uci_set("pwd.operator.normal_passwd", value);
		ret = do_uci_set("pwd.operator.ssh_passwd", value);
	}
	else
	{
		return -1;
	}

	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("pwd");
		if(ret)
		{
			return (-1);
		}
		doSSHFuncs(0);
		/*system("/etc/init.d/lighttpd restart &");
		system("/etc/init.d/dropbear restart &");*/
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DUUt_X_CHARTER_COM_RemoteCLAccessCapable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char *p = parseTemplate(path_name, ".User.");

	if (p == NULL)
		return -1;

	if(atoi(p) == 1)
	{
		ret = do_uci_get("pwd.technician.remote_ssh", value);
		if(ret)
		{
			strcpy(value, "0"); 
			ret = 0;
		}
	}
	else if(atoi(p) == 2)
	{
		ret = do_uci_get("pwd.subscriber.remote_ssh", value);
		if(ret)
		{
			strcpy(value, "0");
			ret = 0;
		}
	}
	else if(atoi(p) == 3)
	{
		ret = do_uci_get("pwd.operator.remote_ssh", value);
		if(ret)
		{
			strcpy(value, "0");
			ret = 0;
		}
	}
	else
	{
		return -1;
	}
	
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DUUt_X_CHARTER_COM_RemoteCLAccessCapable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char *p = parseTemplate(path_name, ".User.");

	if (p == NULL)
		return -1;

	if (atoi(p) == 1)
	{
		ret = do_uci_set("pwd.technician.remote_ssh", value);
	}
	else if(atoi(p) == 2)
	{
		ret = do_uci_set("pwd.subscriber.remote_ssh", value);
	}
	else if(atoi(p) == 3)
	{
		ret = do_uci_set("pwd.operator.remote_ssh", value);
	}
	else
	{
		return (-1);
	}
	
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("pwd");
		if(ret)
		{
			return (-1);
		}
		doSSHFuncs(0);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DUUt_X_CHARTER_COM_LocalCLAccessCapable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char *p = parseTemplate(path_name, ".User.");

	if (p == NULL)
		return -1;

	if(atoi(p) == 1)
	{
		ret = do_uci_get("pwd.technician.local_ssh", value);
		if(ret)
		{
			strcpy(value, "0"); 
			ret = 0;
		}
	}
	else if(atoi(p) == 2)
	{
		ret = do_uci_get("pwd.subscriber.local_ssh", value);
		if(ret)
		{
			strcpy(value, "0");
			ret = 0;
		}
	}
	else if(atoi(p) == 3)
	{
		ret = do_uci_get("pwd.operator.local_ssh", value);
		if(ret)
		{
			strcpy(value, "0");
			ret = 0;
		}
	}
	else
	{
		return -1;
	}
	
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DUUt_X_CHARTER_COM_LocalCLAccessCapable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char *p = parseTemplate(path_name, ".User.");

	if (p == NULL)
		return -1;

	if (atoi(p) == 1)
	{
		ret = do_uci_set("pwd.technician.local_ssh", value);
	}
	else if(atoi(p) == 2)
	{
		ret = do_uci_set("pwd.subscriber.local_ssh", value);
	}
	else if(atoi(p) == 3)
	{
		ret = do_uci_set("pwd.operator.local_ssh", value);
	}
	else
	{
		return (-1);
	}
	
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("pwd");
		if(ret)
		{
			return (-1);
		}
		doSSHFuncs(0);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DUUt_X_CHARTER_COM_Password(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
#if 0
	char *p = parseTemplate(path_name, ".User.");

	if (p == NULL)
		return -1;

	if(atoi(p) == 1)
	{
		ret = do_uci_get("pwd.technician.normal_passwd", value);
	}
	else if(atoi(p) == 2)
	{
		ret = do_uci_get("pwd.subscriber.normal_passwd", value);
	}
	else if(atoi(p) == 3)
	{
		ret = do_uci_get("pwd.operator.normal_passwd", value);
	}
	else
	{
		return -1;
	}

	if(ret)
	{
		return -1;
	}
#else
	strcpy(value, ""); //When read, this parameter returns an empty string
#endif
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DUUt_X_CHARTER_COM_Password(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char *p = parseTemplate(path_name, ".User.");

	if (p == NULL)
		return -1;

	if (strlen(value) < 4 || strlen(value) > 16)
		return -2;

	if(atoi(p) == 1)
	{
		ret = do_uci_set("pwd.technician.normal_passwd", value);
		ret = do_uci_set("pwd.technician.ssh_passwd", value);
	}
	else if(atoi(p) == 2)
	{
		ret = do_uci_set("pwd.subscriber.normal_passwd", value);
		ret = do_uci_set("pwd.subscriber.ssh_passwd", value);
	}
	else if(atoi(p) == 3)
	{
		ret = do_uci_set("pwd.operator.normal_passwd", value);
		ret = do_uci_set("pwd.operator.ssh_passwd", value);
	}
	else
	{
		return -1;
	}

	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("pwd");
		if(ret)
		{
			return (-1);
		}
		doSSHFuncs(0);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DUUt_Language(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUUt_Language, value);
	if(ret)
	{
		return -1;
	}*/
	ret = do_uci_get("system.system.languages", value);
	if(ret)
	{
		strcpy(value, "en"); //default value
		ret = 0;
	}

	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DUUt_Language(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	//don't support to change language
	/*ret = do_uci_set(DUUt_Language, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/

	if((strcmp(value, "en") != 0) && (strcmp(value, "zh-cn") != 0) && (strcmp(value, "zh-tw") != 0))
	{
		return (-2);
	}
	
	ret = do_uci_set("system.system.languages", value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("system");
		if(ret)
		{
			return (-1);
		}
	}	
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DS_SmartCardReaderNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DS_SmartCardReaderNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DSSt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DSSt_Alias, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DSSt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DSSt_Alias, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DSSt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DSSt_Enable, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DSSt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DSSt_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DSSt_Status(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DSSt_Status, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DSSt_Name(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DSSt_Name, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DSSt_Reset(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DSSt_Reset, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DSSt_Reset(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DSSt_Reset, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DSSt_ResetTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DSSt_ResetTime, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DSSt_DecryptionFailedCounter(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DSSt_DecryptionFailedCounter, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DSSt_DecryptionFailedNoKeyCounter(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DSSt_DecryptionFailedNoKeyCounter, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DSStS_Status(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DSStS_Status, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DSStS_Type(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DSStS_Type, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DSStS_Application(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DSStS_Application, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DSStS_SerialNumber(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DSStS_SerialNumber, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DSStS_ATR(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DSStS_ATR, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUD_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("upnpd.config.enable_upnp", value);
	if(ret)
	{
		strcpy(value, "0");
		ret = 0;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DUD_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set("upnpd.config.enable_upnp", value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("upnpd");
		if(ret)
		{
			return (-1);
		}
		system("/etc/init.d/miniupnpd restart &");
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DUD_UPnPMediaServer(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("minidlna.config.enabled", value);
	if(ret)
	{
		strcpy(value, "0");
		ret = 0;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DUD_UPnPMediaServer(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set("minidlna.config.enabled", value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("minidlna");
		if(ret)
		{
			return (-1);
		}
		system("/etc/init.d/minidlna restart &");
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DUD_UPnPMediaRenderer(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUD_UPnPMediaRenderer, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "0"); //always 0
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DUD_UPnPMediaRenderer(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DUD_UPnPMediaRenderer, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DUD_UPnPWLANAccessPoint(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUD_UPnPWLANAccessPoint, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "0"); //always 0
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DUD_UPnPWLANAccessPoint(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DUD_UPnPWLANAccessPoint, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DUD_UPnPQoSDevice(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUD_UPnPQoSDevice, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "0"); //always 0
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DUD_UPnPQoSDevice(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DUD_UPnPQoSDevice, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DUD_UPnPQoSPolicyHolder(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUD_UPnPQoSPolicyHolder, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "0"); //always 0
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DUD_UPnPQoSPolicyHolder(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DUD_UPnPQoSPolicyHolder, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DUD_UPnPIGD(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("upnpd.config.enable_upnp", value);
	if(ret)
	{
		strcpy(value, "0");
		ret = 0;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DUD_UPnPIGD(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set("upnpd.config.enable_upnp", value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("upnpd");
		if(ret)
		{
			return (-1);
		}
		system("/etc/init.d/miniupnpd restart &");
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DUD_UPnPDMBasicMgmt(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUD_UPnPDMBasicMgmt, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "0"); //always 0
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DUD_UPnPDMBasicMgmt(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DUD_UPnPDMBasicMgmt, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DUD_UPnPDMConfigurationMgmt(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUD_UPnPDMConfigurationMgmt, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "0"); //always 0
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DUD_UPnPDMConfigurationMgmt(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DUD_UPnPDMConfigurationMgmt, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DUD_UPnPDMSoftwareMgmt(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUD_UPnPDMSoftwareMgmt, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "0"); //always 0
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DUD_UPnPDMSoftwareMgmt(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DUD_UPnPDMSoftwareMgmt, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DUDC_UPnPArchitecture(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUDC_UPnPArchitecture, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "1"); //support upnp 1.1
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUDC_UPnPArchitectureMinorVer(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUDC_UPnPArchitectureMinorVer, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "1"); //support upnp 1.1
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUDC_UPnPMediaServer(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUDC_UPnPMediaServer, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "1"); //support upnp 1.1
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUDC_UPnPMediaRenderer(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUDC_UPnPMediaRenderer, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "0"); //always 0
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUDC_UPnPWLANAccessPoint(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUDC_UPnPWLANAccessPoint, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "0"); //always 0
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUDC_UPnPBasicDevice(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUDC_UPnPBasicDevice, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "0"); //always 0
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUDC_UPnPQoSDevice(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUDC_UPnPQoSDevice, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "0"); //always 0
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUDC_UPnPQoSPolicyHolder(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUDC_UPnPQoSPolicyHolder, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "0"); //always 0
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUDC_UPnPIGD(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUDC_UPnPIGD, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "1"); //support upnp 1.1
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUDC_UPnPDMBasicMgmt(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUDC_UPnPDMBasicMgmt, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "0"); //always 0
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUDC_UPnPDMConfigurationMgmt(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUDC_UPnPDMConfigurationMgmt, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "0"); //always 0
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUDC_UPnPDMSoftwareMgmt(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUDC_UPnPDMSoftwareMgmt, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "0"); //always 0
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUD_RootDeviceNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUD_RootDeviceNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}*/
	FILE *fp = NULL;
	char buff[128] = {0};
	char *p= NULL;
	
	ret = upnpdevice();
	if(ret)
	{
		return -1;
	}
	
	fp = fopen("/tmp/upnpdevice", "r");
	if(fp != NULL)
	{
		while(fgets(buff, sizeof(buff), fp))
		{
			if(strstr(buff, "RootDeviceNumberOfEntries") != NULL)
			{
				p = strchr(buff, '=');
				if(p != NULL)
				{
					strcpy(value, p+1);
				}
			}
		}
		fclose(fp);
	}

	if (strcmp(value, "") == 0)
		strcpy(value, "0");
	
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUD_DeviceNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUD_DeviceNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}*/
	FILE *fp = NULL;
	char buff[128] = {0};
	char *p= NULL;
	
	ret = upnpdevice();
	if(ret)
	{
		return -1;
	}
	
	fp = fopen("/tmp/upnpdevice", "r");
	if(fp != NULL)
	{
		while(fgets(buff, sizeof(buff), fp))
		{
			if(strstr(buff, "DeviceNumberOfEntries") != NULL)
			{
				p = strchr(buff, '=');
				if(p != NULL)
				{
					strcpy(value, p+1);
				}
			}
		}
		fclose(fp);
	}

	if (strcmp(value, "") == 0)
		strcpy(value, "0");
	
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUD_ServiceNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUD_ServiceNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}*/
	FILE *fp = NULL;
	char buff[128];
	char *p= NULL;
	
	ret = upnpservice();
	if(ret)
	{
		return -1;
	}
	
	fp = fopen("/tmp/upnpservice", "r");
	if(fp != NULL)
	{
		while(fgets(buff, sizeof(buff), fp))
		{
			if(strstr(buff, "ServiceNumberOfEntries") != NULL)
			{
				p = strchr(buff, '=');
				if(p != NULL)
				{
					strcpy(value, p+1);
				}
			}
		}
		fclose(fp);
	}

	if (strcmp(value, "") == 0)
		strcpy(value, "0");
	
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUDRt_Status(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUDRt_Status, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "LeaseActive");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUDRt_UUID(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUDRt_UUID, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".RootDevice.");
	char *p = NULL;
	char buff[256] = {0};
	
	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(RootDeviceMap, buff, atoi(index));
		tr_log(LOG_DEBUG,"buff[%s]",buff);

		if(ret)
		{
			return (-1);
		}
		else
		{
			p = strcasestr(buff, "uuid");
			if(p != NULL)
			{
				strncpy(value, p+strlen("uuid:"), strlen("63041253-1019-2006-1228-78542ede8d7a"));
			}
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUDRt_USN(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUDRt_USN, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".RootDevice.");
	char *p = NULL;
	char buff[256] = {0};
	
	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(RootDeviceMap, buff, atoi(index));
		tr_log(LOG_DEBUG,"buff[%s]",buff);
		if(ret)
		{
			return (-1);
		}
		else
		{
			strcpy(value, buff);
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUDRt_LeaseTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUDRt_LeaseTime, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".RootDevice.");
	char *p = NULL;
	char buff[256] = {0};
	FILE *fp = NULL;
	int i = 0;
	
	if (index != NULL)
	{
		fp = fopen("/tmp/NOTIFY", "r");
		
		if(fp != NULL)
		{
			while(fgets(buff, sizeof(buff), fp))
			{
				if(strcasestr(buff, "CACHE-CONTROL") != NULL)
				{
					i++;
					if(i == atoi(index))
					{
						p = strchr(buff, '=');
						if(p != NULL)
						{
							strcpy(value, p+1);
						}
					}
				}
			}
			fclose(fp);
		}
	}

	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUDRt_Location(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUDRt_Location, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".RootDevice.");
	char *p = NULL;
	char *q = NULL;
	char buff[256] = {0};
	FILE *fp = NULL;
	int i = 0;
	
	if (index != NULL)
	{
		fp = fopen("/tmp/NOTIFY", "r");
		
		if(fp != NULL)
		{
			while(fgets(buff, sizeof(buff), fp))
			{
				if(strcasestr(buff, "LOCATION") != NULL)
				{
					i++;
					if(i == atoi(index))
					{
						p = strcasestr(buff, "http");
						if(p != NULL)
						{
							strcpy(value, p);
						}
					}
				}
			}
			fclose(fp);
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUDRt_Server(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUDRt_Server, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".RootDevice.");
	char *p = NULL;
	char buff[256] = {0};
	FILE *fp = NULL;
	int i = 0;
	
	if (index != NULL)
	{
		fp = fopen("/tmp/NOTIFY", "r");
		
		if(fp != NULL)
		{
			while(fgets(buff, sizeof(buff), fp))
			{
				if(strcasestr(buff, "SERVER") != NULL)
				{
					i++;
					if(i == atoi(index))
					{
						p = strchr(buff, ':');
						if(p != NULL)
						{
							strcpy(value, p+1);
						}
					}
				}
			}
			fclose(fp);
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUDRt_Host(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUDRt_Host, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".RootDevice.");
	char *p = NULL;
	char buff[256] = {0};
	FILE *fp = NULL;
	int i = 0;
	
	if (index != NULL)
	{
		fp = fopen("/tmp/NOTIFY", "r");
		
		if(fp != NULL)
		{
			while(fgets(buff, sizeof(buff), fp))
			{
				if(strcasestr(buff, "HOST") != NULL)
				{
					i++;
					if(i == atoi(index))
					{
						p = strchr(buff, ':');
						if(p != NULL)
						{
							strcpy(value, p+1);
						}
					}
				}
			}
			fclose(fp);
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUDRt_LastUpdate(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUDRt_LastUpdate, value);
	/*if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".RootDevice.");
	char *p = NULL;
	char buff[256] = {0};
	FILE *fp = NULL;
	int i = 0;
	
	if (index != NULL)
	{
		fp = fopen("/tmp/NOTIFY", "r");
		
		if(fp != NULL)
		{
			while(fgets(buff, sizeof(buff), fp))
			{
				if(strcasestr(buff, "LastUpdate") != NULL)
				{
					i++;
					if(i == atoi(index))
					{
						p = strchr(buff, ':');
						if(p != NULL)
						{
							strcpy(value, p+2);
						}
					}
				}
			}
			fclose(fp);
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUDDt_Status(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUDDt_Status, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "LeaseActive");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUDDt_UUID(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUDDt_UUID, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Device.");
	char *p = NULL;
	char buff[256] = {0};
	char name[64] = {0};
	FILE *fp = NULL;
	
	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(DiscoveryDeviceMap, buff, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			fp = fopen("/tmp/upnpdevice", "r");
			
			if(fp != NULL)
			{
				sprintf(name, "UDN%d", atoi(index));
				while(fgets(buff, sizeof(buff), fp))
				{
					if(strstr(buff, name) != NULL)
					{
						if((p = strchr(buff, ':')) != NULL)
						{
							strcpy(value, p+1);
							break;
						}
					}
				}
				fclose(fp);
			}
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUDDt_USN(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUDDt_USN, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Device.");
	char *p = NULL;
	char buff[256] = {0};
	char name[64] = {0};
	FILE *fp = NULL;
	
	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(DiscoveryDeviceMap, buff, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			fp = fopen("/tmp/upnpdevice", "r");
			
			if(fp != NULL)
			{
				sprintf(name, "UDN%d", atoi(index));
				while(fgets(buff, sizeof(buff), fp))
				{
					if(strstr(buff, name) != NULL)
					{
						if((p = strchr(buff, ':')) != NULL)
						{
							strcpy(value, p+1);
							break;
						}
					}
				}
				fclose(fp);
			}
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUDDt_LeaseTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUDDt_LeaseTime, value);
	if(ret)
	{
		return -1;
	}*/

	/*ret = do_uci_get("upnpd.config.notify_interval", value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Device.");
	char *p = NULL;
	char buff[256] = {0};
	char name[64] = {0};
	FILE *fp = NULL;
	int rootcount = 0;
	char tmp[64] = {0};
	int i = 0;
	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(DiscoveryDeviceMap, buff, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			fp = fopen("/tmp/upnpdevice", "r");
			
			if(fp != NULL)
			{
				sprintf(name, "ParentDevice%d", atoi(index));
				while(fgets(buff, sizeof(buff), fp))
				{
					if(strstr(buff, name) != NULL)
					{
						if((p = strchr(buff, '=')) != NULL)
						{
							strcpy(tmp, p+1);
							rootcount = atoi(tmp);
							break;
						}
					}
				}
				fclose(fp);
			}

			fp = fopen("/tmp/NOTIFY", "r");

			if(fp != NULL)
			{
				while(fgets(buff, sizeof(buff), fp))
				{
					if(strcasestr(buff, "CACHE-CONTROL") != NULL)
					{
						i++;
						if(i == rootcount)
						{
							p = strchr(buff, '=');
							if(p != NULL)
							{
								strcpy(value, p+1);
							}
						}
					}
				}
				fclose(fp);
			}
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUDDt_Location(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUDDt_Location, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Device.");
	char *p = NULL;
	char *q = NULL;
	char buff[256] = {0};
	char name[64] = {0};
	FILE *fp = NULL;
	int rootcount = 0;
	char tmp[64] = {0};
	int i = 0;
	
	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(DiscoveryDeviceMap, buff, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			fp = fopen("/tmp/upnpdevice", "r");
			
			if(fp != NULL)
			{
				sprintf(name, "ParentDevice%d", atoi(index));
				while(fgets(buff, sizeof(buff), fp))
				{
					if(strstr(buff, name) != NULL)
					{
						if((p = strchr(buff, '=')) != NULL)
						{
							strcpy(tmp, p+1);
							rootcount = atoi(tmp);
							break;
						}
					}
				}
				fclose(fp);
			}

			fp = fopen("/tmp/NOTIFY", "r");
			
			if(fp != NULL)
			{
				while(fgets(buff, sizeof(buff), fp))
				{
					if(strcasestr(buff, "LOCATION") != NULL)
					{
						i++;
						if(i == rootcount)
						{
							p = strcasestr(buff, "http");
							if(p != NULL)
							{
								strcpy(value, p);
							}
						}
					}
				}
				fclose(fp);
			}			
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUDDt_Server(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUDDt_Server, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Device.");
	char *p = NULL;
	char buff[256] = {0};
	char name[64] = {0};
	FILE *fp = NULL;
	int rootcount = 0;
	char tmp[64] = {0};
	int i = 0;
	
	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(DiscoveryDeviceMap, buff, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			fp = fopen("/tmp/upnpdevice", "r");
			
			if(fp != NULL)
			{
				sprintf(name, "ParentDevice%d", atoi(index));
				while(fgets(buff, sizeof(buff), fp))
				{
					if(strstr(buff, name) != NULL)
					{
						if((p = strchr(buff, '=')) != NULL)
						{
							strcpy(tmp, p+1);
							rootcount = atoi(tmp);
							break;
						}
					}
				}
				fclose(fp);
			}
			
			fp = fopen("/tmp/NOTIFY", "r");
			
			if(fp != NULL)
			{
				while(fgets(buff, sizeof(buff), fp))
				{
					if(strcasestr(buff, "SERVER") != NULL)
					{
						i++;
						if(i == rootcount)
						{
							p = strchr(buff, ':');
							if(p != NULL)
							{
								strcpy(value, p+1);
							}
						}
					}
				}
				fclose(fp);
			}
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUDDt_Host(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUDDt_Host, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Device.");
	char *p = NULL;
	char buff[256] = {0};
	char name[64] = {0};
	FILE *fp = NULL;
	int rootcount = 0;
	char tmp[64] = {0};
	int i = 0;
	
	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(DiscoveryDeviceMap, buff, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			fp = fopen("/tmp/upnpdevice", "r");
			
			if(fp != NULL)
			{
				sprintf(name, "ParentDevice%d", atoi(index));
				while(fgets(buff, sizeof(buff), fp))
				{
					if(strstr(buff, name) != NULL)
					{
						if((p = strchr(buff, '=')) != NULL)
						{
							strcpy(tmp, p+1);
							rootcount = atoi(tmp);
							break;
						}
					}
				}
				fclose(fp);
			}
			
			fp = fopen("/tmp/NOTIFY", "r");
			
			if(fp != NULL)
			{
				while(fgets(buff, sizeof(buff), fp))
				{
					if(strcasestr(buff, "HOST") != NULL)
					{
						i++;
						if(i == rootcount)
						{
							p = strchr(buff, ':');
							if(p != NULL)
							{
								strcpy(value, p+1);
							}
						}
					}
				}
				fclose(fp);
			}			
		}
	}

	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUDDt_LastUpdate(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUDDt_LastUpdate, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Device.");
	char *p = NULL;
	char buff[256] = {0};
	char name[64] = {0};
	FILE *fp = NULL;
	int rootcount = 0;
	char tmp[64] = {0};
	int i = 0;
	
	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(DiscoveryDeviceMap, buff, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			fp = fopen("/tmp/upnpdevice", "r");
			
			if(fp != NULL)
			{
				sprintf(name, "ParentDevice%d", atoi(index));
				while(fgets(buff, sizeof(buff), fp))
				{
					if(strstr(buff, name) != NULL)
					{
						if((p = strchr(buff, '=')) != NULL)
						{
							strcpy(tmp, p+1);
							rootcount = atoi(tmp);
							break;
						}
					}
				}
				fclose(fp);
			}
			
			fp = fopen("/tmp/NOTIFY", "r");
			
			if(fp != NULL)
			{
				while(fgets(buff, sizeof(buff), fp))
				{
					if(strcasestr(buff, "LastUpdate") != NULL)
					{
						i++;
						if(i == rootcount)
						{
							p = strchr(buff, ':');
							if(p != NULL)
							{
								strcpy(value, p+2);
							}
						}
					}
				}
				fclose(fp);
			}
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUDSt_Status(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUDSt_Status, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUDSt_USN(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUDSt_USN, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUDSt_LeaseTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUDSt_LeaseTime, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUDSt_Location(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUDSt_Location, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUDSt_Server(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUDSt_Server, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUDSt_Host(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUDSt_Host, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUDSt_LastUpdate(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUDSt_LastUpdate, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUDSt_ParentDevice(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DUDSt_ParentDevice, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUD_DeviceDescriptionNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUD_DeviceDescriptionNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}*/
	FILE *fp = NULL;
	char buff[128];
	char *p= NULL;
	
	ret = upnpdevice();
	if(ret)
	{
		return -1;
	}
	
	fp = fopen("/tmp/upnpdevice", "r");
	if(fp != NULL)
	{
		while(fgets(buff, sizeof(buff), fp))
		{
			if(strstr(buff, "DeviceInstanceNumberOfEntries") != NULL)
			{
				p = strchr(buff, '=');
				if(p != NULL)
				{
					strcpy(value, p+1);
				}
			}
		}
		fclose(fp);
	}

	if (strcmp(value, "") == 0)
		strcpy(value, "0");
	
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUD_DeviceInstanceNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUD_DeviceInstanceNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}*/
	FILE *fp = NULL;
	char buff[128];
	char *p= NULL;
	
	ret = upnpdevice();
	if(ret)
	{
		return -1;
	}
	
	fp = fopen("/tmp/upnpdevice", "r");
	if(fp != NULL)
	{
		while(fgets(buff, sizeof(buff), fp))
		{
			if(strstr(buff, "DeviceInstanceNumberOfEntries") != NULL)
			{
				p = strchr(buff, '=');
				if(p != NULL)
				{
					strcpy(value, p+1);
				}
			}
		}
		fclose(fp);
	}

	if (strcmp(value, "") == 0)
		strcpy(value, "0");
	
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUD_ServiceInstanceNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUD_ServiceInstanceNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}*/
	FILE *fp = NULL;
	char buff[128];
	char *p= NULL;
	
	ret = upnpdevice();
	if(ret)
	{
		return -1;
	}
	
	fp = fopen("/tmp/upnpservice", "r");
	if(fp != NULL)
	{	
		while(fgets(buff, sizeof(buff), fp))
		{
			if(strstr(buff, "ServiceInstanceNumberOfEntries") != NULL)
			{
				p = strchr(buff, '=');
				if(p != NULL)
				{
					strcpy(value, p+1);
				}
			}
		}
		fclose(fp);
	}

	if (strcmp(value, "") == 0)
		strcpy(value, "0");
	
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUDDt_URLBase(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUDDt_URLBase, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".DeviceDescription.");
	char *p = NULL;
	char buff[256] = {0};
	char name[64] = {0};
	FILE *fp = NULL;
	int rootcount = 0;
	char tmp[64] = {0};
	int i = 0;
	char *q = NULL;
	
	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(DeviceDescriptionMap, buff, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			fp = fopen("/tmp/upnpdevice", "r");
			
			if(fp != NULL)
			{
				sprintf(name, "ParentDevice%d", atoi(index));
				printf("******************************************name: %s\n", name);
				while(fgets(buff, sizeof(buff), fp))
				{
					if(strstr(buff, name) != NULL)
					{
						if((p = strchr(buff, '=')) != NULL)
						{
							strcpy(tmp, p+1);
							rootcount = atoi(tmp);
							break;
						}
					}
				}
				fclose(fp);
			}
			
			fp = fopen("/tmp/NOTIFY", "r");
			printf("******************************************rootcount: %d\n", rootcount);
			
			if(fp != NULL)
			{
				while(fgets(buff, sizeof(buff), fp))
				{
					if(strcasestr(buff, "LOCATION") != NULL)
					{
						i++;
						if(i == rootcount)
						{
							p = strcasestr(buff, "http");
							if(p != NULL)
							{
								strcpy(value, p);
							}
						}
					}
				}
				fclose(fp);
			}			
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUDDt_SpecVersion(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUDDt_SpecVersion, value);
	if(ret)
	{
		return -1;
	}*/

	strcpy(value, "1.0");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUDDt_Host_3771(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUDDt_Host_3771, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".DeviceDescription.");
	char *p = NULL;
	char buff[256] = {0};
	char name[64] = {0};
	FILE *fp = NULL;
	int rootcount = 0;
	char tmp[64] = {0};
	int i = 0;
	
	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(DeviceDescriptionMap, buff, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			fp = fopen("/tmp/upnpdevice", "r");
			
			if(fp != NULL)
			{
				sprintf(name, "ParentDevice%d", atoi(index));
				while(fgets(buff, sizeof(buff), fp))
				{
					if(strstr(buff, name) != NULL)
					{
						if((p = strchr(buff, '=')) != NULL)
						{
							strcpy(tmp, p+1);
							rootcount = atoi(tmp);
							break;
						}
					}
				}
				fclose(fp);
			}
			
			fp = fopen("/tmp/NOTIFY", "r");
			
			if(fp != NULL)
			{
				while(fgets(buff, sizeof(buff), fp))
				{
					if(strcasestr(buff, "HOST") != NULL)
					{
						i++;
						if(i == rootcount)
						{
							p = strchr(buff, ':');
							if(p != NULL)
							{
								strcpy(value, p+1);
							}
						}
					}
				}
				fclose(fp);
			}			
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUDDt_UDN(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUDDt_UDN, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".DeviceInstance.");
	char *p = NULL;
	char buff[256] = {0};
	char name[64] = {0};
	FILE *fp = NULL;
	
	if (index != NULL)
	{
		ret = lib_getvalue_mapfile_byinstance(DeviceInstanceMap, buff, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			fp = fopen("/tmp/upnpdevice", "r");
			
			if(fp != NULL)
			{
				sprintf(name, "UDN%d", atoi(index));
				while(fgets(buff, sizeof(buff), fp))
				{
					if(strstr(buff, name) != NULL)
					{
						if((p = strchr(buff, '=')) != NULL)
						{
							strcpy(value, p+1);
							break;
						}
					}
				}
				fclose(fp);
			}
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUDDt_ParentDevice(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUDDt_ParentDevice, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".DeviceInstance.");
	char *p = NULL;
	char buff[256] = {0};
	char name[64] = {0};
	FILE *fp = NULL;
	
	if (index != NULL)
	{
		strcpy(value, "");
		ret = lib_getvalue_mapfile_byinstance(DeviceInstanceMap, buff, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			fp = fopen("/tmp/upnpdevice", "r");
			
			if(fp != NULL)
			{	
				sprintf(name, "ParentDevice%d", atoi(index));
				while(fgets(buff, sizeof(buff), fp))
				{
					if(strstr(buff, name) != NULL)
					{
						if((p = strchr(buff, '=')) != NULL)
						{
							sprintf(value, "Device.UPnP.Description.DeviceInstance.%s", p+1);
							break;
						}
					}
				}
				fclose(fp);
			}
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUDDt_DiscoveryDevice(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUDDt_DiscoveryDevice, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".DeviceInstance.");
	char *p = NULL;
	char buff[256] = {0};
	char name[64] = {0};
	FILE *fp = NULL;
		
	if (index != NULL)
	{
		strcpy(value, "");
		ret = lib_getvalue_mapfile_byinstance(DeviceInstanceMap, buff, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			fp = fopen("/tmp/upnpdevice", "r");
			
			if(fp != NULL)
			{
				sprintf(name, "ParentDevice%d", atoi(index));
				while(fgets(buff, sizeof(buff), fp))
				{
					if(strstr(buff, name) != NULL)
					{
						if((p = strchr(buff, '=')) != NULL)
						{
							sprintf(value, "Device.UPnP.Description.DeviceInstance.%s", p+1);
							break;
						}
					}
				}
				fclose(fp);
			}
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUDDt_DeviceType(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUDDt_DeviceType, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".DeviceInstance.");
	char *p = NULL;
	char buff[256] = {0};
	char name[64] = {0};
	FILE *fp = NULL;
	
	if (index != NULL)
	{
		strcpy(value, "");
		ret = lib_getvalue_mapfile_byinstance(DeviceInstanceMap, buff, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			fp = fopen("/tmp/upnpdevice", "r");
			
			if(fp != NULL)
			{
				sprintf(name, "deviceType%d", atoi(index));
				strcpy(value, "");
				while(fgets(buff, sizeof(buff), fp))
				{
					if(strstr(buff, name) != NULL)
					{
						if((p = strchr(buff, '=')) != NULL)
						{
							strcpy(value, p+1);
							break;
						}
					}
				}
				fclose(fp);
			}
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUDDt_FriendlyName(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUDDt_FriendlyName, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".DeviceInstance.");
	char *p = NULL;
	char buff[256] = {0};
	char name[64] = {0};
	FILE *fp = NULL;
	
	if (index != NULL)
	{
		strcpy(value, "");
		ret = lib_getvalue_mapfile_byinstance(DeviceInstanceMap, buff, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			fp = fopen("/tmp/upnpdevice", "r");
			
			if(fp != NULL)
			{
				sprintf(name, "friendlyName%d", atoi(index));
				strcpy(value, "");
				while(fgets(buff, sizeof(buff), fp))
				{
					if(strstr(buff, name) != NULL)
					{
						if((p = strchr(buff, '=')) != NULL)
						{
							strcpy(value, p+1);
							break;
						}
					}
				}
				fclose(fp);
			}
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUDDt_DeviceCategory(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUDDt_DeviceCategory, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "UPnP_AVV");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUDDt_Manufacturer(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUDDt_Manufacturer, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".DeviceInstance.");
	char *p = NULL;
	char buff[256] = {0};
	char name[64] = {0};
	FILE *fp = NULL;
	
	if (index != NULL)
	{
		strcpy(value, "");
		ret = lib_getvalue_mapfile_byinstance(DeviceInstanceMap, buff, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			fp = fopen("/tmp/upnpdevice", "r");
			
			if(fp != NULL)
			{
				sprintf(name, "manufacturer%d", atoi(index));
				strcpy(value, "");
				while(fgets(buff, sizeof(buff), fp))
				{
					if(strstr(buff, name) != NULL)
					{
						if((p = strchr(buff, '=')) != NULL)
						{
							strcpy(value, p+1);
							break;
						}
					}
				}
				fclose(fp);
			}
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUDDt_ManufacturerOUI(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUDDt_ManufacturerOUI, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".DeviceInstance.");
	char *p = NULL;
	char buff[256] = {0};
	char name[64] = {0};
	FILE *fp = NULL;
	
	if (index != NULL)
	{
		strcpy(value, "");
		ret = lib_getvalue_mapfile_byinstance(DeviceInstanceMap, buff, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			fp = fopen("/tmp/upnpdevice", "r");
			
			if(fp != NULL)
			{
				sprintf(name, "ManufacturerOUI%d", atoi(index));
				strcpy(value, "");
				while(fgets(buff, sizeof(buff), fp))
				{
					if(strstr(buff, name) != NULL)
					{
						if((p = strchr(buff, '=')) != NULL)
						{
							strcpy(value, p+1);
							break;
						}
					}
				}
				fclose(fp);
			}
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUDDt_ManufacturerURL(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUDDt_ManufacturerURL, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".DeviceInstance.");
	char *p = NULL;
	char buff[256] = {0};
	char name[64] = {0};
	FILE *fp = NULL;
	
	if (index != NULL)
	{
		strcpy(value, "");
		ret = lib_getvalue_mapfile_byinstance(DeviceInstanceMap, buff, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			fp = fopen("/tmp/upnpdevice", "r");
			
			if(fp != NULL)
			{
				sprintf(name, "manufacturerURL%d", atoi(index));
				strcpy(value, "");
				while(fgets(buff, sizeof(buff), fp))
				{
					if(strstr(buff, name) != NULL)
					{
						if((p = strchr(buff, '=')) != NULL)
						{
							strcpy(value, p+1);
							break;
						}
					}
				}
				fclose(fp);
			}
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUDDt_ModelDescription(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUDDt_ModelDescription, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".DeviceInstance.");
	char *p = NULL;
	char buff[256] = {0};
	char name[64] = {0};
	FILE *fp = NULL;
	
	if (index != NULL)
	{
		strcpy(value, "");
		ret = lib_getvalue_mapfile_byinstance(DeviceInstanceMap, buff, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			fp = fopen("/tmp/upnpdevice", "r");
			
			if(fp != NULL)
			{
				sprintf(name, "modelDescription%d", atoi(index));
				strcpy(value, "");
				while(fgets(buff, sizeof(buff), fp))
				{
					if(strstr(buff, name) != NULL)
					{
						if((p = strchr(buff, '=')) != NULL)
						{
							strcpy(value, p+1);
							break;
						}
					}
				}
				fclose(fp);
			}
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUDDt_ModelName(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUDDt_ModelName, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".DeviceInstance.");
	char *p = NULL;
	char buff[256] = {0};
	char name[64] = {0};
	FILE *fp = NULL;
	
	if (index != NULL)
	{
		strcpy(value, "");
		ret = lib_getvalue_mapfile_byinstance(DeviceInstanceMap, buff, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			fp = fopen("/tmp/upnpdevice", "r");
			
			if(fp != NULL)
			{
				sprintf(name, "modelName%d", atoi(index));
				strcpy(value, "");
				while(fgets(buff, sizeof(buff), fp))
				{
					if(strstr(buff, name) != NULL)
					{
						if((p = strchr(buff, '=')) != NULL)
						{
							strcpy(value, p+1);
							break;
						}
					}
				}
				fclose(fp);
			}
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUDDt_ModelNumber(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUDDt_ModelNumber, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".DeviceInstance.");
	char *p = NULL;
	char buff[256] = {0};
	char name[64] = {0};
	FILE *fp = NULL;
	
	if (index != NULL)
	{
		strcpy(value, "");
		ret = lib_getvalue_mapfile_byinstance(DeviceInstanceMap, buff, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			fp = fopen("/tmp/upnpdevice", "r");
			
			if(fp != NULL)
			{
				sprintf(name, "modelNumber%d", atoi(index));
				strcpy(value, "");
				while(fgets(buff, sizeof(buff), fp))
				{
					if(strstr(buff, name) != NULL)
					{
						if((p = strchr(buff, '=')) != NULL)
						{
							strcpy(value, p+1);
							break;
						}
					}
				}
				fclose(fp);
			}
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUDDt_ModelURL(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUDDt_ModelURL, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".DeviceInstance.");
	char *p = NULL;
	char buff[256] = {0};
	char name[64] = {0};
	FILE *fp = NULL;
	
	if (index != NULL)
	{
		strcpy(value, "");
		ret = lib_getvalue_mapfile_byinstance(DeviceInstanceMap, buff, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			fp = fopen("/tmp/upnpdevice", "r");
			
			if(fp != NULL)
			{
				sprintf(name, "modelURL%d", atoi(index));
				strcpy(value, "");
				while(fgets(buff, sizeof(buff), fp))
				{
					if(strstr(buff, name) != NULL)
					{
						if((p = strchr(buff, '=')) != NULL)
						{
							strcpy(value, p+1);
							break;
						}
					}
				}
				fclose(fp);
			}
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUDDt_SerialNumber(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUDDt_SerialNumber, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".DeviceInstance.");
	char *p = NULL;
	char buff[256] = {0};
	char name[64] = {0};
	FILE *fp = NULL;
	
	if (index != NULL)
	{
		strcpy(value, "");
		ret = lib_getvalue_mapfile_byinstance(DeviceInstanceMap, buff, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			fp = fopen("/tmp/upnpdevice", "r");
			
			if(fp != NULL)
			{
				sprintf(name, "serialNumber%d", atoi(index));
				strcpy(value, "");
				while(fgets(buff, sizeof(buff), fp))
				{
					if(strstr(buff, name) != NULL)
					{
						if((p = strchr(buff, '=')) != NULL)
						{
							strcpy(value, p+1);
							break;
						}
					}
				}
				fclose(fp);
			}
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUDDt_UPC(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUDDt_UPC, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".DeviceInstance.");
	char *p = NULL;
	char buff[256] = {0};
	char name[64] = {0};
	FILE *fp = NULL;
	
	if (index != NULL)
	{
		strcpy(value, "");
		ret = lib_getvalue_mapfile_byinstance(DeviceInstanceMap, buff, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			fp = fopen("/tmp/upnpdevice", "r");
			
			if(fp != NULL)
			{
				sprintf(name, "UPC%d", atoi(index));
				strcpy(value, "");
				while(fgets(buff, sizeof(buff), fp))
				{
					if(strstr(buff, name) != NULL)
					{
						if((p = strchr(buff, '=')) != NULL)
						{
							strcpy(value, p+1);
							break;
						}
					}
				}
				fclose(fp);
			}
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUDDt_PresentationURL(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUDDt_PresentationURL, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".DeviceInstance.");
	char *p = NULL;
	char buff[256] = {0};
	char name[64] = {0};
	FILE *fp = NULL;
	
	if (index != NULL)
	{
		strcpy(value, "");
		ret = lib_getvalue_mapfile_byinstance(DeviceInstanceMap, buff, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			fp = fopen("/tmp/upnpdevice", "r");
			
			if(fp != NULL)
			{
				sprintf(name, "presentationURL%d", atoi(index));
				strcpy(value, "");
				while(fgets(buff, sizeof(buff), fp))
				{
					if(strstr(buff, name) != NULL)
					{
						if((p = strchr(buff, '=')) != NULL)
						{
							strcpy(value, p+1);
							break;
						}
					}
				}
				fclose(fp);
			}
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUDSt_ParentDevice_3788(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUDSt_ParentDevice_3788, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".ServiceInstance.");
	char *p = NULL;
	char buff[256] = {0};
	char name[64] = {0};
	FILE *fp = NULL;
	
	if (index != NULL)
	{
		strcpy(value, "");
		ret = lib_getvalue_mapfile_byinstance(ServiceInstanceMap, buff, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			fp = fopen("/tmp/upnpdevice", "r");
			
			if(fp != NULL)
			{
				sprintf(name, "ParentDevice%d", atoi(index));
				while(fgets(buff, sizeof(buff), fp))
				{
					if(strstr(buff, name) != NULL)
					{
						if((p = strchr(buff, '=')) != NULL)
						{
							sprintf(value, "Device.UPnP.Description.DeviceInstance.%s", p+1);
							break;
						}
					}
				}
				fclose(fp);
			}
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUDSt_ServiceId(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUDSt_ServiceId, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".ServiceInstance.");
	char *p = NULL;
	char buff[256] = {0};
	char name[64] = {0};
	FILE *fp = NULL;
	
	if (index != NULL)
	{
		strcpy(value, "");
		ret = lib_getvalue_mapfile_byinstance(ServiceInstanceMap, buff, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			fp = fopen("/tmp/upnpservice", "r");
			
			if(fp != NULL)
			{	
				sprintf(name, "serviceId%d", atoi(index));
				strcpy(value, "");
				while(fgets(buff, sizeof(buff), fp))
				{
					if(strstr(buff, name) != NULL)
					{
						if((p = strchr(buff, '=')) != NULL)
						{
							strcpy(value, p+1);
							break;
						}
					}
				}
				fclose(fp);
			}
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUDSt_ServiceDiscovery(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUDSt_ServiceDiscovery, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".ServiceInstance.");
	char *p = NULL;
	char buff[256] = {0};
	char name[64] = {0};
	FILE *fp = NULL;
	
	if (index != NULL)
	{
		strcpy(value, "");
		ret = lib_getvalue_mapfile_byinstance(ServiceInstanceMap, buff, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			sprintf(value, "Device.UPnP.Discovery.Service.%d", atoi(index));
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUDSt_ServiceType(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUDSt_ServiceType, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".ServiceInstance.");
	char *p = NULL;
	char buff[256] = {0};
	char name[64] = {0};
	FILE *fp = NULL;
	
	if (index != NULL)
	{
		strcpy(value, "");
		ret = lib_getvalue_mapfile_byinstance(ServiceInstanceMap, buff, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			fp = fopen("/tmp/upnpservice", "r");
			
			if(fp != NULL)
			{
				sprintf(name, "serviceType%d", atoi(index));
				strcpy(value, "");
				while(fgets(buff, sizeof(buff), fp))
				{
					if(strstr(buff, name) != NULL)
					{
						if((p = strchr(buff, '=')) != NULL)
						{
							strcpy(value, p+1);
							break;
						}
					}
				}
				fclose(fp);
			}
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUDSt_SCPDURL(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUDSt_SCPDURL, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".ServiceInstance.");
	char *p = NULL;
	char buff[256] = {0};
	char name[64] = {0};
	FILE *fp = NULL;
	
	if (index != NULL)
	{
		strcpy(value, "");
		ret = lib_getvalue_mapfile_byinstance(ServiceInstanceMap, buff, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			fp = fopen("/tmp/upnpservice", "r");
			
			if(fp != NULL)
			{
				sprintf(name, "SCPDURL%d", atoi(index));
				strcpy(value, "");
				while(fgets(buff, sizeof(buff), fp))
				{
					if(strstr(buff, name) != NULL)
					{
						if((p = strchr(buff, '=')) != NULL)
						{
							strcpy(value, p+1);
							break;
						}
					}
				}
				fclose(fp);
			}
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUDSt_ControlURL(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUDSt_ControlURL, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".ServiceInstance.");
	char *p = NULL;
	char buff[256] = {0};
	char name[64] = {0};
	FILE *fp = NULL;
	
	if (index != NULL)
	{
		strcpy(value, "");
		ret = lib_getvalue_mapfile_byinstance(ServiceInstanceMap, buff, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			fp = fopen("/tmp/upnpservice", "r");
			
			if(fp != NULL)
			{
				sprintf(name, "ControlURL%d", atoi(index));
				strcpy(value, "");
				while(fgets(buff, sizeof(buff), fp))
				{
					if(strstr(buff, name) != NULL)
					{
						if((p = strchr(buff, '=')) != NULL)
						{
							strcpy(value, p+1);
							break;
						}
					}
				}
				fclose(fp);
			}
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DUDSt_EventSubURL(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DUDSt_EventSubURL, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".ServiceInstance.");
	char *p = NULL;
	char buff[256] = {0};
	char name[64] = {0};
	FILE *fp = NULL;
	
	if (index != NULL)
	{
		strcpy(value, "");
		ret = lib_getvalue_mapfile_byinstance(ServiceInstanceMap, buff, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			fp = fopen("/tmp/upnpservice", "r");
			
			if(fp != NULL)
			{
				sprintf(name, "EventSubURL%d", atoi(index));
				strcpy(value, "");
				while(fgets(buff, sizeof(buff), fp))
				{
					if(strstr(buff, name) != NULL)
					{
						if((p = strchr(buff, '=')) != NULL)
						{
							strcpy(value, p+1);
							break;
						}
					}
				}
				fclose(fp);
			}
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DE_SCLNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DE_SCLNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DESt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DESt_Enable, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DESt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DESt_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DESt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DESt_Alias, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DESt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DESt_Alias, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DESt_AnnouncedToSCLList(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DESt_AnnouncedToSCLList, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DESt_AnnouncedToSCLList(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DESt_AnnouncedToSCLList, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DESt_SAFPolicySetNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DESt_SAFPolicySetNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DESt_AreaNwkInstanceNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DESt_AreaNwkInstanceNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DESt_AreaNwkDeviceInfoInstanceNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DESt_AreaNwkDeviceInfoInstanceNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DESD_MaxNumberOfDiscovRecords(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DESD_MaxNumberOfDiscovRecords, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DESD_MaxNumberOfDiscovRecords(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DESD_MaxNumberOfDiscovRecords, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DESD_MaxSizeOfDiscovAnswer(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DESD_MaxSizeOfDiscovAnswer, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DESD_MaxSizeOfDiscovAnswer(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DESD_MaxSizeOfDiscovAnswer, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DESR_RegTargetNSCLList(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DESR_RegTargetNSCLList, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DESR_RegTargetNSCLList(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DESR_RegTargetNSCLList, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DESR_RegSearchStrings(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DESR_RegSearchStrings, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DESR_RegSearchStrings(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DESR_RegSearchStrings, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DESR_RegAccessRightID(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DESR_RegAccessRightID, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DESR_RegAccessRightID(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DESR_RegAccessRightID, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DESR_RegExpirationDuration(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DESR_RegExpirationDuration, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DESR_RegExpirationDuration(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DESR_RegExpirationDuration, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DESR_Reregistration(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DESR_Reregistration, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DESR_Reregistration(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DESR_Reregistration, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DESRA_Progress(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DESRA_Progress, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DESRA_Progress(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DESRA_Progress, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DESRA_FinalStatus(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DESRA_FinalStatus, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DESRA_FinalStatus(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DESRA_FinalStatus, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DESSt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DESSt_Enable, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DESSt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DESSt_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DESSt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DESSt_Alias, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DESSt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DESSt_Alias, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DESSt_PolicyScope(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DESSt_PolicyScope, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DESSt_PolicyScope(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DESSt_PolicyScope, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DESSt_ANPPolicyNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DESSt_ANPPolicyNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DESStAt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DESStAt_Enable, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DESStAt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DESStAt_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DESStAt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DESStAt_Alias, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DESStAt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DESStAt_Alias, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DESStAt_ANName(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DESStAt_ANName, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DESStAt_ANName(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DESStAt_ANName, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DESStAt_BlockPeriodNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DESStAt_BlockPeriodNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DESStAt_RequestCategoryNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DESStAt_RequestCategoryNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DESStAtBt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DESStAtBt_Enable, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DESStAtBt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DESStAtBt_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DESStAtBt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DESStAtBt_Alias, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DESStAtBt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DESStAtBt_Alias, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DESStAtBt_FailedAttempts(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DESStAtBt_FailedAttempts, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DESStAtBt_FailedAttempts(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DESStAtBt_FailedAttempts, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DESStAtBt_BlockDuration(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DESStAtBt_BlockDuration, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DESStAtBt_BlockDuration(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DESStAtBt_BlockDuration, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DESStAtRt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DESStAtRt_Enable, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DESStAtRt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DESStAtRt_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DESStAtRt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DESStAtRt_Alias, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DESStAtRt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DESStAtRt_Alias, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DESStAtRt_RCAT(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DESStAtRt_RCAT, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DESStAtRt_RCAT(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DESStAtRt_RCAT, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DESStAtRt_ScheduleNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DESStAtRt_ScheduleNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DESStAtRtSt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DESStAtRtSt_Enable, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DESStAtRtSt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DESStAtRtSt_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DESStAtRtSt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DESStAtRtSt_Alias, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DESStAtRtSt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DESStAtRtSt_Alias, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DESStAtRtSt_Schedules(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DESStAtRtSt_Schedules, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DESStAtRtSt_Schedules(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DESStAtRtSt_Schedules, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DESStAtRtSt_AbsTimeSpanNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DESStAtRtSt_AbsTimeSpanNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DESStAtRtStAt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DESStAtRtStAt_Enable, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DESStAtRtStAt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DESStAtRtStAt_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DESStAtRtStAt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DESStAtRtStAt_Alias, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DESStAtRtStAt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DESStAtRtStAt_Alias, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DESStAtRtStAt_StartTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DESStAtRtStAt_StartTime, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DESStAtRtStAt_StartTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DESStAtRtStAt_StartTime, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DESStAtRtStAt_EndTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DESStAtRtStAt_EndTime, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DESStAtRtStAt_EndTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DESStAtRtStAt_EndTime, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DESStM_DefaultRCATValue(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DESStM_DefaultRCATValue, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DESStM_DefaultRCATValue(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DESStM_DefaultRCATValue, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DESStM_RequestCategoryNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DESStM_RequestCategoryNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DESStMRt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DESStMRt_Enable, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DESStMRt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DESStMRt_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DESStMRt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DESStMRt_Alias, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DESStMRt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DESStMRt_Alias, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DESStMRt_RCAT(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DESStMRt_RCAT, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DESStMRt_RCAT(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DESStMRt_RCAT, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DESStMRt_TolerableDelay(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DESStMRt_TolerableDelay, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DESStMRt_TolerableDelay(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DESStMRt_TolerableDelay, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DESStMRt_Thresh(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DESStMRt_Thresh, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DESStMRt_Thresh(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DESStMRt_Thresh, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DESStMRt_Mem(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DESStMRt_Mem, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DESStMRt_Mem(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DESStMRt_Mem, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DESStMRt_RankedANList(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DESStMRt_RankedANList, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DESStMRt_RankedANList(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DESStMRt_RankedANList, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DESAt_ID(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DESAt_ID, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DESAt_AreaNwkType(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DESAt_AreaNwkType, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DESAt_ListOfDevices(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DESAt_ListOfDevices, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DESAt_PropertyNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DESAt_PropertyNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DESAtPt_Name(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DESAtPt_Name, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DESAtPt_Value(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DESAtPt_Value, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DESAt_AreaNwkInstance(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DESAt_AreaNwkInstance, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DESAt_Host(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DESAt_Host, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DESAt_ListOfDeviceNeighbors(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DESAt_ListOfDeviceNeighbors, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DESAt_ListOfDeviceApplications(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DESAt_ListOfDeviceApplications, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DESAt_SleepInterval(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DESAt_SleepInterval, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DESAt_SleepInterval(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DESAt_SleepInterval, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DESAt_SleepDuration(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DESAt_SleepDuration, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DESAt_SleepDuration(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DESAt_SleepDuration, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DESAt_Status(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DESAt_Status, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DESAt_Active(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DESAt_Active, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DESAt_PropertyNumberOfEntries_3901(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DESAt_PropertyNumberOfEntries_3901, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DESAtPt_Name_3902(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DESAtPt_Name_3902, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DESAtPt_Value_3903(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DESAtPt_Value_3903, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDC_HNDDeviceClass(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDC_HNDDeviceClass, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDC_DeviceCapability(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDC_DeviceCapability, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDC_HIDDeviceClass(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDC_HIDDeviceClass, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDC_ImageClassProfileID(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDC_ImageClassProfileID, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDC_AudioClassProfileID(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDC_AudioClassProfileID, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDC_AVClassProfileID(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDC_AVClassProfileID, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDC_MediaCollectionProfileID(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDC_MediaCollectionProfileID, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDC_PrinterClassProfileID(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDC_PrinterClassProfileID, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DS_DiagnosticsState(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DS_DiagnosticsState, value);
	if(ret)
	{
		strcpy(value, "None");
		ret = 0;
	}
	if (strcmp(value, " ") == 0)
		strcpy(value, "None");
	
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DS_DiagnosticsState(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*char sysUpTime[128] = {0};
	char cpuUsage[32] = {0};
	char memFree[128] = {0};
	char rstString[256] = {0};
	if(strcasecmp(value, "Requested") == 0)
	{
		struct sysinfo info;
		memset(&info, 0, sizeof(struct sysinfo));
		sysinfo(&info);
		info.freeram /= 1024; //changed to KByte
		sprintf(memFree, "%u", info.freeram);

		getDeviceUpTime("/proc/uptime", sysUpTime);
		getCpuUsage(cpuUsage);
	}
	else
	{
		return (-1);
	}

	sprintf(rstString, "System UP Time %ss, CPU Loading %s%%, Memory Free %sKByte", sysUpTime, cpuUsage, memFree);

	ret = do_uci_set(DS_DiagnosticsState, "Complete");
	if(ret)
	{
		return (-1);
	}
	
	ret = do_uci_set(DS_Results, rstString);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DS_Results(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DS_Results, value);
	if(ret)
	{
		strcpy(value, "");
		ret = 0;
	}
	if (value[0] == ' ')
		strcpy(value, "");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DF_Enable(char * path_name, char *value)
{
	int ret = 0;
	char en1[8] = {0};
	char en2[8] = {0};
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("firewall.@defaults[0]._enabled", en1);
	if(ret)
	{
		strcpy(en1, "0");
		ret = 0;
	}
	ret = do_uci_get("firewall.@defaults[0].disable_ipv6", en2);
	if(ret)
	{
		strcpy(en2, "0"); //value 0 means enable
		ret = 0;
	}
	if ( (atoi(en1) ==0)  &&  (atoi(en2) ==1) )
		strcpy(value, "0");
	else
		strcpy(value, "1");
	
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DF_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set("firewall.@defaults[0]._enabled", value);
	if (atoi(value) == 0)
		ret = do_uci_set("firewall.@defaults[0].disable_ipv6", "1");
	else
		ret = do_uci_set("firewall.@defaults[0].disable_ipv6", "0");
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("firewall");
		if(ret)
		{
			return (-1);
		}
		system("/etc/init.d/firewall restart &");
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DF_Config(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DF_Config, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "High"); //always high
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DF_Config(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DF_Config, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DF_AdvancedLevel(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DF_AdvancedLevel, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, ""); //always null
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DF_AdvancedLevel(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DF_AdvancedLevel, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DF_Type(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DF_Type, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "Stateful");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DF_Version(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DF_Version, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "");//not associated with a version
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DF_LastChange(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DF_LastChange, value);
	if(ret)
	{
		return -1;
	}*/
	getFirewallLastChaneTime(value);
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DF_LevelNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DF_LevelNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "0");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DF_ChainNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DF_ChainNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}*/
	getFirewallChainNumberOfEntries(value);
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFLt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFLt_Alias, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFLt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFLt_Alias, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFLt_Name(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFLt_Name, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFLt_Name(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFLt_Name, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFLt_Description(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFLt_Description, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFLt_Description(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFLt_Description, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFLt_Order(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFLt_Order, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFLt_Order(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFLt_Order, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFLt_Chain(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFLt_Chain, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFLt_PortMappingEnabled(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFLt_PortMappingEnabled, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFLt_PortMappingEnabled(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFLt_PortMappingEnabled, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFLt_DefaultPolicy(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFLt_DefaultPolicy, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFLt_DefaultPolicy(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFLt_DefaultPolicy, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFLt_DefaultLogPolicy(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFLt_DefaultLogPolicy, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFLt_DefaultLogPolicy(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFLt_DefaultLogPolicy, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFLCt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFLCt_Enable, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFLCt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFLCt_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFLCt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFLCt_Alias, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFLCt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFLCt_Alias, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFLCt_Name(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFLCt_Name, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFLCt_Name(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFLCt_Name, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFLCt_Creator(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFLCt_Creator, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFLCt_RuleNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFLCt_RuleNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFLCt_RuleNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFLCt_RuleNumberOfEntries, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFLCtRt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFLCtRt_Enable, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFLCtRt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFLCtRt_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFLCtRt_Status(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFLCtRt_Status, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFLCtRt_Order(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFLCtRt_Order, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFLCtRt_Order(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFLCtRt_Order, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFLCtRt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFLCtRt_Alias, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFLCtRt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFLCtRt_Alias, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFLCtRt_Description(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFLCtRt_Description, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFLCtRt_Description(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFLCtRt_Description, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFLCtRt_Target(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFLCtRt_Target, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFLCtRt_Target(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFLCtRt_Target, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFLCtRt_TargetChain(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFLCtRt_TargetChain, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFLCtRt_TargetChain(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFLCtRt_TargetChain, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFLCtRt_Log(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFLCtRt_Log, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFLCtRt_Log(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFLCtRt_Log, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFLCtRt_CreationDate(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFLCtRt_CreationDate, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFLCtRt_ExpiryDate(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFLCtRt_ExpiryDate, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFLCtRt_ExpiryDate(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFLCtRt_ExpiryDate, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFLCtRt_SourceInterface(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFLCtRt_SourceInterface, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFLCtRt_SourceInterface(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFLCtRt_SourceInterface, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFLCtRt_SourceInterfaceExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFLCtRt_SourceInterfaceExclude, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFLCtRt_SourceInterfaceExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFLCtRt_SourceInterfaceExclude, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFLCtRt_SourceAllInterfaces(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFLCtRt_SourceAllInterfaces, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFLCtRt_SourceAllInterfaces(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFLCtRt_SourceAllInterfaces, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFLCtRt_DestInterface(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFLCtRt_DestInterface, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFLCtRt_DestInterface(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFLCtRt_DestInterface, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFLCtRt_DestInterfaceExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFLCtRt_DestInterfaceExclude, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFLCtRt_DestInterfaceExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFLCtRt_DestInterfaceExclude, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFLCtRt_DestAllInterfaces(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFLCtRt_DestAllInterfaces, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFLCtRt_DestAllInterfaces(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFLCtRt_DestAllInterfaces, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFLCtRt_IPVersion(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFLCtRt_IPVersion, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFLCtRt_IPVersion(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFLCtRt_IPVersion, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFLCtRt_DestIP(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFLCtRt_DestIP, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFLCtRt_DestIP(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFLCtRt_DestIP, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFLCtRt_DestMask(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFLCtRt_DestMask, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFLCtRt_DestMask(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFLCtRt_DestMask, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFLCtRt_DestIPExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFLCtRt_DestIPExclude, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFLCtRt_DestIPExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFLCtRt_DestIPExclude, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFLCtRt_SourceIP(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFLCtRt_SourceIP, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFLCtRt_SourceIP(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFLCtRt_SourceIP, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFLCtRt_SourceMask(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFLCtRt_SourceMask, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFLCtRt_SourceMask(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFLCtRt_SourceMask, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFLCtRt_SourceIPExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFLCtRt_SourceIPExclude, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFLCtRt_SourceIPExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFLCtRt_SourceIPExclude, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFLCtRt_Protocol(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFLCtRt_Protocol, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFLCtRt_Protocol(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFLCtRt_Protocol, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFLCtRt_ProtocolExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFLCtRt_ProtocolExclude, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFLCtRt_ProtocolExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFLCtRt_ProtocolExclude, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFLCtRt_DestPort(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFLCtRt_DestPort, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFLCtRt_DestPort(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFLCtRt_DestPort, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFLCtRt_DestPortRangeMax(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFLCtRt_DestPortRangeMax, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFLCtRt_DestPortRangeMax(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFLCtRt_DestPortRangeMax, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFLCtRt_DestPortExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFLCtRt_DestPortExclude, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFLCtRt_DestPortExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFLCtRt_DestPortExclude, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFLCtRt_SourcePort(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFLCtRt_SourcePort, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFLCtRt_SourcePort(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFLCtRt_SourcePort, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFLCtRt_SourcePortRangeMax(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFLCtRt_SourcePortRangeMax, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFLCtRt_SourcePortRangeMax(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFLCtRt_SourcePortRangeMax, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFLCtRt_SourcePortExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFLCtRt_SourcePortExclude, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFLCtRt_SourcePortExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFLCtRt_SourcePortExclude, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFLCtRt_DSCP(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFLCtRt_DSCP, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFLCtRt_DSCP(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFLCtRt_DSCP, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFLCtRt_DSCPExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFLCtRt_DSCPExclude, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFLCtRt_DSCPExclude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFLCtRt_DSCPExclude, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DP_MinSampleInterval(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DP_MinSampleInterval, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "0"); //always 0
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DP_MaxReportSamples(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DP_MaxReportSamples, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "0"); //always 0
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DP_SampleSetNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DP_SampleSetNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "0"); //always 0
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DPSt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DPSt_Alias, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DPSt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DPSt_Alias, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DPSt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DPSt_Enable, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DPSt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DPSt_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DPSt_Status(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DPSt_Status, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DPSt_Name(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DPSt_Name, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DPSt_Name(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DPSt_Name, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DPSt_SampleInterval(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DPSt_SampleInterval, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DPSt_SampleInterval(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DPSt_SampleInterval, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DPSt_ReportSamples(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DPSt_ReportSamples, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DPSt_ReportSamples(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DPSt_ReportSamples, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DPSt_TimeReference(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DPSt_TimeReference, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DPSt_TimeReference(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DPSt_TimeReference, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DPSt_FetchSamples(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DPSt_FetchSamples, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DPSt_FetchSamples(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DPSt_FetchSamples, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DPSt_ForceSample(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DPSt_ForceSample, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DPSt_ForceSample(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DPSt_ForceSample, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DPSt_ReportStartTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DPSt_ReportStartTime, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DPSt_ReportEndTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DPSt_ReportEndTime, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DPSt_SampleSeconds(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DPSt_SampleSeconds, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DPSt_ParameterNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DPSt_ParameterNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DPStPt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DPStPt_Alias, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DPStPt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DPStPt_Alias, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DPStPt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DPStPt_Enable, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DPStPt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DPStPt_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DPStPt_Reference(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DPStPt_Reference, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DPStPt_Reference(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DPStPt_Reference, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DPStPt_SampleMode(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DPStPt_SampleMode, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DPStPt_SampleMode(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DPStPt_SampleMode, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DPStPt_CalculationMode(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DPStPt_CalculationMode, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DPStPt_CalculationMode(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DPStPt_CalculationMode, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DPStPt_LowThreshold(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DPStPt_LowThreshold, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DPStPt_LowThreshold(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DPStPt_LowThreshold, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DPStPt_HighThreshold(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DPStPt_HighThreshold, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DPStPt_HighThreshold(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DPStPt_HighThreshold, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DPStPt_SampleSeconds(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DPStPt_SampleSeconds, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DPStPt_SuspectData(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DPStPt_SuspectData, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DPStPt_Values(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DPStPt_Values, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DPStPt_Failures(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DPStPt_Failures, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DS_ExecEnvNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DS_ExecEnvNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "1");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DS_DeploymentUnitNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DS_DeploymentUnitNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}*/
	int num = getDeploymentUnitNumberOfEntries();
	
	sprintf(value, "%d", num);
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DS_ExecutionUnitNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DS_ExecutionUnitNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}*/
	int num = getExecutionUnitNumberOfEntries();
	
	sprintf(value, "%d", num);
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DSEt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DSEt_Enable, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "1"); //always enable
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DSEt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DSEt_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//don't allow to set
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DSEt_Status(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DSEt_Status, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "Up");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DSEt_Reset(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DSEt_Reset, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DSEt_Reset(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DSEt_Reset, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DSEt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DSEt_Alias, value);
	if(ret)
	{
		return -1;
	}*/
	ret = 1; //getting from tr.xml
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DSEt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (!isalpha(value[0]))
		return -2;
	
	if (strlen(value) > 64)
		return -2;
	
	/*ret = do_uci_set(DSEt_Alias, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}*/
	//set to tr.xml
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DSEt_Name(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DSEt_Name, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "opkg");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DSEt_Type(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DSEt_Type, value);
	if(ret)
	{
		return -1;
	}*/
	FILE *fp = NULL;
    char line[512] = {0};
    int i = 0;
	char *p = NULL;
	
	if((fp=popen("opkg -v","r")) != NULL){
		fgets(line,sizeof(line)-1,fp);
    	pclose(fp);
		if ((p = strstr(line, "\n")) != NULL || (p = strstr(line, "\r")) != NULL)
			*p = '\0';
		strcpy(value, line);
		
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DSEt_InitialRunLevel(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DSEt_InitialRunLevel, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DSEt_InitialRunLevel(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DSEt_InitialRunLevel, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DSEt_RequestedRunLevel(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DSEt_RequestedRunLevel, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DSEt_RequestedRunLevel(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DSEt_RequestedRunLevel, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DSEt_CurrentRunLevel(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DSEt_CurrentRunLevel, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DSEt_InitialExecutionUnitRunLevel(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DSEt_InitialExecutionUnitRunLevel, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DSEt_InitialExecutionUnitRunLevel(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DSEt_InitialExecutionUnitRunLevel, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DSEt_Vendor(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DSEt_Vendor, value);
	if(ret)
	{
		return -1;
	}*/
	getMfcInfo("Manufacturer", value);
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DSEt_Version(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DSEt_Version, value);
	if(ret)
	{
		return -1;
	}*/
	getMfcInfo2("FW_VERSION", value);
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DSEt_ParentExecEnv(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DSEt_ParentExecEnv, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DSEt_AllocatedDiskSpace(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DSEt_AllocatedDiskSpace, value);
	if(ret)
	{
		return -1;
	}*/
	getDiskSpace(value, "AllocatedDiskSpace");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DSEt_AvailableDiskSpace(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DSEt_AvailableDiskSpace, value);
	if(ret)
	{
		return -1;
	}*/
	getDiskSpace(value, "AvailableDiskSpace");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DSEt_AllocatedMemory(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DSEt_AllocatedMemory, value);
	if(ret)
	{
		return -1;
	}*/
	getMemoryInfo(value, "MemTotal:");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DSEt_AvailableMemory(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DSEt_AvailableMemory, value);
	if(ret)
	{
		return -1;
	}*/
	getMemoryInfo(value, "MemFree:");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DSEt_ActiveExecutionUnits(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DSEt_ActiveExecutionUnits, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DSEt_ProcessorRefList(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DSEt_ProcessorRefList, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "Device.DeviceInfo.Processor.1,Device.DeviceInfo.Processor.2");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DSDt_UUID(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DSDt_UUID, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DSDt_DUID(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DSDt_DUID, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DSDt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DSDt_Alias, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DSDt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DSDt_Alias, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DSDt_Name(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DSDt_Name, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DSDt_Status(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DSDt_Status, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DSDt_Resolved(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DSDt_Resolved, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DSDt_URL(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DSDt_URL, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DSDt_Description(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DSDt_Description, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DSDt_Vendor(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DSDt_Vendor, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DSDt_Version(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DSDt_Version, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DSDt_VendorLogList(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DSDt_VendorLogList, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DSDt_VendorConfigList(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DSDt_VendorConfigList, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DSDt_ExecutionUnitList(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DSDt_ExecutionUnitList, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DSDt_ExecutionEnvRef(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DSDt_ExecutionEnvRef, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DSEt_EUID(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DSEt_EUID, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DSEt_Alias_4100(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DSEt_Alias_4100, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DSEt_Alias_4100(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DSEt_Alias_4100, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DSEt_Name_4102(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DSEt_Name_4102, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DSEt_ExecEnvLabel(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DSEt_ExecEnvLabel, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DSEt_Status_4104(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DSEt_Status_4104, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DSEt_RequestedState(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DSEt_RequestedState, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DSEt_RequestedState(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DSEt_RequestedState, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DSEt_ExecutionFaultCode(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DSEt_ExecutionFaultCode, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DSEt_ExecutionFaultMessage(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DSEt_ExecutionFaultMessage, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DSEt_AutoStart(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DSEt_AutoStart, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DSEt_AutoStart(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DSEt_AutoStart, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DSEt_RunLevel(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DSEt_RunLevel, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DSEt_RunLevel(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DSEt_RunLevel, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DSEt_Vendor_4113(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DSEt_Vendor_4113, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DSEt_Version_4114(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DSEt_Version_4114, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DSEt_Description(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DSEt_Description, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DSEt_DiskSpaceInUse(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DSEt_DiskSpaceInUse, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DSEt_MemoryInUse(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DSEt_MemoryInUse, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DSEt_References(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DSEt_References, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DSEt_AssociatedProcessList(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DSEt_AssociatedProcessList, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DSEt_VendorLogList(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DSEt_VendorLogList, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DSEt_VendorConfigList(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DSEt_VendorConfigList, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DSEt_SupportedDataModelList(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DSEt_SupportedDataModelList, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DSEt_ExecutionEnvRef(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DSEt_ExecutionEnvRef, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DF_SupportedAlarmNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DF_SupportedAlarmNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DF_MaxCurrentAlarmEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DF_MaxCurrentAlarmEntries, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DF_CurrentAlarmNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DF_CurrentAlarmNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DF_HistoryEventNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DF_HistoryEventNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DF_ExpeditedEventNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DF_ExpeditedEventNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DF_QueuedEventNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DF_QueuedEventNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFSt_EventType(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFSt_EventType, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFSt_ProbableCause(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFSt_ProbableCause, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFSt_SpecificProblem(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFSt_SpecificProblem, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFSt_PerceivedSeverity(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFSt_PerceivedSeverity, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFSt_ReportingMechanism(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFSt_ReportingMechanism, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFSt_ReportingMechanism(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFSt_ReportingMechanism, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFCt_AlarmIdentifier(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFCt_AlarmIdentifier, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFCt_AlarmRaisedTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFCt_AlarmRaisedTime, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFCt_AlarmChangedTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFCt_AlarmChangedTime, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFCt_ManagedObjectInstance(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFCt_ManagedObjectInstance, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFCt_EventType(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFCt_EventType, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFCt_ProbableCause(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFCt_ProbableCause, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFCt_SpecificProblem(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFCt_SpecificProblem, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFCt_PerceivedSeverity(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFCt_PerceivedSeverity, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFCt_AdditionalText(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFCt_AdditionalText, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFCt_AdditionalInformation(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFCt_AdditionalInformation, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFHt_EventTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFHt_EventTime, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFHt_AlarmIdentifier(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFHt_AlarmIdentifier, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFHt_NotificationType(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFHt_NotificationType, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFHt_ManagedObjectInstance(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFHt_ManagedObjectInstance, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFHt_EventType(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFHt_EventType, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFHt_ProbableCause(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFHt_ProbableCause, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFHt_SpecificProblem(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFHt_SpecificProblem, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFHt_PerceivedSeverity(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFHt_PerceivedSeverity, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFHt_AdditionalText(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFHt_AdditionalText, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFHt_AdditionalInformation(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFHt_AdditionalInformation, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFEt_EventTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFEt_EventTime, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFEt_AlarmIdentifier(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFEt_AlarmIdentifier, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFEt_NotificationType(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFEt_NotificationType, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFEt_ManagedObjectInstance(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFEt_ManagedObjectInstance, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFEt_EventType(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFEt_EventType, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFEt_ProbableCause(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFEt_ProbableCause, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFEt_SpecificProblem(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFEt_SpecificProblem, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFEt_PerceivedSeverity(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFEt_PerceivedSeverity, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFEt_AdditionalText(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFEt_AdditionalText, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFEt_AdditionalInformation(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFEt_AdditionalInformation, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFQt_EventTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFQt_EventTime, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFQt_AlarmIdentifier(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFQt_AlarmIdentifier, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFQt_NotificationType(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFQt_NotificationType, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFQt_ManagedObjectInstance(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFQt_ManagedObjectInstance, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFQt_EventType(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFQt_EventType, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFQt_ProbableCause(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFQt_ProbableCause, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFQt_SpecificProblem(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFQt_SpecificProblem, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFQt_PerceivedSeverity(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFQt_PerceivedSeverity, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFQt_AdditionalText(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFQt_AdditionalText, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFQt_AdditionalInformation(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFQt_AdditionalInformation, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DS_CertificateNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DS_CertificateNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DSCt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DSCt_Enable, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DSCt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DSCt_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DSCt_LastModif(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DSCt_LastModif, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DSCt_SerialNumber(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DSCt_SerialNumber, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DSCt_Issuer(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DSCt_Issuer, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DSCt_NotBefore(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DSCt_NotBefore, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DSCt_NotAfter(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DSCt_NotAfter, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DSCt_Subject(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DSCt_Subject, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DSCt_SubjectAlt(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DSCt_SubjectAlt, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DSCt_SignatureAlgorithm(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DSCt_SignatureAlgorithm, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFG_ScanOnBoot(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFG_ScanOnBoot, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFG_ScanOnBoot(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFG_ScanOnBoot, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFG_ScanPeriodically(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFG_ScanPeriodically, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFG_ScanPeriodically(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFG_ScanPeriodically, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFG_PeriodicInterval(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFG_PeriodicInterval, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFG_PeriodicInterval(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFG_PeriodicInterval, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFG_PeriodicTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFG_PeriodicTime, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFG_PeriodicTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFG_PeriodicTime, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFG_ContinuousGPS(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFG_ContinuousGPS, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFG_ContinuousGPS(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFG_ContinuousGPS, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFG_ScanTimeout(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFG_ScanTimeout, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFG_ScanTimeout(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFG_ScanTimeout, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFG_ScanStatus(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFG_ScanStatus, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFG_ErrorDetails(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFG_ErrorDetails, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFG_LastScanTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFG_LastScanTime, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFG_LastSuccessfulScanTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFG_LastSuccessfulScanTime, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFG_LockedLatitude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFG_LockedLatitude, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFG_LockedLongitude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFG_LockedLongitude, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFG_NumberOfSatellites(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFG_NumberOfSatellites, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFG_GPSReset(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFG_GPSReset, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFG_GPSReset(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFG_GPSReset, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFGC_CurrentFix(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFGC_CurrentFix, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFGC_GotFix(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFGC_GotFix, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFGC_TimingGood(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFGC_TimingGood, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFGC_Latitude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFGC_Latitude, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFGC_Longitude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFGC_Longitude, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFGC_Elevation(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFGC_Elevation, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFGC_LastFixTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFGC_LastFixTime, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFGC_LastFixDuration(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFGC_LastFixDuration, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFGC_FirstFixTimeout(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFGC_FirstFixTimeout, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFGC_FirstFixTimeout(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFGC_FirstFixTimeout, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFGC_SatellitesTracked(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFGC_SatellitesTracked, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFGC_SatelliteTrackingInterval(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFGC_SatelliteTrackingInterval, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFGC_SatelliteTrackingInterval(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFGC_SatelliteTrackingInterval, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFGC_ReceiverStatus(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFGC_ReceiverStatus, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFGC_LocationType(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFGC_LocationType, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFGC_LockTimeOutDuration(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFGC_LockTimeOutDuration, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFGC_LockTimeOutDuration(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFGC_LockTimeOutDuration, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFGA_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFGA_Enable, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFGA_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFGA_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFGA_ServerURL(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFGA_ServerURL, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFGA_ServerURL(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFGA_ServerURL, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFGA_ServerPort(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFGA_ServerPort, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFGA_ServerPort(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFGA_ServerPort, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFGA_Username(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFGA_Username, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFGA_Username(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFGA_Username, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFGA_Password(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFGA_Password, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFGA_Password(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFGA_Password, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFGA_ReferenceLatitude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFGA_ReferenceLatitude, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFGA_ReferenceLatitude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFGA_ReferenceLatitude, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFGA_ReferenceLongitude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFGA_ReferenceLongitude, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFGA_ReferenceLongitude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFGA_ReferenceLongitude, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFGA_ServerInUse(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFGA_ServerInUse, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFP_ConfigNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFP_ConfigNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFPCt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFPCt_Enable, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFPCt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFPCt_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFPCt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFPCt_Alias, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFPCt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFPCt_Alias, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFPCt_URL(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFPCt_URL, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFPCt_URL(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFPCt_URL, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFPCt_Username(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFPCt_Username, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFPCt_Username(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFPCt_Username, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFPCt_Password(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFPCt_Password, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFPCt_Password(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFPCt_Password, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFPCt_PeriodicUploadInterval(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFPCt_PeriodicUploadInterval, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFPCt_PeriodicUploadInterval(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFPCt_PeriodicUploadInterval, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFPCt_PeriodicUploadTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFPCt_PeriodicUploadTime, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFPCt_PeriodicUploadTime(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFPCt_PeriodicUploadTime, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFA_Version(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFA_Version, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFA_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFA_Enable, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFA_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFA_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFA_Status(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFA_Status, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFA_MaxNumberOfApplications(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFA_MaxNumberOfApplications, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFA_CurrentNumberofApplications(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFA_CurrentNumberofApplications, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFAC_PresenceApplicationSupport(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFAC_PresenceApplicationSupport, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFAC_FemtoAwarenessAPISupport(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFAC_FemtoAwarenessAPISupport, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFAC_SMSAPISupport(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFAC_SMSAPISupport, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFAC_SubscribeToNotificationsOfSMSSentToApplicationSupport(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFAC_SubscribeToNotificationsOfSMSSentToApplicationSupport, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFAC_QuerySMSDeliveryStatusSupport(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFAC_QuerySMSDeliveryStatusSupport, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFAC_MMSAPISupport(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFAC_MMSAPISupport, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFAC_QueryMMSDeliveryStatusSupport(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFAC_QueryMMSDeliveryStatusSupport, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFAC_SubscribeToNotificationsOfMMSSentToApplicationSupport(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFAC_SubscribeToNotificationsOfMMSSentToApplicationSupport, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFAC_TerminalLocationAPISupport(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFAC_TerminalLocationAPISupport, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFAC_AuthenticationMethodsSupported(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFAC_AuthenticationMethodsSupported, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFAC_AccessLevelsSupported(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFAC_AccessLevelsSupported, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFAC_SendSMSTargetAddressType(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFAC_SendSMSTargetAddressType, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFAC_SendMMSTargetAddressType(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFAC_SendMMSTargetAddressType, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFAC_AuthenticationMethod(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFAC_AuthenticationMethod, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFAC_AuthenticationMethod(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFAC_AuthenticationMethod, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFAC_TunnelInst(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFAC_TunnelInst, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFAC_TunnelInst(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFAC_TunnelInst, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFACF_APIEnable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFACF_APIEnable, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFACF_APIEnable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFACF_APIEnable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFACF_QueueEnable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFACF_QueueEnable, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFACF_QueueEnable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFACF_QueueEnable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFACF_Queueing(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFACF_Queueing, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFACF_Queueing(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFACF_Queueing, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFACF_MaxAPIUsersNumber(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFACF_MaxAPIUsersNumber, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFACF_MaxAPIUsersNumber(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFACF_MaxAPIUsersNumber, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFACF_FemtozoneID(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFACF_FemtozoneID, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFACF_FemtozoneID(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFACF_FemtozoneID, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFACF_NotificationsUserIdentifierMSISDN(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFACF_NotificationsUserIdentifierMSISDN, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFACF_NotificationsUserIdentifierMSISDN(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFACF_NotificationsUserIdentifierMSISDN, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFACF_SubscribeToNotificationsResponseCallbackData(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFACF_SubscribeToNotificationsResponseCallbackData, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFACF_SubscribeToNotificationsResponseCallbackData(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFACF_SubscribeToNotificationsResponseCallbackData, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFACF_QueryFemtocellResponseTimezone(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFACF_QueryFemtocellResponseTimezone, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFACF_QueryFemtocellResponseTimezone(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFACF_QueryFemtocellResponseTimezone, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFACS_APIEnable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFACS_APIEnable, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFACS_APIEnable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFACS_APIEnable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFACS_QueueEnable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFACS_QueueEnable, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFACS_QueueEnable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFACS_QueueEnable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFACS_Queueing(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFACS_Queueing, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFACS_Queueing(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFACS_Queueing, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFACS_MaxAPIUsersNumber(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFACS_MaxAPIUsersNumber, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFACS_MaxAPIUsersNumber(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFACS_MaxAPIUsersNumber, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFACS_MinSendSMSTimeInterval(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFACS_MinSendSMSTimeInterval, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFACS_MinSendSMSTimeInterval(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFACS_MinSendSMSTimeInterval, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFACS_EnableQuerySMSDeliveryStatus(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFACS_EnableQuerySMSDeliveryStatus, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFACS_EnableQuerySMSDeliveryStatus(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFACS_EnableQuerySMSDeliveryStatus, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFACS_EnableSubscribeToNotificationsOfMessageSentToApplication(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFACS_EnableSubscribeToNotificationsOfMessageSentToApplication, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFACS_EnableSubscribeToNotificationsOfMessageSentToApplication(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFACS_EnableSubscribeToNotificationsOfMessageSentToApplication, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFACM_APIEnable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFACM_APIEnable, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFACM_APIEnable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFACM_APIEnable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFACM_QueueEnable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFACM_QueueEnable, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFACM_QueueEnable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFACM_QueueEnable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFACM_Queueing(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFACM_Queueing, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFACM_Queueing(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFACM_Queueing, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFACM_MaxAPIUsersNumber(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFACM_MaxAPIUsersNumber, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFACM_MaxAPIUsersNumber(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFACM_MaxAPIUsersNumber, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFACM_MinSendMMSTimeInterval(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFACM_MinSendMMSTimeInterval, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFACM_MinSendMMSTimeInterval(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFACM_MinSendMMSTimeInterval, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFACM_EnableQueryMMSDeliveryStatus(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFACM_EnableQueryMMSDeliveryStatus, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFACM_EnableQueryMMSDeliveryStatus(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFACM_EnableQueryMMSDeliveryStatus, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFACM_EnableSubscribeToNotificationsOfMessageSentToApplication(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFACM_EnableSubscribeToNotificationsOfMessageSentToApplication, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFACM_EnableSubscribeToNotificationsOfMessageSentToApplication(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFACM_EnableSubscribeToNotificationsOfMessageSentToApplication, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFACT_APIEnable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFACT_APIEnable, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFACT_APIEnable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFACT_APIEnable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFACT_QueueEnable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFACT_QueueEnable, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFACT_QueueEnable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFACT_QueueEnable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFACT_Queueing(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFACT_Queueing, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFACT_Queueing(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFACT_Queueing, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFACT_MaxAPIUsersNumber(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFACT_MaxAPIUsersNumber, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFACT_MaxAPIUsersNumber(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFACT_MaxAPIUsersNumber, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFACT_QueryMobileLocationResponseAddress(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFACT_QueryMobileLocationResponseAddress, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFACT_QueryMobileLocationResponseAddress(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFACT_QueryMobileLocationResponseAddress, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFACT_QueryMobileLocationResponseLongitudeLatitude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFACT_QueryMobileLocationResponseLongitudeLatitude, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFACT_QueryMobileLocationResponseLongitudeLatitude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFACT_QueryMobileLocationResponseLongitudeLatitude, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFACT_QueryMobileLocationResponseAltitude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFACT_QueryMobileLocationResponseAltitude, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFACT_QueryMobileLocationResponseAltitude(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFACT_QueryMobileLocationResponseAltitude, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFACT_QueryMobileLocationResponseTimestamp(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFACT_QueryMobileLocationResponseTimestamp, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFACT_QueryMobileLocationResponseTimestamp(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFACT_QueryMobileLocationResponseTimestamp, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFAM_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFAM_Enable, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFAM_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFAM_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFAM_MonitoringInterval(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFAM_MonitoringInterval, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DFAM_MonitoringInterval(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DFAM_MonitoringInterval, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DFAM_AuthenticationRequestsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFAM_AuthenticationRequestsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFAM_AuthenticationRequestsRejected(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFAM_AuthenticationRequestsRejected, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFAMF_APIAvailable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFAMF_APIAvailable, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFAMF_APIUsers(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFAMF_APIUsers, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFAMF_QueueState(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFAMF_QueueState, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFAMF_QueueNum(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFAMF_QueueNum, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFAMF_QueueReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFAMF_QueueReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFAMF_QueueDiscarded(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFAMF_QueueDiscarded, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFAMS_APIAvailable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFAMS_APIAvailable, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFAMS_APIUsers(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFAMS_APIUsers, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFAMS_QueueState(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFAMS_QueueState, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFAMS_QueueNum(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFAMS_QueueNum, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFAMS_QueueReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFAMS_QueueReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFAMS_QueueDiscarded(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFAMS_QueueDiscarded, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFAMM_APIAvailable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFAMM_APIAvailable, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFAMM_APIUsers(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFAMM_APIUsers, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFAMM_QueueState(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFAMM_QueueState, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFAMM_QueueNum(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFAMM_QueueNum, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFAMM_QueueReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFAMM_QueueReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFAMM_QueueDiscarded(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFAMM_QueueDiscarded, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFAMT_APIAvailable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFAMT_APIAvailable, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFAMT_APIUsers(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFAMT_APIUsers, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFAMT_QueueState(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFAMT_QueueState, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFAMT_QueueNum(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFAMT_QueueNum, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFAMT_QueueReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFAMT_QueueReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DFAMT_QueueDiscarded(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DFAMT_QueueDiscarded, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DB_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DB_Enable, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DB_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DB_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DB_Status(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DB_Status, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DB_MinReportingInterval(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DB_MinReportingInterval, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DB_Protocols(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DB_Protocols, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DB_EncodingTypes(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DB_EncodingTypes, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DB_MaxNumberOfProfiles(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DB_MaxNumberOfProfiles, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DB_MaxNumberOfParameterReferences(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DB_MaxNumberOfParameterReferences, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DB_ProfileNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DB_ProfileNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DBPt_Enable_4377(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DBPt_Enable_4377, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DBPt_Enable_4377(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DBPt_Enable_4377, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DBPt_Alias_4379(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DBPt_Alias_4379, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DBPt_Alias_4379(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DBPt_Alias_4379, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DBPt_Protocol(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DBPt_Protocol, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DBPt_Protocol(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DBPt_Protocol, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DBPt_EncodingType(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DBPt_EncodingType, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DBPt_EncodingType(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DBPt_EncodingType, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DBPt_ReportingInterval(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DBPt_ReportingInterval, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DBPt_ReportingInterval(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DBPt_ReportingInterval, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DBPt_TimeReference(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DBPt_TimeReference, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DBPt_TimeReference(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DBPt_TimeReference, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DBPt_StreamingHost(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DBPt_StreamingHost, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DBPt_StreamingHost(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DBPt_StreamingHost, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DBPt_StreamingPort(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DBPt_StreamingPort, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DBPt_StreamingPort(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DBPt_StreamingPort, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DBPt_StreamingSessionID(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DBPt_StreamingSessionID, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DBPt_StreamingSessionID(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DBPt_StreamingSessionID, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DBPt_FileTransferURL(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DBPt_FileTransferURL, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DBPt_FileTransferURL(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DBPt_FileTransferURL, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DBPt_FileTransferUsername(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DBPt_FileTransferUsername, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DBPt_FileTransferUsername(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DBPt_FileTransferUsername, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DBPt_FileTransferPassword(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DBPt_FileTransferPassword, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DBPt_FileTransferPassword(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DBPt_FileTransferPassword, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DBPt_ControlFileFormat(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DBPt_ControlFileFormat, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DBPt_ControlFileFormat(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DBPt_ControlFileFormat, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DBPt_ParameterNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DBPt_ParameterNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DBPt_ParameterNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DBPt_ParameterNumberOfEntries, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DBPtPt_Reference(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DBPtPt_Reference, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DBPtPt_Reference(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DBPtPt_Reference, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DX_ConnectionNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
#ifdef XMPP	
	ret = do_uci_get(DX_ConnectionNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}
#else
	strcpy(value,"0");
#endif
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DXCt_Enable(char * path_name, char *value)
{
	int ret = 0, instance;
	char cmd[64]={0};
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char *index = parseTemplate(path_name,".Connection." );
	instance = atoi(index);

	sprintf(cmd,"%s%d.Enable",XMPP_CON, instance );
	tr_log(LOG_DEBUG,"cmd_str[%s]",cmd);

	ret = do_uci_get( cmd, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	
	return 0;
}
int set_DXCt_Enable(char * path_name, char *value)
{
	char cmd[64]={0},curValue[64]={0},portStr[32]={0};
	int ret = 0, instance,state;
	tr_log(LOG_DEBUG,"path_name[%s] value[%s]",path_name,value);
	char *index = parseTemplate(path_name,".Connection." );

	instance = atoi(index);
	ret = validate_args_boolean(value );

 	if(ret)
 	{
		tr_log(LOG_ERROR,"path[%s] invalid value[%s]",path_name,value);
 		return -1;
 	}

	sprintf(cmd,"%s%d.Enable",XMPP_CON, instance );

	tr_log(LOG_DEBUG,"cmd_str[%s]",cmd);

	ret = do_uci_get( cmd, curValue);
	if(ret)
	{
		return -1;
	}


	sprintf(cmd,"%s%d.Enable",XMPP_CON, instance );
	tr_log(LOG_DEBUG,"cmd_str[%s][%s]",cmd,value);

	//create an instance in uci connection config
	ret = do_uci_set(cmd,value);
	  
 	if(ret)
 	{
 		return (-1);
 	}

	//now set the status to disabled
	sprintf(cmd,"%s%d.Status",XMPP_CON, instance );
	tr_log(LOG_DEBUG,"cmd_str[%s]",cmd);
/*
	if(state == 0)
		ret = do_uci_set( cmd,"disabled");
	if(state == 1)
		ret = do_uci_set( cmd,"enabled");
*/
	if(ret)
	{
		   return -1;
	}
	
	ret = do_uci_commit(X_CONNECTION);
	if(ret)
 	{
		return (-1);
	}

	//not start or stop the xmpp agent
	//if changed
	if(strcmp(value, curValue ) != 0)
	{
		if( (strcmp(value, "false" ) == 0) || ( strcmp(value, "0" ) == 0))
 		{
 			do_uci_set( cmd,"disabled");
			x_xmpp_agent_stop(instance );
		}
		else 
		{
			do_uci_set( cmd,"enabled");
			x_xmpp_agent_start(instance );
 		}
 	}

 	tr_log(LOG_DEBUG,"set value [%s]",value);
 	return ret;
}
int x_generic_set(char *path_name, const char *format, char *value )
{
	int ret = 0, instance;
	char cmd[X_CMD_SZ];
 	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char *index = parseTemplate(path_name,".Connection." );

	instance = atoi(index);
	sprintf(cmd,format, instance );

	ret = do_uci_set(cmd, value);
 	if(ret)
 	{
 		return -1;
 	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
 	return ret;
}
int x_generic_get(char *path_name, const char *format, char *value )
{
	int ret = 0, instance;
	char cmd[X_CMD_SZ];
 	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char *index = parseTemplate(path_name,".Connection." );

	instance = atoi(index);
	sprintf(cmd,format, instance );

	ret = do_uci_get(cmd, value);
 	if(ret)
 	{
		return -1;
 	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
 	return ret;
}
int get_DXCt_Alias(char * path_name, char *value)
{
	return x_generic_get(path_name, DXCt_Alias, value );
}
int set_DXCt_Alias(char * path_name, char *value)
{
	int ret = 0;

	if(strlen(value) > X_ALIAS_SZ)
 		return -1;

	ret = x_generic_set(path_name, DXCt_Alias, value );
	if(ret != -1)
		x_xmpp_agent_restart(index );

 	return ret;
}
int get_DXCt_Username(char * path_name, char *value)
{
	return x_generic_get(path_name, DXCt_Username, value );
}
int set_DXCt_Username(char * path_name, char *value)
{
	int ret = 0;

	if(strlen(value) > X_UNAME_MAX_SZ )
		return -1;

	ret = x_generic_set(path_name, DXCt_Username, value );
	if(ret != -1)
		x_xmpp_agent_restart(index );

 	return ret;
}
int get_DXCt_Password(char * path_name, char *value)
{
	return x_generic_get(path_name, DXCt_Password, value );
}
int set_DXCt_Password(char * path_name, char *value)
{
	int ret = 0;

	if(strlen(value) > X_PWD_MAX_SZ )
 		return -1;

	ret = x_generic_set(path_name, DXCt_Password, value );
	if(ret != -1)
		x_xmpp_agent_restart(index );

 	return ret;
}
int get_DXCt_Domain(char * path_name, char *value)
{
	return x_generic_get(path_name, DXCt_Domain, value );
}
int set_DXCt_Domain(char * path_name, char *value)
{
	int ret = 0;

	if(strlen(value) > X_DOMAIN_MAX_SZ )
		return -1;

	ret = x_generic_set(path_name, DXCt_Domain, value );
	if(ret != -1)
		x_xmpp_agent_restart(index );

 	return ret;
}
int get_DXCt_Resource(char * path_name, char *value)
{
	return x_generic_get(path_name, DXCt_Resource, value );
}
int set_DXCt_Resource(char * path_name, char *value)
{
	int ret = 0;

	if(strlen(value) > X_RESOURCE_MAX_SZ )
		return -1;

	ret = x_generic_set(path_name, DXCt_Resource, value );
	if(ret != -1)
		x_xmpp_agent_restart(index );

 	return ret;
}
int get_DXCt_JabberID(char * path_name, char *value)
{
	return x_generic_get(path_name, DXCt_JabberID, value );
}
int get_DXCt_Status(char * path_name, char *value)
{
	return x_generic_get(path_name, DXCt_Status, value );
}
int get_DXCt_LastChangeDate(char * path_name, char *value)
{
	return x_generic_get(path_name, DXCt_LastChangeDate, value );
}
int get_DXCt_ServerConnectAlgorithm(char * path_name, char *value)
{
	return x_generic_get(path_name, DXCt_ServerConnectAlgorithm, value );
}
int set_DXCt_ServerConnectAlgorithm(char * path_name, char *value)
{
	int ret = 0;

	if(strlen(value) > X_SRV_CNCT_ALG_MAX_SZ )
		return -1;

	ret = x_generic_set(path_name, DXCt_ServerConnectAlgorithm, value );
	if(ret != -1)
		x_xmpp_agent_restart(index );

 	return ret;
}
int get_DXCt_KeepAliveInterval(char * path_name, char *value)
{
	return x_generic_get(path_name, DXCt_KeepAliveInterval, value );
}
int set_DXCt_KeepAliveInterval(char * path_name, char *value)
{
	int ret = 0;

	if(strlen(value) > X_INT_MAX_SZ )
		return -1;

	ret = x_generic_set(path_name, DXCt_KeepAliveInterval, value );
	if(ret != -1)
		x_xmpp_agent_restart(index );

 	return ret;
}
int get_DXCt_ServerConnectAttempts(char * path_name, char *value)
{
	return x_generic_get(path_name, DXCt_ServerConnectAttempts, value );
}
int set_DXCt_ServerConnectAttempts(char * path_name, char *value)
{
	int ret = 0;

	if(strlen(value) > X_INT_MAX_SZ )
		return -1;


	ret = x_generic_set(path_name, DXCt_ServerConnectAttempts, value );
	if(ret != -1)
		x_xmpp_agent_restart(index );

 	return ret;
}
int get_DXCt_ServerRetryInitialInterval(char * path_name, char *value)
{
	return x_generic_get(path_name, DXCt_ServerRetryInitialInterval, value );
}
int set_DXCt_ServerRetryInitialInterval(char * path_name, char *value)
{
	int ret = 0;

	if(strlen(value) > X_INT_MAX_SZ )
		return -1;

	ret = x_generic_set(path_name, DXCt_ServerRetryInitialInterval, value );
	if(ret != -1)
		x_xmpp_agent_restart(index );

 	return ret;
}
int get_DXCt_ServerRetryIntervalMultiplier(char * path_name, char *value)
{
	return x_generic_get(path_name, DXCt_ServerRetryIntervalMultiplier, value );
}
int set_DXCt_ServerRetryIntervalMultiplier(char * path_name, char *value)
{
	int ret = 0;

	if(strlen(value) > X_INT_MAX_SZ )
		return -1;

	ret = x_generic_set(path_name, DXCt_ServerRetryIntervalMultiplier, value );
	if(ret != -1)
		x_xmpp_agent_restart(index );

 	return ret;
}
int get_DXCt_ServerRetryMaxInterval(char * path_name, char *value)
{
	return x_generic_get(path_name, DXCt_ServerRetryMaxInterval, value );
}
int set_DXCt_ServerRetryMaxInterval(char * path_name, char *value)
{
	int ret = 0;

	if(strlen(value) > X_INT_MAX_SZ )
		return -1;

	ret = x_generic_set(path_name, DXCt_ServerRetryMaxInterval, value );
	if(ret != -1)
		x_xmpp_agent_restart(index );

 	return ret;
}
int get_DXCt_UseTLS(char * path_name, char *value)
{
	return x_generic_get(path_name, DXCt_UseTLS, value );
}
int set_DXCt_UseTLS(char * path_name, char *value)
{
	int ret = 0;

	if(strlen(value) > X_INT_MAX_SZ )
		return -1;

	ret = x_generic_set(path_name, DXCt_UseTLS, value );
	if(ret != -1)
		x_xmpp_agent_restart(index );

 	return ret;
}
int get_DXCt_TLSEstablished(char * path_name, char *value)
{
	return x_generic_get(path_name, DXCt_TLSEstablished, value );
}
int get_DXCt_ServerNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DXCt_ServerNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DXCtSt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DXCtSt_Enable, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DXCtSt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DXCtSt_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DXCtSt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DXCtSt_Alias, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DXCtSt_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DXCtSt_Alias, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DXCtSt_Priority(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DXCtSt_Priority, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DXCtSt_Priority(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DXCtSt_Priority, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DXCtSt_Weight(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DXCtSt_Weight, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DXCtSt_Weight(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DXCtSt_Weight, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DXCtSt_ServerAddress(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DXCtSt_ServerAddress, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DXCtSt_ServerAddress(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DXCtSt_ServerAddress, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DXCtSt_Port(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DXCtSt_Port, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DXCtSt_Port(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (checkPortUsing(atoi(value)) == 1)
		return -2;
	
	ret = do_uci_set(DXCtSt_Port, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DXCtS_ReceivedMessages(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DXCtS_ReceivedMessages, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DXCtS_TransmittedMessages(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DXCtS_TransmittedMessages, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DXCtS_ReceivedErrorMessages(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DXCtS_ReceivedErrorMessages, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DXCtS_TransmittedErrorMessages(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DXCtS_TransmittedErrorMessages, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DI_Version(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/* ret = do_uci_get(DI_Version, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "1905.1");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIA_IEEE1905Id(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIA_IEEE1905Id, value);
	if(ret)
	{
		return -1;
	}*/
	getInfaceMac("br-lan",value);
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIA_Status(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	//ret = do_uci_get(DIA_Status, value);
	ret = do_uci_get("hyd.config.Enable", value);
	if(ret)
	{
		strcpy(value, "Error_Misconfigured");
	}
	if(strcmp(value,"1") == 0){
		strcpy(value, "Enabled");
	}else if (strcmp(value,"0") == 0){
		strcpy(value, "Disabled");
	}else	
		strcpy(value, "Error_Misconfigured");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIA_LastChange(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIA_LastChange, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIA_LowerLayers(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIA_LowerLayers, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIA_RegistrarFreqBand(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIA_RegistrarFreqBand, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "802.11 2.4 GHz,802.11 5 GHz");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIA_InterfaceNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIA_InterfaceNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}*/
	FILE *fp = NULL;
    char line[256] = {0};
    int i = 0;

	if((fp=popen("hyctl show","r")) != NULL)
	{
		fgets(line,sizeof(line)-1,fp);
		fgets(line,sizeof(line)-1,fp);
		while(fgets(line, sizeof(line), fp))
		{
			i++;
		}
		pclose(fp);
	}
	else
	{
		strcpy(value, "0");
	}
	if(i > 0)
	{
		i = i - 1;
	}
	sprintf(value, "%d", i);
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIAIt_InterfaceId(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIAIt_InterfaceId, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Interface.");
	char mac[32] = {0};

	if (index != NULL){
		ret = lib_getvalue_mapfile_byinstance(IEEE1905ALInterfaceMap, mac, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			strcpy(value, mac);
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIAIt_Status(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIAIt_Status, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIAIt_LastChange(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIAIt_LastChange, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIAIt_LowerLayers(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIAIt_LowerLayers, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIAIt_InterfaceStackReference(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIAIt_InterfaceStackReference, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Interface.");
	char mac[32] = {0};
	char inf[32] = {0};

	if (index != NULL){
		ret = lib_getvalue_mapfile_byinstance(IEEE1905ALInterfaceMap, mac, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			getInfaceName(inf, mac);
			tr_log(LOG_DEBUG,"get inf [%s]",inf);
			if(strstr(inf, "ath0") != NULL)
			{
				strcpy(value, WIFI_RADIO_5G_PATH);
			}
			else if(strstr(inf, "ath1") != NULL)
			{
				strcpy(value, WIFI_RADIO_24G_PATH);
			}				
			else if(strstr(inf, "eth") != NULL)
			{
				strcpy(value, ETHERNET_LAN_INTERFACE_PATH);
			}
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIAIt_MediaType(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIAIt_MediaType, value);
	if(ret)
	{
		return -1;
	}*/
	char *index = parseTemplate(path_name, ".Interface.");
	char mac[32] = {0};
	char inf[32] = {0};
	char buff[32] = {0};

	if (index != NULL){
		ret = lib_getvalue_mapfile_byinstance(IEEE1905ALInterfaceMap, mac, atoi(index));
		if(ret)
		{
			return (-1);
		}
		else
		{
			getInfaceName(inf, mac);
			tr_log(LOG_DEBUG,"get inf [%s]",inf);
			if(strstr(inf, "ath0") != NULL)
			{
				do_uci_get("wireless.wifi0.hwmode", buff);
				if(strcmp(buff, "11n") == 0)
				{
					sprintf(value, "IEEE 802.%s 5.0", buff);
				}
				else
				{
					sprintf(value, "IEEE 802.%s", buff);
				}
			}
			else if(strstr(inf, "ath1") != NULL)
			{
				do_uci_get("wireless.wifi1.hwmode", buff);
				if(strcmp(buff, "11n") == 0)
				{
					sprintf(value, "IEEE 802.%s 2.4", buff);
				}
				else
				{
					sprintf(value, "IEEE 802.%s", buff);
				}
			}				
			else if(strstr(inf, "eth") != NULL)
			{
				strcpy(value, "IEEE 802.3ab");
			}
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIAIt_GenericPhyOUI(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIAIt_GenericPhyOUI, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIAIt_GenericPhyVariant(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIAIt_GenericPhyVariant, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIAIt_GenericPhyURL(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIAIt_GenericPhyURL, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIAIt_SetIntfPowerStateEnabled(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIAIt_SetIntfPowerStateEnabled, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIAIt_SetIntfPowerStateEnabled(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIAIt_SetIntfPowerStateEnabled, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIAIt_PowerState(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIAIt_PowerState, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIAIt_PowerState(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIAIt_PowerState, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIAIt_VendorPropertiesNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIAIt_VendorPropertiesNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIAIt_LinkNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIAIt_LinkNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIAItVt_OUI(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIAItVt_OUI, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIAItVt_Information(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIAItVt_Information, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIAItLt_InterfaceId(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIAItLt_InterfaceId, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIAItLt_IEEE1905Id(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIAItLt_IEEE1905Id, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIAItLt_MediaType(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIAItLt_MediaType, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIAItLt_GenericPhyOUI(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIAItLt_GenericPhyOUI, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIAItLt_GenericPhyVariant(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIAItLt_GenericPhyVariant, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIAItLt_GenericPhyURL(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIAItLt_GenericPhyURL, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIAItLtM_IEEE802dot1Bridge(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIAItLtM_IEEE802dot1Bridge, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIAItLtM_IEEE802dot1Bridge(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIAItLtM_IEEE802dot1Bridge, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIAItLtM_PacketErrors(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIAItLtM_PacketErrors, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIAItLtM_PacketErrors(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIAItLtM_PacketErrors, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIAItLtM_PacketErrorsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIAItLtM_PacketErrorsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIAItLtM_PacketErrorsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIAItLtM_PacketErrorsReceived, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIAItLtM_TransmittedPackets(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIAItLtM_TransmittedPackets, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIAItLtM_TransmittedPackets(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIAItLtM_TransmittedPackets, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIAItLtM_PacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIAItLtM_PacketsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIAItLtM_PacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIAItLtM_PacketsReceived, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIAItLtM_MACThroughputCapacity(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIAItLtM_MACThroughputCapacity, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIAItLtM_MACThroughputCapacity(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIAItLtM_MACThroughputCapacity, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIAItLtM_LinkAvailability(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIAItLtM_LinkAvailability, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIAItLtM_LinkAvailability(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIAItLtM_LinkAvailability, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIAItLtM_PHYRate(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIAItLtM_PHYRate, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIAItLtM_PHYRate(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIAItLtM_PHYRate, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIAItLtM_RSSI(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIAItLtM_RSSI, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIAItLtM_RSSI(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIAItLtM_RSSI, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIAF_SetForwardingEnabled(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIAF_SetForwardingEnabled, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIAF_SetForwardingEnabled(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIAF_SetForwardingEnabled, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIAF_ForwardingRuleNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIAF_ForwardingRuleNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIAFFt_InterfaceList(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIAFFt_InterfaceList, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIAFFt_InterfaceList(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIAFFt_InterfaceList, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIAFFt_MACDestinationAddress(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIAFFt_MACDestinationAddress, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIAFFt_MACDestinationAddress(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIAFFt_MACDestinationAddress, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIAFFt_MACDestinationAddressFlag(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIAFFt_MACDestinationAddressFlag, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIAFFt_MACDestinationAddressFlag(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIAFFt_MACDestinationAddressFlag, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIAFFt_MACSourceAddress(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIAFFt_MACSourceAddress, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIAFFt_MACSourceAddress(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIAFFt_MACSourceAddress, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIAFFt_MACSourceAddressFlag(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIAFFt_MACSourceAddressFlag, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIAFFt_MACSourceAddressFlag(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIAFFt_MACSourceAddressFlag, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIAFFt_EtherType(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIAFFt_EtherType, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIAFFt_EtherType(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIAFFt_EtherType, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIAFFt_EtherTypeFlag(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIAFFt_EtherTypeFlag, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIAFFt_EtherTypeFlag(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIAFFt_EtherTypeFlag, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIAFFt_Vid(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIAFFt_Vid, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIAFFt_Vid(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIAFFt_Vid, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIAFFt_VidFlag(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIAFFt_VidFlag, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIAFFt_VidFlag(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIAFFt_VidFlag, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIAFFt_PCP(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIAFFt_PCP, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIAFFt_PCP(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIAFFt_PCP, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIAFFt_PCPFlag(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIAFFt_PCPFlag, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIAFFt_PCPFlag(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIAFFt_PCPFlag, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIAN_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIAN_Enable, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIAN_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIAN_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIAN_Status(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIAN_Status, value);
	/*if(ret)
	{
		return -1;
	}*/
	strcpy(value, "Available");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIAN_MaxChangeLogEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIAN_MaxChangeLogEntries, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIAN_MaxChangeLogEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIAN_MaxChangeLogEntries, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIAN_LastChange(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIAN_LastChange, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIAN_IEEE1905DeviceNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIAN_IEEE1905DeviceNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIAN_IEEE1905DeviceNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIAN_IEEE1905DeviceNumberOfEntries, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIAN_ChangeLogNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIAN_ChangeLogNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIAN_ChangeLogNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIAN_ChangeLogNumberOfEntries, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIANCt_TimeStamp(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIANCt_TimeStamp, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIANCt_EventType(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIANCt_EventType, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIANCt_ReporterDeviceId(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIANCt_ReporterDeviceId, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIANCt_ReporterInterfaceId(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIANCt_ReporterInterfaceId, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIANCt_NeighborType(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIANCt_NeighborType, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIANCt_NeighborId(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIANCt_NeighborId, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIANIt_IEEE1905Id(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIANIt_IEEE1905Id, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIANIt_Version(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIANIt_Version, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIANIt_RegistrarFreqBand(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIANIt_RegistrarFreqBand, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIANIt_FriendlyName(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIANIt_FriendlyName, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIANIt_ManufacturerName(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIANIt_ManufacturerName, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIANIt_ManufacturerModel(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIANIt_ManufacturerModel, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIANIt_ControlURL(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIANIt_ControlURL, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIANIt_VendorPropertiesNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIANIt_VendorPropertiesNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIANIt_IPv4AddressNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIANIt_IPv4AddressNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIANIt_IPv6AddressNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIANIt_IPv6AddressNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIANIt_InterfaceNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIANIt_InterfaceNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIANIt_NonIEEE1905NeighborNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIANIt_NonIEEE1905NeighborNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIANIt_NonIEEE1905NeighborNumberOfEntries_4556(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIANIt_NonIEEE1905NeighborNumberOfEntries_4556, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIANIt_L2NeighborNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIANIt_L2NeighborNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIANIt_BridgingTupleNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIANIt_BridgingTupleNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIANItIt_MACAddress(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIANItIt_MACAddress, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIANItIt_IPv4Address(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIANItIt_IPv4Address, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIANItIt_IPv4AddressType(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIANItIt_IPv4AddressType, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIANItIt_DHCPServer(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIANItIt_DHCPServer, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIANItIt_MACAddress_4563(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIANItIt_MACAddress_4563, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIANItIt_IPv6Address(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIANItIt_IPv6Address, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIANItIt_IPv6AddressType(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIANItIt_IPv6AddressType, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIANItIt_IPv6AddressOrigin(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIANItIt_IPv6AddressOrigin, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIANItVt_MessageType(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIANItVt_MessageType, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIANItVt_OUI(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIANItVt_OUI, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIANItVt_Information(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIANItVt_Information, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIANItIt_InterfaceId(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIANItIt_InterfaceId, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIANItIt_MediaType(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIANItIt_MediaType, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIANItIt_PowerState(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIANItIt_PowerState, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIANItIt_GenericPhyOUI(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIANItIt_GenericPhyOUI, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIANItIt_GenericPhyVariant(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIANItIt_GenericPhyVariant, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIANItIt_GenericPhyURL(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIANItIt_GenericPhyURL, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIANItIt_NetworkMembership(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIANItIt_NetworkMembership, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIANItIt_Role(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIANItIt_Role, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIANItIt_APChannelBand(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIANItIt_APChannelBand, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIANItIt_FrequencyIndex1(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIANItIt_FrequencyIndex1, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIANItIt_FrequencyIndex2(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIANItIt_FrequencyIndex2, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIANItNt_LocalInterface(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIANItNt_LocalInterface, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIANItNt_NeighborInterfaceId(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIANItNt_NeighborInterfaceId, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIANItLt_LocalInterface(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIANItLt_LocalInterface, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIANItLt_NeighborInterfaceId(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIANItLt_NeighborInterfaceId, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIANItLt_BehindInterfaceIds(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIANItLt_BehindInterfaceIds, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIANItIt_LocalInterface(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIANItIt_LocalInterface, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIANItIt_NeighborDeviceId(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIANItIt_NeighborDeviceId, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIANItIt_MetricNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIANItIt_MetricNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIANItIMt_NeighborMACAddress(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIANItIMt_NeighborMACAddress, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIANItIMt_IEEE802dot1Bridge(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIANItIMt_IEEE802dot1Bridge, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIANItIMt_PacketErrors(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIANItIMt_PacketErrors, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIANItIMt_PacketErrorsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIANItIMt_PacketErrorsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIANItIMt_TransmittedPackets(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIANItIMt_TransmittedPackets, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIANItIMt_PacketsReceived(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIANItIMt_PacketsReceived, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIANItIMt_MACThroughputCapacity(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIANItIMt_MACThroughputCapacity, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIANItIMt_LinkAvailability(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIANItIMt_LinkAvailability, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIANItIMt_PHYRate(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIANItIMt_PHYRate, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIANItIMt_RSSI(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIANItIMt_RSSI, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIANItBt_InterfaceList(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIANItBt_InterfaceList, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DIAS_SetupMethod(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DIAS_SetupMethod, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "UCPK,PBC");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIAS_SetupMethod(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_set(DIAS_SetupMethod, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	*/
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIAS_Password(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIAS_Password, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIAS_Password(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIAS_Password, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIAN_Registrar2dot4(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIAN_Registrar2dot4, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIAN_Registrar2dot4(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIAN_Registrar2dot4, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIAN_Registrar5(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIAN_Registrar5, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIAN_Registrar5(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIAN_Registrar5, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DIAN_Registrar60(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DIAN_Registrar60, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DIAN_Registrar60(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DIAN_Registrar60, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DXCRE_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char buf[128] = {0};
	char *index = parseTemplate(path_name, ".RIP.");

	if (index != NULL){
		sprintf(buf, "rip_block.rb%d.enable", atoi(index));
		ret = do_uci_get(buf, value);
		if(ret)
		{
			strcpy(value, "0");
			ret = 0;
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DXCRE_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char buf[128] = {0};
	char *index = parseTemplate(path_name, ".RIP.");

	if (index != NULL){
		char name[128] = {0};
		char tmpvalue[128] = {0};
		sprintf(buf, "rip_block.rb%d", atoi(index));
		sprintf(name, "rb%d", atoi(index));
		ret = do_uci_get(buf, tmpvalue);
		if(ret)
		{
			addUciTopNode("rip_block", name);
			do_uci_set(buf, "rip-block");
			ret = 0;
		}
		memset(buf, 0, sizeof(buf));
		sprintf(buf, "rip_block.rb%d.enable", atoi(index));
		ret = do_uci_set(buf, value);
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit("rip_block");
			if(ret)
			{
				return (-1);
			}
			//ret = 1; //means need to reboot for taking effect
			doRipFuncs();
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DXCRA_AdvertisementInterval(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char buf[128] = {0};
	char *index = parseTemplate(path_name, ".RIP.");

	if (index != NULL){
		sprintf(buf, "rip_block.rb%d.update", atoi(index));
		ret = do_uci_get(buf, value);
		if(ret)
		{
			strcpy(value, "30"); //default 30
			ret = 0;
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DXCRA_AdvertisementInterval(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char buf[128] = {0};
	char *index = parseTemplate(path_name, ".RIP.");

	if (index != NULL){
		char name[128] = {0};
		char tmpvalue[128] = {0};
		sprintf(buf, "rip_block.rb%d", atoi(index));
		sprintf(name, "rb%d", atoi(index));
		ret = do_uci_get(buf, tmpvalue);
		if(ret)
		{
			addUciTopNode("rip_block", name);
			do_uci_set(buf, "rip-block");
			ret = 0;
		}
		memset(buf, 0, sizeof(buf));
		sprintf(buf, "rip_block.rb%d.update", atoi(index));
		ret = do_uci_set(buf, value);
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit("rip_block");
			if(ret)
			{
				return (-1);
			}
			//ret = 1; //means need to reboot for taking effect
			doRipFuncs();
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DXCRA_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char buf[128] = {0};
	char *index = parseTemplate(path_name, ".RIP.");

	if (index != NULL){
		sprintf(buf, "rip_block.rb%d.alias", atoi(index));
		ret = do_uci_get(buf, value);
		if(ret)
		{
			sprintf(value, "cpe-ripblock%d", atoi(index));
			ret = 0;
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DXCRA_Alias(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char buf[128] = {0};
	char *index = parseTemplate(path_name, ".RIP.");

	if (!isalpha(value[0]))
		return -2;
	
	if (strlen(value) > 64)
		return -2;
	
	if (index != NULL){
		char name[128] = {0};
		char tmpvalue[128] = {0};
		sprintf(buf, "rip_block.rb%d", atoi(index));
		sprintf(name, "rb%d", atoi(index));
		ret = do_uci_get(buf, tmpvalue);
		if(ret)
		{
			addUciTopNode("rip_block", name);
			do_uci_set(buf, "rip-block");
			ret = 0;
		}
		memset(buf, 0, sizeof(buf));
		sprintf(buf, "rip_block.rb%d.alias", atoi(index));
		ret = do_uci_set(buf, value);
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit("rip_block");
			if(ret)
			{
				return (-1);
			}
			//doRipFuncs(); //don't need to restart
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DXCRA_AuthenticationMode(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char authmode[32] = {0};
	char buf[128] = {0};
	char *index = parseTemplate(path_name, ".RIP.");

	if (index != NULL){
		sprintf(buf, "rip_block.rb%d.auth_mode", atoi(index));
		ret = do_uci_get(buf, authmode);
		if(ret)
		{
			strcpy(value, "Disabled");
			ret = 0;
		}
		else
			strcpy(value, authmode);
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DXCRA_AuthenticationMode(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char buf[128] = {0};
	char *index = parseTemplate(path_name, ".RIP.");

	if ((strcasecmp(value, "Disabled") != 0) && (strcasecmp(value, "Plain Text") != 0) && (strcasecmp(value, "MD5") != 0))
		return -2;

	tr_log(LOG_DEBUG,"path_name[%s], Set Value[%s]",path_name, value);
	
	if (index != NULL){
		char name[128] = {0};
		char tmpvalue[128] = {0};
		sprintf(buf, "rip_block.rb%d", atoi(index));
		sprintf(name, "rb%d", atoi(index));
		ret = do_uci_get(buf, tmpvalue);
		if(ret)
		{
			addUciTopNode("rip_block", name);
			do_uci_set(buf, "rip-block");
			ret = 0;
		}
		memset(buf, 0, sizeof(buf));
		sprintf(buf, "rip_block.rb%d.auth_mode", atoi(index));
		ret = do_uci_set(buf, value);
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit("rip_block");
			if(ret)
			{
				return (-1);
			}
			//ret = 1; //means need to reboot for taking effect
			doRipFuncs();
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DXCRK_Key(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char buf[128] = {0};
	char *index = parseTemplate(path_name, ".RIP.");

	if (index != NULL){
		sprintf(buf, "rip_block.rb%d.key", atoi(index));
		ret = do_uci_get(buf, value);
		if(ret)
		{
			strcpy(value, "");
			ret = 0;
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DXCRK_Key(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char buf[128] = {0};
	char *index = parseTemplate(path_name, ".RIP.");

	if (strlen(value) > 64)
		return -2;

	if (strlen(value) == 0)
		return -2;

	if (!isdigit(value[0]))
		return -2;

	if((atoi(value) != 0) && (atoi(value) != 1) && (atoi(value) != 2))
		return -2;

	if (index != NULL){
		char name[128] = {0};
		char tmpvalue[128] = {0};
		sprintf(buf, "rip_block.rb%d", atoi(index));
		sprintf(name, "rb%d", atoi(index));
		ret = do_uci_get(buf, tmpvalue);
		if(ret)
		{
			addUciTopNode("rip_block", name);
			do_uci_set(buf, "rip-block");
			ret = 0;
		}
		memset(buf, 0, sizeof(buf));
		sprintf(buf, "rip_block.rb%d.key", atoi(index));
		ret = do_uci_set(buf, value);
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit("rip_block");
			if(ret)
			{
				return (-1);
			}
			//ret = 1; //means need to reboot for taking effect
			doRipFuncs();
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DXCRK_Keystring(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char buf[128] = {0};
	char *index = parseTemplate(path_name, ".RIP.");

	if (index != NULL){
		sprintf(buf, "rip_block.rb%d.key_string", atoi(index));
		ret = do_uci_get(buf, value);
		if(ret)
		{
			strcpy(value, "");
			ret = 0;
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DXCRK_Keystring(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char buf[128] = {0};
	char *index = parseTemplate(path_name, ".RIP.");

	if (strlen(value) > 64)
		return -2;
	
	if (index != NULL){
		char name[128] = {0};
		char tmpvalue[128] = {0};
		sprintf(buf, "rip_block.rb%d", atoi(index));
		sprintf(name, "rb%d", atoi(index));
		ret = do_uci_get(buf, tmpvalue);
		if(ret)
		{
			addUciTopNode("rip_block", name);
			do_uci_set(buf, "rip-block");
			ret = 0;
		}
		memset(buf, 0, sizeof(buf));
		sprintf(buf, "rip_block.rb%d.key_string", atoi(index));
		ret = do_uci_set(buf, value);
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit("rip_block");
			if(ret)
			{
				return (-1);
			}
			//ret = 1; //means need to reboot for taking effect
			doRipFuncs();
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DXCRR_RIPIP(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char buf[128] = {0};
	char *index = parseTemplate(path_name, ".RIP.");

	if (index != NULL){
		sprintf(buf, "rip_block.rb%d.rip_ip", atoi(index));
		ret = do_uci_get(buf, value);
		if(ret)
		{
			strcpy(value, "");
			ret = 0;
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DXCRR_RIPIP(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char buf[128] = {0};
	char *index = parseTemplate(path_name, ".RIP.");

	if (strlen(value) > 15)
		return -2;

	if (isValidIP2(value) == 0) //subnet address
		return -2;

	if (index != NULL){
		char name[128] = {0};
		char tmpvalue[128] = {0};
		sprintf(buf, "rip_block.rb%d", atoi(index));
		sprintf(name, "rb%d", atoi(index));
		ret = do_uci_get(buf, tmpvalue);
		if(ret)
		{
			addUciTopNode("rip_block", name);
			do_uci_set(buf, "rip-block");
			ret = 0;
		}
		memset(buf, 0, sizeof(buf));
		sprintf(buf, "rip_block.rb%d.rip_ip", atoi(index));
		ret = do_uci_set(buf, value);
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit("rip_block");
			if(ret)
			{
				return (-1);
			}
			//ret = 1; //means need to reboot for taking effect
			doRipFuncs();
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DXCRR_RIPSubnet(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char buf[128] = {0};
	char *index = parseTemplate(path_name, ".RIP.");

	if (index != NULL){
		sprintf(buf, "rip_block.rb%d.rip_subnet", atoi(index));
		ret = do_uci_get(buf, value);
		if(ret)
		{
			strcpy(value, "");
			ret = 0;
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DXCRR_RIPSubnet(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char buf[128] = {0};
	char *index = parseTemplate(path_name, ".RIP.");

	if (strlen(value) > 15)
		return -2;

	//if (isValidNetmask(value) == 0)
	//	return -2;

	//24-32
	if (strcmp(value, "255.255.255.0") != 0 && strcmp(value, "255.255.255.128") != 0 && strcmp(value, "255.255.255.192") != 0 && \
		strcmp(value, "255.255.255.224") != 0 && strcmp(value, "255.255.255.240") != 0 && strcmp(value, "255.255.255.248") != 0 && \ 
		strcmp(value, "255.255.255.252") != 0 && strcmp(value, "255.255.255.254") != 0 && strcmp(value, "255.255.255.255") != 0)
		return -2;

	if (index != NULL){
		char name[128] = {0};
		char tmpvalue[128] = {0};
		sprintf(buf, "rip_block.rb%d", atoi(index));
		sprintf(name, "rb%d", atoi(index));
		ret = do_uci_get(buf, tmpvalue);
		if(ret)
		{
			addUciTopNode("rip_block", name);
			do_uci_set(buf, "rip-block");
			ret = 0;
		}
		memset(buf, 0, sizeof(buf));
		sprintf(buf, "rip_block.rb%d.rip_subnet", atoi(index));
		ret = do_uci_set(buf, value);
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit("rip_block");
			if(ret)
			{
				return (-1);
			}
			//ret = 1; //means need to reboot for taking effect
			doRipFuncs();
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DXCRR_RIPDefaultGateway(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char buf[128] = {0};
	char *index = parseTemplate(path_name, ".RIP.");

	if (index != NULL){
		sprintf(buf, "rip_block.rb%d.rip_defaultgateway", atoi(index));
		ret = do_uci_get(buf, value);
		if(ret)
		{
			strcpy(value, "");
			ret = 0;
		}
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DXCRR_RIPDefaultGateway(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char buf[128] = {0};
	char *index = parseTemplate(path_name, ".RIP.");

	if (strlen(value) > 15)
		return -2;

	if (isValidIP2(value) == 0)
		return -2;
	
	if (index != NULL){
		char name[128] = {0};
		char tmpvalue[128] = {0};
		sprintf(buf, "rip_block.rb%d", atoi(index));
		sprintf(name, "rb%d", atoi(index));
		ret = do_uci_get(buf, tmpvalue);
		if(ret)
		{
			addUciTopNode("rip_block", name);
			do_uci_set(buf, "rip-block");
			ret = 0;
		}
		memset(buf, 0, sizeof(buf));
		sprintf(buf, "rip_block.rb%d.rip_defaultgateway", atoi(index));
		ret = do_uci_set(buf, value);
		if(ret)
		{
			return (-1);
		}
		else
		{
			ret = do_uci_commit("rip_block");
			if(ret)
			{
				return (-1);
			}
			//ret = 1; //means need to reboot for taking effect
			doRipFuncs();
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DXW_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("detection.@detect_watchdog[0].enable", value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DXW_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set("detection.@detect_watchdog[0].enable", value);
	if(ret)
	{
		return (-1);
	}

	ret = do_uci_commit("detection");
	if(ret)
	{
		return (-1);
	}

	doDetectFuncs();

	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DXW_DestinationIPDes(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("detection.@detect_watchdog[0].dst_ip4", value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DXW_DestinationIPDes(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set("detection.@detect_watchdog[0].dst_ip4", value);
	if(ret)
	{
		return (-1);
	}
	
	ret = do_uci_commit("detection");
	if(ret)
	{
		return (-1);
	}

	doDetectFuncs();
	
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DXW_Packetsize(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("detection.@detect_watchdog[0].pkt_size", value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DXW_Packetsize(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set("detection.@detect_watchdog[0].pkt_size", value);
	if(ret)
	{
		return (-1);
	}
	
	ret = do_uci_commit("detection");
	if(ret)
	{
		return (-1);
	}

	doDetectFuncs();
	
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DXW_TTL(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("detection.@detect_watchdog[0].ttl", value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DXW_TTL(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set("detection.@detect_watchdog[0].ttl", value);
	if(ret)
	{
		return (-1);
	}
	
	ret = do_uci_commit("detection");
	if(ret)
	{
		return (-1);
	}

	doDetectFuncs();
	
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DXW_Frequency(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("detection.@detect_watchdog[0].frequency", value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DXW_Frequency(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set("detection.@detect_watchdog[0].frequency", value);
	if(ret)
	{
		return (-1);
	}
	
	ret = do_uci_commit("detection");
	if(ret)
	{
		return (-1);
	}

	doDetectFuncs();
	
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DXW_MissedEchoCount(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("detection.@detect_watchdog[0].miss", value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DXW_MissedEchoCount(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set("detection.@detect_watchdog[0].miss", value);
	if(ret)
	{
		return (-1);
	}
	
	ret = do_uci_commit("detection");
	if(ret)
	{
		return (-1);
	}

	doDetectFuncs();
	
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DXW_RebootThreshold(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("detection.@detect_watchdog[0].threshold", value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DXW_RebootThreshold(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set("detection.@detect_watchdog[0].threshold", value);
	if(ret)
	{
		return (-1);
	}
	
	ret = do_uci_commit("detection");
	if(ret)
	{
		return (-1);
	}

	doDetectFuncs();
	
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DWRt_X_Charter_SpectralEnable(char * path_name, char *value){
    int ret = 0;
    tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	int type;
    char *p = parseTemplate(path_name, ".Radio.");

    if (p == NULL)
    	return -1;

	type = getWiFiRadioType(p);

    if(type == 5){/*5G*/
        ret =  do_uci_get("wireless.wlg.spectral_enable",value);
        tr_log(LOG_DEBUG,"Get the wireless.wlg.spectral_enable [%s]",value);
    }else if(type == 24){/*2.4G*/
        ret =  do_uci_get("wireless.wla.spectral_enable",value);
        tr_log(LOG_DEBUG,"Get the wireless.wla.spectral_enable [%s]",value);
    }
    
    if(ret){
        strcpy(value,"0");
        ret = 0;
    }
    
    return ret;
}
int set_DWRt_X_Charter_SpectralEnable(char * path_name, char *value){
    int ret = 0;
    tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	int type;
    char *p = parseTemplate(path_name, ".Radio.");

    if (p == NULL)
    	return -1;

	type = getWiFiRadioType(p);

    if(type == 5){/*5G*/
        ret =  do_uci_set("wireless.wlg.spectral_enable",value);
    }else if(type == 24){/*2.4G*/
        ret =  do_uci_set("wireless.wla.spectral_enable",value);
    }
    
    if(!ret){
        do_uci_commit("wireless");
        //system("wifi down");
        //system("wifi up");
		doWifiReload(atoi(p));
    }

    return ret;
}
int get_DWRt_X_Charter_AutoChannelRssiThreshold(char * path_name, char *value){
    int ret = 0;
    tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	int type;
    char *p = parseTemplate(path_name, ".Radio.");

    if (p == NULL)
    	return -1;

	type = getWiFiRadioType(p);

    if(type == 5){/*5G*/
        ret =  do_uci_get("wireless.wifi1.acs_rssivar",value);
        tr_log(LOG_DEBUG,"Get the wireless.wifi1.acs_rssivar [%s]",value);
    }else if(type == 24){/*2.4G*/
        ret =  do_uci_get("wireless.wifi0.acs_rssivar",value);
        tr_log(LOG_DEBUG,"Get the wireless.wifi0.acs_rssivar [%s]",value);
    }
    
    if(ret){
        strcpy(value,"10");
        ret = 0;
    }
    
    return ret;
}

int set_DWRt_X_Charter_AutoChannelRssiThreshold(char * path_name, char *value){
    int ret = 0;
    tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	int type;
	char *p = parseTemplate(path_name, ".Radio.");

    if (p == NULL)
    	return -1;

	type = getWiFiRadioType(p);

    if(type == 5){/*5G*/
        ret =  do_uci_set("wireless.wifi1.acs_rssivar",value);
    }else if(type == 24){/*2.4G*/
        ret =  do_uci_set("wireless.wifi0.acs_rssivar",value);
    }
	
	if(ret)
	{
		return (-1);
	}

	ret = do_uci_commit("wireless");
	if(ret)
	{
		return (-1);
	}
	//ret = 1; //means need to reboot for taking effect
	doWifiReload(atoi(p));
    
    return ret;
}
int get_DD_ClientNumberOfEntries_7072(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DD_ClientNumberOfEntries_7072, value);
	if(ret)
	{
		sprintf(value, "%d",1);
	}else{
		if(!strcmp(value,"")){
			sprintf(value, "%d",1);
		}
	}
	
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DD_ServerNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DD_ServerNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DD_SupportedServices(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DD_SupportedServices, value);
	if(ret)
	{
		sprintf(value, "%s;%s;%s;%s", ddns_server[0],ddns_server[1],ddns_server[2],ddns_server[3]);
	}else{
		if(!strcmp(value,"")){
			sprintf(value, "%s;%s;%s;%s", ddns_server[0],ddns_server[1],ddns_server[2],ddns_server[3]);
		}
	}

	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDCt_Enable_7102(char * path_name, char *value)
{
    int ret = 0;
    tr_log(LOG_DEBUG,"path_name[%s]",path_name);
    char *p = parseTemplate(path_name, ".Client.");
    
    if (p == NULL)
    return -1;        
    if(atoi(p) == 1){
       ret =  do_uci_get(DDC1_Enable_7075,value);
    }
    
    if(ret)
    {
        return -1;
    }
    tr_log(LOG_DEBUG,"get value [%s]",value);
    return ret;
}
int set_DDCt_Enable_7102(char * path_name, char *value)
{
    int ret = 0;
    tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char *p = parseTemplate(path_name, ".Client.");
	
    if(p ==NULL){
        return -1;
    }

    if(atoi(p) ==1){
        ret = do_uci_set(DDC1_Enable_7075, value);
    }
    
    if(ret)
    {
    	return (-1);
    }
    else
    {
    	ret = do_uci_commit("ddns");
    	if(ret)
    	{
    		return (-1);
    	}
        system("/etc/init.d/ddns restart &");
    }
    tr_log(LOG_DEBUG,"set value [%s]",value);
    return ret;
}
int get_DDCt_Status_7104(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDCt_Status_7104, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDCt_Alias_7105(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDCt_Alias_7105, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDCt_Alias_7105(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDCt_Alias_7105, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDCt_LastError(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDCt_LastError, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDCt_Server(char * path_name, char *value)
{
    int ret = 0;
    tr_log(LOG_DEBUG,"path_name[%s]",path_name);
    char *p = parseTemplate(path_name, ".Client.");

    if(p ==NULL){
        return -1;
    }

    if(atoi(p) ==1){
        ret = get_DynamicDNS_Server( value);
    }
    
    if(ret)
    {
    	return -1;
    }
    tr_log(LOG_DEBUG,"get value [%s]",value);
    return ret;
}
int set_DDCt_Server(char * path_name, char *value)
{
    int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
    char *p = parseTemplate(path_name, ".Client.");

    if(p ==NULL){
        return -1;
    }

    if(atoi(p) == 1){
        ret = set_DynamicDNS_Server( value);
    }

    tr_log(LOG_DEBUG,"set value [%s]",value);
    
    return ret;
    
}
int get_DDCt_Interface_7110(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDCt_Interface_7110, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDCt_Interface_7110(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDCt_Interface_7110, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDCt_Username(char * path_name, char *value)
{
    int ret = 0;
    char service_type[32] = {0};
    tr_log(LOG_DEBUG,"path_name[%s]",path_name);
    char *p = parseTemplate(path_name, ".Client.");

    if(p ==NULL){
        return -1;
    }

    if(atoi(p) == 1){
	 ret = do_uci_get(DDC1_Server,service_type);
	 if(!ret){
            if(!strcmp(service_type,ddns_list[0])){
                ret = do_uci_get(DDC1_NOIP_Username,value);		
            }else if(!strcmp(service_type,ddns_list[1])){
                ret = do_uci_get(DDC1_DYNDNS_Username,value);	
            }else if(!strcmp(service_type,ddns_list[2])){
                ret = do_uci_get(DDC1_QDNS_Username,value);
            }else if(!strcmp(service_type,ddns_list[3])){
                ret = do_uci_get(DDC1_DTDNS_Username,value);
            }
	 }
    }
    if(ret)
    {
    	return -1;
    }
    tr_log(LOG_DEBUG,"get value [%s]",value);
    return ret;
}
int set_DDCt_Username(char * path_name, char *value)
{
    int ret = 0;
    char service_type[32] = {0};
    tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	char *p = parseTemplate(path_name, ".Client.");

    if(p ==NULL){
        return -1;
    }

    if(atoi(p) == 1){
        ret = do_uci_get(DDC1_Server,service_type);
	 if(!ret){
            if(!strcmp(service_type,ddns_list[0])){
                ret = do_uci_set(DDC1_NOIP_Username,value);		
            }else if(!strcmp(service_type,ddns_list[1])){
                ret = do_uci_set(DDC1_DYNDNS_Username,value);	
            }else if(!strcmp(service_type,ddns_list[2])){
                ret = do_uci_set(DDC1_QDNS_Username,value);
            }else if(!strcmp(service_type,ddns_list[3])){
                ret = do_uci_set(DDC1_DTDNS_Username,value);
            }
	 }
    }
    if(ret)
    {
    	return -1;
    }
    tr_log(LOG_DEBUG,"set value [%s]",value);
    return ret;
}
int get_DDCt_Password(char * path_name, char *value)
{
    int ret = 0;
    char service_type[32] = {0};
    tr_log(LOG_DEBUG,"path_name[%s]",path_name);
#if 0
    char *p = parseTemplate(path_name, ".Client.");

    if(p ==NULL){
        return -1;
    }

    if(atoi(p) == 1){
        ret = do_uci_get(DDC1_Server,service_type);
	 if(!ret){
            if(!strcmp(service_type,ddns_list[0])){
                ret = do_uci_get(DDC1_NOIP_Password,value);		
            }else if(!strcmp(service_type,ddns_list[1])){
                ret = do_uci_get(DDC1_DYNDNS_Password,value);	
            }else if(!strcmp(service_type,ddns_list[2])){
                ret = do_uci_get(DDC1_QDNS_Password,value);
            }else if(!strcmp(service_type,ddns_list[3])){
                ret = do_uci_get(DDC1_DTDNS_Password,value);
            }
	 }
    }
    if(ret)
    {
    	return -1;
    }
#else
    strcpy(value, ""); //password to show null
#endif
    tr_log(LOG_DEBUG,"get value [%s]",value);
    return ret;
}
int set_DDCt_Password(char * path_name, char *value)
{
    int ret = 0;
    char service_type[32] = {0};
    tr_log(LOG_DEBUG,"path_name[%s]",path_name);
    char *p = parseTemplate(path_name, ".Client.");

    if(p ==NULL){
        return -1;
    }

    if(atoi(p) == 1){
        ret = do_uci_get(DDC1_Server,service_type);
	 if(!ret){
            if(!strcmp(service_type,ddns_list[0])){
                ret = do_uci_set(DDC1_NOIP_Password,value);		
            }else if(!strcmp(service_type,ddns_list[1])){
                ret = do_uci_set(DDC1_DYNDNS_Password,value);	
            }else if(!strcmp(service_type,ddns_list[2])){
                ret = do_uci_set(DDC1_QDNS_Password,value);
            }else if(!strcmp(service_type,ddns_list[3])){
                ret = do_uci_set(DDC1_DTDNS_Password,value);
            }
	 }
    }
    if(ret)
    {
    	return -1;
    }
    tr_log(LOG_DEBUG,"set value [%s]",value);
    return ret;
}
int get_DDCt_HostnameNumberOfEntries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDCt_HostnameNumberOfEntries, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDCtHt_Enable(char * path_name, char *value)
{
    int ret = 0;
    tr_log(LOG_DEBUG,"path_name[%s]",path_name);
    char *p = parseTemplate(path_name,".Client.");

    if(p == NULL){
        return -1;
    }
    if(atoi(p) == 1){/*Device.DynamicDNS.Client.1.*/
        p = parseTemplate(path_name, ".Hostname.");
        if(p == NULL){
            return -1;
        }
        if(atoi(p) == 1){/*Device.DynamicDNS.Client.1.Hostname.1.*/
           // ret = do_uci_get(DDC1H1_Enable,value);
        }
    }
    
    if(ret)
    {
    	return -1;
    }
    tr_log(LOG_DEBUG,"get value [%s]",value);
    return ret;
}
int set_DDCtHt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDCtHt_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDCtHt_Status(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDCtHt_Status, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDCtHt_Name(char * path_name, char *value)
{
    int ret = 0;
    char *p = NULL;
    tr_log(LOG_DEBUG,"path_name[%s]",path_name);
    char tmp_path[256] = {0};
    char service_type[32] = {0};
	
    strcpy(tmp_path,path_name);
    
    p = parseTemplate(path_name,".Client.");
    if(p == NULL){
        return -1;
    }
    if(atoi(p) == 1){/*Device.DynamicDNS.Client.1.*/
		tr_log(LOG_DEBUG,"THE CLIENT [1] IS GOT");
		tr_log(LOG_DEBUG,"the path_name now is [%s]",path_name);
		p = parseTemplate(tmp_path, ".Hostname.");
		if(p == NULL){
			return -1;
		}
		if(atoi(p) == 1){/*Device.DynamicDNS.Client.1.Hostname.1.*/
			tr_log(LOG_DEBUG,"THE HOSTNAME [1] IS GOT");
			ret = do_uci_get(DDC1_Server,service_type);
			if(!ret){
				if(!strcmp(service_type,ddns_list[0])){
					ret = do_uci_get(DDC1H1_NOIP_Name,value);		
				}else if(!strcmp(service_type,ddns_list[1])){
					ret = do_uci_get(DDC1H1_DYNDNS_Name,value);	
				}else if(!strcmp(service_type,ddns_list[2])){
					ret = do_uci_get(DDC1H1_QDNS_Name,value);
				}else if(!strcmp(service_type,ddns_list[3])){
					ret = do_uci_get(DDC1H1_DTDNS_Name,value);
				}
			}
		}
     }

    if(ret)
    {
    	return -1;
    }
    tr_log(LOG_DEBUG,"get value [%s]",value);
    return ret;
}
int set_DDCtHt_Name(char * path_name, char *value)
{
    int ret = 0;
    char *p = NULL;
    char tmp_path[256] = {0};
    char service_type[32] = {0};
	
    strcpy(tmp_path,path_name);
    
    tr_log(LOG_DEBUG,"path_name[%s]",path_name);

    p = parseTemplate(path_name,".Client.");
    if(p == NULL){
        return -1;
    }
    if(atoi(p) == 1){/*Device.DynamicDNS.Client.1.*/
		p = parseTemplate(tmp_path, ".Hostname.");
		if(p == NULL){
			return -1;
		}
		if(atoi(p) == 1){/*Device.DynamicDNS.Client.1.Hostname.1.*/
			ret = do_uci_get(DDC1_Server,service_type);
			if(!ret){
				if(!strcmp(service_type,ddns_list[0])){
					ret = do_uci_set(DDC1H1_NOIP_Name,value);		
				}else if(!strcmp(service_type,ddns_list[1])){
					ret = do_uci_set(DDC1H1_DYNDNS_Name,value);	
				}else if(!strcmp(service_type,ddns_list[2])){
					ret = do_uci_set(DDC1H1_QDNS_Name,value);
				}else if(!strcmp(service_type,ddns_list[3])){
					ret = do_uci_set(DDC1H1_DTDNS_Name,value);
				}
			}
		}
    }

    tr_log(LOG_DEBUG,"set value [%s]",value);
    return ret;
}
int get_DDCtHt_LastUpdate(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDCtHt_LastUpdate, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
    
int get_DDSt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDSt_Enable, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDSt_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDSt_Enable, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDSt_Name(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDSt_Name, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDSt_Alias_7152(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDSt_Alias_7152, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDSt_Alias_7152(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDSt_Alias_7152, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDSt_ServiceName(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDSt_ServiceName, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDSt_ServiceName(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDSt_ServiceName, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDSt_ServerAddress(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDSt_ServerAddress, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDSt_ServerAddress(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDSt_ServerAddress, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDSt_ServerPort(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDSt_ServerPort, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDSt_ServerPort(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDSt_ServerPort, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDSt_SupportedProtocols(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDSt_SupportedProtocols, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DDSt_Protocol(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDSt_Protocol, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDSt_Protocol(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDSt_Protocol, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDSt_CheckInterval(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDSt_CheckInterval, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDSt_CheckInterval(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDSt_CheckInterval, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDSt_RetryInterval(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDSt_RetryInterval, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDSt_RetryInterval(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDSt_RetryInterval, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DDSt_MaxRetries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DDSt_MaxRetries, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DDSt_MaxRetries(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set(DDSt_MaxRetries, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit(MS);
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DXR_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("dropbear.@dropbear[0].enable", value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DXR_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set("dropbear.@dropbear[0].enable", value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("dropbear");
		if(ret)
		{
			return (-1);
		}
		doSSHFuncs(0);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DXR_Port(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("dropbear.@dropbear[0].Port", value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DXR_Port(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if(atoi(value) < 0 || atoi(value) > 65535)
	{
		return -2;
	}

	if (checkPortUsing(atoi(value)) == 1)
		return -2;
	
	ret = do_uci_set("dropbear.@dropbear[0].Port", value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("dropbear");
		if(ret)
		{
			return (-1);
		}
		doSSHFuncs(0);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DXR_SupportedProtocols(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DXR_SupportedProtocols, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "SSH");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DXR_Protocol(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DXR_Protocol, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DXR_Protocol(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (strcmp(value, "SSH") != 0)
		return -2;
	
	ret = do_uci_set(DXR_Protocol, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("dropbear");
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DXL_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("dropbear.@dropbear[1].enable", value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DXL_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set("dropbear.@dropbear[1].enable", value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("dropbear");
		if(ret)
		{
			return (-1);
		}
		doSSHFuncs(1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DXL_Port(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("dropbear.@dropbear[1].Port", value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DXL_Port(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if(atoi(value) < 0 || atoi(value) > 65535)
	{
		return -2;
	}

	if (checkPortUsing(atoi(value)) == 1)
		return -2;
	
	ret = do_uci_set("dropbear.@dropbear[1].Port", value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("dropbear");
		if(ret)
		{
			return (-1);
		}
		doSSHFuncs(1);
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DXL_SupportedProtocols(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	/*ret = do_uci_get(DXL_SupportedProtocols, value);
	if(ret)
	{
		return -1;
	}*/
	strcpy(value, "SSH");
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int get_DXL_Protocol(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get(DXL_Protocol, value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DXL_Protocol(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (strcmp(value, "SSH") != 0)
		return -2;
	
	ret = do_uci_set(DXL_Protocol, value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("dropbear");
		if(ret)
		{
			return (-1);
		}
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DXC_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("detection.@detect_cpu[0].enable", value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DXC_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set("detection.@detect_cpu[0].enable", value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("detection");
		if(ret)
		{
			return (-1);
		}
		doDetectFuncs();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DXC_CPUThreshold(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("detection.@detect_cpu[0].threshold", value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DXC_CPUThreshold(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (atoi(value) < 0 || atoi(value) > 100)
		return -2;
	
	ret = do_uci_set("detection.@detect_cpu[0].threshold", value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("detection");
		if(ret)
		{
			return (-1);
		}
		doDetectFuncs();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DXC_CPUtimer(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("detection.@detect_cpu[0].timer", value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DXC_CPUtimer(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set("detection.@detect_cpu[0].timer", value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("detection");
		if(ret)
		{
			return (-1);
		}
		doDetectFuncs();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DXM_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("detection.@detect_mem[0].enable", value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DXM_Enable(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set("detection.@detect_mem[0].enable", value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("detection");
		if(ret)
		{
			return (-1);
		}
		doDetectFuncs();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DXM_MemoryThreshold(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("detection.@detect_mem[0].threshold", value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DXM_MemoryThreshold(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);

	if (atoi(value) < 0 || atoi(value) > 100)
		return -2;
	
	ret = do_uci_set("detection.@detect_mem[0].threshold", value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("detection");
		if(ret)
		{
			return (-1);
		}
		doDetectFuncs();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
int get_DXM_Memorytimer(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_get("detection.@detect_mem[0].timer", value);
	if(ret)
	{
		return -1;
	}
	tr_log(LOG_DEBUG,"get value [%s]",value);
	return ret;
}
int set_DXM_Memorytimer(char * path_name, char *value)
{
	int ret = 0;
	tr_log(LOG_DEBUG,"path_name[%s]",path_name);
	ret = do_uci_set("detection.@detect_mem[0].timer", value);
	if(ret)
	{
		return (-1);
	}
	else
	{
		ret = do_uci_commit("detection");
		if(ret)
		{
			return (-1);
		}
		doDetectFuncs();
	}
	tr_log(LOG_DEBUG,"set value [%s]",value);
	return ret;
}
#endif
